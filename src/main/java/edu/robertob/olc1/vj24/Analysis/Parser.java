
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package edu.robertob.olc1.vj24.Analysis;

import edu.robertob.olc1.vj24.Engine.Statements.*;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import edu.robertob.olc1.vj24.Engine.Base.Instruction;
import edu.robertob.olc1.vj24.Engine.Structs.Types;
import edu.robertob.olc1.vj24.Engine.Structs.JCError;
import edu.robertob.olc1.vj24.Engine.Expressions.SymbolAccess;
import edu.robertob.olc1.vj24.Engine.Expressions.Primitive;
import edu.robertob.olc1.vj24.Engine.Expressions.Arithmetic;
import edu.robertob.olc1.vj24.Engine.Expressions.Comparison;
import edu.robertob.olc1.vj24.Engine.Structs.ComparisonOperands;
import edu.robertob.olc1.vj24.Engine.Expressions.Logical;
import edu.robertob.olc1.vj24.Engine.Structs.LogicalOperands;
import edu.robertob.olc1.vj24.Engine.Structs.ArithmeticOperands;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\004\000\002\016\004\000\002\017" +
    "\004\000\002\005\007\000\002\006\011\000\002\006\007" +
    "\000\002\006\007\000\002\006\011\000\002\007\006\000" +
    "\002\010\011\000\002\010\015\000\002\011\011\000\002" +
    "\014\006\000\002\015\006\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\013\004\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\004\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\024\003\023\006\010\036\020\042\013\050" +
    "\017\051\022\052\005\053\015\054\007\001\002\000\030" +
    "\002\ufff5\003\ufff5\006\ufff5\017\ufff5\036\ufff5\042\ufff5\050" +
    "\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\001\002\000\004" +
    "\034\164\001\002\000\030\002\ufff8\003\ufff8\006\ufff8\017" +
    "\ufff8\036\ufff8\042\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8" +
    "\054\ufff8\001\002\000\004\012\163\001\002\000\010\013" +
    "\153\014\154\015\152\001\002\000\030\002\ufff7\003\ufff7" +
    "\006\ufff7\017\ufff7\036\ufff7\042\ufff7\050\ufff7\051\ufff7\052" +
    "\ufff7\053\ufff7\054\ufff7\001\002\000\026\002\000\003\023" +
    "\006\010\036\020\042\013\050\017\051\022\052\005\053" +
    "\015\054\007\001\002\000\004\034\137\001\002\000\030" +
    "\002\ufffa\003\ufffa\006\ufffa\017\ufffa\036\ufffa\042\ufffa\050" +
    "\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\001\002\000\004" +
    "\012\136\001\002\000\030\002\ufff6\003\ufff6\006\ufff6\017" +
    "\ufff6\036\ufff6\042\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6" +
    "\054\ufff6\001\002\000\004\006\127\001\002\000\004\034" +
    "\123\001\002\000\030\002\ufff9\003\ufff9\006\ufff9\017\ufff9" +
    "\036\ufff9\042\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054" +
    "\ufff9\001\002\000\004\006\033\001\002\000\004\012\032" +
    "\001\002\000\030\002\ufffc\003\ufffc\006\ufffc\017\ufffc\036" +
    "\ufffc\042\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc" +
    "\001\002\000\004\002\031\001\002\000\030\002\ufffb\003" +
    "\ufffb\006\ufffb\017\ufffb\036\ufffb\042\ufffb\050\ufffb\051\ufffb" +
    "\052\ufffb\053\ufffb\054\ufffb\001\002\000\030\002\ufffe\003" +
    "\ufffe\006\ufffe\017\ufffe\036\ufffe\042\ufffe\050\ufffe\051\ufffe" +
    "\052\ufffe\053\ufffe\054\ufffe\001\002\000\030\002\ufffd\003" +
    "\ufffd\006\ufffd\017\ufffd\036\ufffd\042\ufffd\050\ufffd\051\ufffd" +
    "\052\ufffd\053\ufffd\054\ufffd\001\002\000\004\002\001\001" +
    "\002\000\030\002\ufff4\003\ufff4\006\ufff4\017\ufff4\036\ufff4" +
    "\042\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\001" +
    "\002\000\004\025\034\001\002\000\014\037\036\040\041" +
    "\041\040\045\042\046\035\001\002\000\006\012\uffe2\015" +
    "\uffe2\001\002\000\006\012\uffe6\015\uffe6\001\002\000\006" +
    "\012\044\015\043\001\002\000\006\012\uffe4\015\uffe4\001" +
    "\002\000\006\012\uffe5\015\uffe5\001\002\000\006\012\uffe3" +
    "\015\uffe3\001\002\000\026\005\053\006\055\007\050\010" +
    "\046\011\057\014\045\024\054\034\051\043\052\044\047" +
    "\001\002\000\030\002\uffee\003\uffee\006\uffee\017\uffee\036" +
    "\uffee\042\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee" +
    "\001\002\000\026\005\053\006\055\007\050\010\046\011" +
    "\057\014\045\024\054\034\051\043\052\044\047\001\002" +
    "\000\044\012\uffcf\013\uffcf\014\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\035\uffcf\055\uffcf\056\uffcf\057\uffcf\001\002\000" +
    "\044\012\uffcb\013\uffcb\014\uffcb\020\uffcb\021\uffcb\022\uffcb" +
    "\023\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\035\uffcb\055\uffcb\056\uffcb\057\uffcb\001\002\000\044" +
    "\012\uffd0\013\uffd0\014\uffd0\020\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\035\uffd0\055\uffd0\056\uffd0\057\uffd0\001\002\000\026\005" +
    "\053\006\055\007\050\010\046\011\057\014\045\024\054" +
    "\034\051\043\052\044\047\001\002\000\044\012\uffcc\013" +
    "\uffcc\014\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\035\uffcc\055" +
    "\uffcc\056\uffcc\057\uffcc\001\002\000\044\012\uffce\013\uffce" +
    "\014\uffce\020\uffce\021\uffce\022\uffce\023\uffce\026\uffce\027" +
    "\uffce\030\uffce\031\uffce\032\uffce\033\uffce\035\uffce\055\uffce" +
    "\056\uffce\057\uffce\001\002\000\026\005\053\006\055\007" +
    "\050\010\046\011\057\014\045\024\054\034\051\043\052" +
    "\044\047\001\002\000\044\012\uffca\013\uffca\014\uffca\020" +
    "\uffca\021\uffca\022\uffca\023\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\035\uffca\055\uffca\056\uffca\057" +
    "\uffca\001\002\000\042\012\064\013\067\014\061\020\070" +
    "\021\063\022\074\023\071\026\075\027\073\030\065\031" +
    "\066\032\076\033\072\055\077\056\060\057\062\001\002" +
    "\000\044\012\uffcd\013\uffcd\014\uffcd\020\uffcd\021\uffcd\022" +
    "\uffcd\023\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd" +
    "\033\uffcd\035\uffcd\055\uffcd\056\uffcd\057\uffcd\001\002\000" +
    "\026\005\053\006\055\007\050\010\046\011\057\014\045" +
    "\024\054\034\051\043\052\044\047\001\002\000\026\005" +
    "\053\006\055\007\050\010\046\011\057\014\045\024\054" +
    "\034\051\043\052\044\047\001\002\000\026\005\053\006" +
    "\055\007\050\010\046\011\057\014\045\024\054\034\051" +
    "\043\052\044\047\001\002\000\026\005\053\006\055\007" +
    "\050\010\046\011\057\014\045\024\054\034\051\043\052" +
    "\044\047\001\002\000\030\002\uffed\003\uffed\006\uffed\017" +
    "\uffed\036\uffed\042\uffed\050\uffed\051\uffed\052\uffed\053\uffed" +
    "\054\uffed\001\002\000\026\005\053\006\055\007\050\010" +
    "\046\011\057\014\045\024\054\034\051\043\052\044\047" +
    "\001\002\000\026\005\053\006\055\007\050\010\046\011" +
    "\057\014\045\024\054\034\051\043\052\044\047\001\002" +
    "\000\026\005\053\006\055\007\050\010\046\011\057\014" +
    "\045\024\054\034\051\043\052\044\047\001\002\000\026" +
    "\005\053\006\055\007\050\010\046\011\057\014\045\024" +
    "\054\034\051\043\052\044\047\001\002\000\026\005\053" +
    "\006\055\007\050\010\046\011\057\014\045\024\054\034" +
    "\051\043\052\044\047\001\002\000\026\005\053\006\055" +
    "\007\050\010\046\011\057\014\045\024\054\034\051\043" +
    "\052\044\047\001\002\000\026\005\053\006\055\007\050" +
    "\010\046\011\057\014\045\024\054\034\051\043\052\044" +
    "\047\001\002\000\026\005\053\006\055\007\050\010\046" +
    "\011\057\014\045\024\054\034\051\043\052\044\047\001" +
    "\002\000\026\005\053\006\055\007\050\010\046\011\057" +
    "\014\045\024\054\034\051\043\052\044\047\001\002\000" +
    "\026\005\053\006\055\007\050\010\046\011\057\014\045" +
    "\024\054\034\051\043\052\044\047\001\002\000\026\005" +
    "\053\006\055\007\050\010\046\011\057\014\045\024\054" +
    "\034\051\043\052\044\047\001\002\000\044\012\uffd3\013" +
    "\067\014\061\020\070\021\063\022\074\023\071\026\075" +
    "\027\073\030\065\031\066\032\076\033\072\035\uffd3\055" +
    "\uffd3\056\060\057\062\001\002\000\044\012\uffd5\013\067" +
    "\014\061\020\070\021\063\022\074\023\071\026\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\035\uffd5\055\uffd5" +
    "\056\uffd5\057\uffd5\001\002\000\044\012\uffda\013\067\014" +
    "\061\020\070\021\063\022\074\023\071\026\uffda\027\uffda" +
    "\030\uffda\031\uffda\032\uffda\033\uffda\035\uffda\055\uffda\056" +
    "\uffda\057\uffda\001\002\000\044\012\uffdd\013\uffdd\014\uffdd" +
    "\020\uffdd\021\uffdd\022\uffdd\023\071\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\035\uffdd\055\uffdd\056\uffdd" +
    "\057\uffdd\001\002\000\044\012\uffd8\013\067\014\061\020" +
    "\070\021\063\022\074\023\071\026\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\035\uffd8\055\uffd8\056\uffd8\057" +
    "\uffd8\001\002\000\044\012\uffd9\013\067\014\061\020\070" +
    "\021\063\022\074\023\071\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\035\uffd9\055\uffd9\056\uffd9\057\uffd9" +
    "\001\002\000\042\012\uffde\013\uffde\014\uffde\020\uffde\021" +
    "\uffde\022\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\035\uffde\055\uffde\056\uffde\057\uffde\001\002\000" +
    "\044\012\uffe0\013\uffe0\014\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\071\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\035\uffe0\055\uffe0\056\uffe0\057\uffe0\001\002\000\044" +
    "\012\uffdb\013\uffdb\014\uffdb\020\070\021\063\022\074\023" +
    "\071\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\035\uffdb\055\uffdb\056\uffdb\057\uffdb\001\002\000\044\012" +
    "\uffd7\013\067\014\061\020\070\021\063\022\074\023\071" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\035" +
    "\uffd7\055\uffd7\056\uffd7\057\uffd7\001\002\000\044\012\uffd6" +
    "\013\067\014\061\020\070\021\063\022\074\023\071\026" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\035\uffd6" +
    "\055\uffd6\056\uffd6\057\uffd6\001\002\000\044\012\uffdf\013" +
    "\uffdf\014\uffdf\020\uffdf\021\uffdf\022\uffdf\023\071\026\uffdf" +
    "\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\035\uffdf\055" +
    "\uffdf\056\uffdf\057\uffdf\001\002\000\044\012\uffd1\013\067" +
    "\014\061\020\070\021\063\022\074\023\071\026\075\027" +
    "\073\030\065\031\066\032\076\033\072\035\uffd1\055\uffd1" +
    "\056\uffd1\057\uffd1\001\002\000\044\012\uffdc\013\uffdc\014" +
    "\uffdc\020\070\021\063\022\074\023\071\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\033\uffdc\035\uffdc\055\uffdc\056" +
    "\uffdc\057\uffdc\001\002\000\044\012\uffd2\013\067\014\061" +
    "\020\070\021\063\022\074\023\071\026\075\027\073\030" +
    "\065\031\066\032\076\033\072\035\uffd2\055\uffd2\056\uffd2" +
    "\057\062\001\002\000\044\012\uffd4\013\067\014\061\020" +
    "\070\021\063\022\074\023\071\026\075\027\073\030\065" +
    "\031\066\032\076\033\072\035\uffd4\055\uffd4\056\uffd4\057" +
    "\uffd4\001\002\000\042\013\067\014\061\020\070\021\063" +
    "\022\074\023\071\026\075\027\073\030\065\031\066\032" +
    "\076\033\072\035\121\055\077\056\060\057\062\001\002" +
    "\000\044\012\uffc9\013\uffc9\014\uffc9\020\uffc9\021\uffc9\022" +
    "\uffc9\023\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\035\uffc9\055\uffc9\056\uffc9\057\uffc9\001\002\000" +
    "\044\012\uffe1\013\uffe1\014\uffe1\020\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\035\uffe1\055\uffe1\056\uffe1\057\uffe1\001\002\000\026" +
    "\005\053\006\055\007\050\010\046\011\057\014\045\024" +
    "\054\034\051\043\052\044\047\001\002\000\042\013\067" +
    "\014\061\020\070\021\063\022\074\023\071\026\075\027" +
    "\073\030\065\031\066\032\076\033\072\035\125\055\077" +
    "\056\060\057\062\001\002\000\004\012\126\001\002\000" +
    "\030\002\ufff1\003\ufff1\006\ufff1\017\ufff1\036\ufff1\042\ufff1" +
    "\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\001\002\000" +
    "\004\025\130\001\002\000\014\037\036\040\041\041\040" +
    "\045\042\046\035\001\002\000\006\012\133\015\132\001" +
    "\002\000\026\005\053\006\055\007\050\010\046\011\057" +
    "\014\045\024\054\034\051\043\052\044\047\001\002\000" +
    "\030\002\uffef\003\uffef\006\uffef\017\uffef\036\uffef\042\uffef" +
    "\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\001\002\000" +
    "\042\012\135\013\067\014\061\020\070\021\063\022\074" +
    "\023\071\026\075\027\073\030\065\031\066\032\076\033" +
    "\072\055\077\056\060\057\062\001\002\000\030\002\ufff0" +
    "\003\ufff0\006\ufff0\017\ufff0\036\ufff0\042\ufff0\050\ufff0\051" +
    "\ufff0\052\ufff0\053\ufff0\054\ufff0\001\002\000\030\002\ufff3" +
    "\003\ufff3\006\ufff3\017\ufff3\036\ufff3\042\ufff3\050\ufff3\051" +
    "\ufff3\052\ufff3\053\ufff3\054\ufff3\001\002\000\026\005\053" +
    "\006\055\007\050\010\046\011\057\014\045\024\054\034" +
    "\051\043\052\044\047\001\002\000\042\013\067\014\061" +
    "\020\070\021\063\022\074\023\071\026\075\027\073\030" +
    "\065\031\066\032\076\033\072\035\141\055\077\056\060" +
    "\057\062\001\002\000\004\016\142\001\002\000\024\003" +
    "\023\006\010\036\020\042\013\050\017\051\022\052\005" +
    "\053\015\054\007\001\002\000\026\003\023\006\010\017" +
    "\144\036\020\042\013\050\017\051\022\052\005\053\015" +
    "\054\007\001\002\000\032\002\uffeb\003\uffeb\006\uffeb\017" +
    "\uffeb\036\uffeb\042\uffeb\047\146\050\uffeb\051\uffeb\052\uffeb" +
    "\053\uffeb\054\uffeb\001\002\000\030\002\uffff\003\uffff\006" +
    "\uffff\017\uffff\036\uffff\042\uffff\050\uffff\051\uffff\052\uffff" +
    "\053\uffff\054\uffff\001\002\000\004\016\147\001\002\000" +
    "\024\003\023\006\010\036\020\042\013\050\017\051\022" +
    "\052\005\053\015\054\007\001\002\000\026\003\023\006" +
    "\010\017\151\036\020\042\013\050\017\051\022\052\005" +
    "\053\015\054\007\001\002\000\030\002\uffea\003\uffea\006" +
    "\uffea\017\uffea\036\uffea\042\uffea\050\uffea\051\uffea\052\uffea" +
    "\053\uffea\054\uffea\001\002\000\026\005\053\006\055\007" +
    "\050\010\046\011\057\014\045\024\054\034\051\043\052" +
    "\044\047\001\002\000\004\013\157\001\002\000\004\014" +
    "\155\001\002\000\004\012\156\001\002\000\030\002\uffe7" +
    "\003\uffe7\006\uffe7\017\uffe7\036\uffe7\042\uffe7\050\uffe7\051" +
    "\uffe7\052\uffe7\053\uffe7\054\uffe7\001\002\000\004\012\160" +
    "\001\002\000\030\002\uffe8\003\uffe8\006\uffe8\017\uffe8\036" +
    "\uffe8\042\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8" +
    "\001\002\000\042\012\162\013\067\014\061\020\070\021" +
    "\063\022\074\023\071\026\075\027\073\030\065\031\066" +
    "\032\076\033\072\055\077\056\060\057\062\001\002\000" +
    "\030\002\uffec\003\uffec\006\uffec\017\uffec\036\uffec\042\uffec" +
    "\050\uffec\051\uffec\052\uffec\053\uffec\054\uffec\001\002\000" +
    "\030\002\ufff2\003\ufff2\006\ufff2\017\ufff2\036\ufff2\042\ufff2" +
    "\050\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\001\002\000" +
    "\026\005\053\006\055\007\050\010\046\011\057\014\045" +
    "\024\054\034\051\043\052\044\047\001\002\000\042\013" +
    "\067\014\061\020\070\021\063\022\074\023\071\026\075" +
    "\027\073\030\065\031\066\032\076\033\072\035\166\055" +
    "\077\056\060\057\062\001\002\000\004\016\167\001\002" +
    "\000\024\003\023\006\010\036\020\042\013\050\017\051" +
    "\022\052\005\053\015\054\007\001\002\000\026\003\023" +
    "\006\010\017\171\036\020\042\013\050\017\051\022\052" +
    "\005\053\015\054\007\001\002\000\030\002\uffe9\003\uffe9" +
    "\006\uffe9\017\uffe9\036\uffe9\042\uffe9\050\uffe9\051\uffe9\052" +
    "\uffe9\053\uffe9\054\uffe9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\032\002\024\003\011\004\026\005\027\006" +
    "\023\007\025\010\013\011\010\014\020\015\005\016\015" +
    "\017\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\144\005\027\006\023\007\025\010" +
    "\013\011\010\014\020\015\005\016\015\017\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\055\001\001" +
    "\000\002\001\001\000\004\013\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\115\001\001\000\004\013\114\001" +
    "\001\000\004\013\113\001\001\000\004\013\112\001\001" +
    "\000\002\001\001\000\004\013\111\001\001\000\004\013" +
    "\110\001\001\000\004\013\107\001\001\000\004\013\106" +
    "\001\001\000\004\013\105\001\001\000\004\013\104\001" +
    "\001\000\004\013\103\001\001\000\004\013\102\001\001" +
    "\000\004\013\101\001\001\000\004\013\100\001\001\000" +
    "\004\013\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\130\001\001\000\002\001\001\000\004\013\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\142\004\026\005" +
    "\027\006\023\007\025\010\013\011\010\014\020\015\005" +
    "\016\015\017\003\001\001\000\026\004\144\005\027\006" +
    "\023\007\025\010\013\011\010\014\020\015\005\016\015" +
    "\017\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\147\004\026\005\027\006\023" +
    "\007\025\010\013\011\010\014\020\015\005\016\015\017" +
    "\003\001\001\000\026\004\144\005\027\006\023\007\025" +
    "\010\013\011\010\014\020\015\005\016\015\017\003\001" +
    "\001\000\002\001\001\000\004\013\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\167" +
    "\004\026\005\027\006\023\007\025\010\013\011\010\014" +
    "\020\015\005\016\015\017\003\001\001\000\026\004\144" +
    "\005\027\006\023\007\025\010\013\011\010\014\020\015" +
    "\005\016\015\017\003\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    JCLexer s;
    Parser(JCLexer s){this.s = s;}

//    public LinkedList<Errores> listaErrores = new LinkedList<>();
    private LinkedList<JCError> errorList = new LinkedList<>();
    public LinkedList<JCError> getSyntaxErrorList(){
        return errorList;
    }

    public void syntax_error(Symbol s){
        errorList.add(new JCError("Sintaxis", "Error en la instruccion, componente: "+s.value, s.left, s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        errorList.add(new JCError("Sintaxis - FATAL", "Error en la instruccion, componente: "+s.value, s.left, s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> start_val = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= STATEMENTS 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // STATEMENTS ::= STATEMENTS STATEMENT 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STATEMENTS ::= STATEMENT 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STATEMENT ::= IMPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT=a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STATEMENT ::= DECLARATION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT=a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATEMENT ::= ASSIGNATION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT=a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENT ::= IF_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT=a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENT ::= INCREMENT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT=a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEMENT ::= DECREMENT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT=a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STATEMENT ::= WHILE_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT=a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STATEMENT ::= BREAK 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT=a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STATEMENT ::= CONTINUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT=a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STATEMENT ::= error ENDLINE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   System.out.println(e);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BREAK ::= RW_BREAK ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new Break(aleft, aright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BREAK",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTINUE ::= RW_CONTINUE ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new Continue(aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IMPRESION ::= RW_PRINT OPENPAR EXPRESION CLOSEPAR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		   RESULT = new Print(a, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARATION ::= RW_CONST ID COLON TYPES EQUALS EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Types b = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new Declaration(a, b, c, true, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARATION ::= RW_CONST ID COLON TYPES ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types b = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new Declaration(a, b, null, true,aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARATION ::= RW_VAR ID COLON TYPES ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types b = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new Declaration(a, b, null, false, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARATION ::= RW_VAR ID COLON TYPES EQUALS EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Types b = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new Declaration(a, b, c, false, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASSIGNATION ::= ID EQUALS EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT=new SymbolAssignation(a, b, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IF_STMT ::= RW_IF OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new IfStatement(a, b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_STMT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IF_STMT ::= RW_IF OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE RW_ELSE OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new IfStatement(a, b, c, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_STMT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // WHILE_STMT ::= RW_WHILE OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new WhileStatement(a, b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE_STMT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INCREMENT ::= ID PLUS PLUS ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		   RESULT = new SymbolAssignation(a, new Arithmetic(new SymbolAccess(a, aleft, aright),new Primitive(Types.INTEGER, 1, aleft, aright),ArithmeticOperands.SUM, aleft, aright), aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECREMENT ::= ID MINUS MINUS ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		   RESULT = new SymbolAssignation(a, new Arithmetic(new SymbolAccess(a, aleft, aright), new Primitive(Types.INTEGER, 1, aleft, aright), ArithmeticOperands.SUB, aleft, aright), aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECREMENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TYPES ::= RW_INT 
            {
              Types RESULT =null;
		   RESULT=Types.INTEGER;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TYPES ::= RW_DOUBLE 
            {
              Types RESULT =null;
		   RESULT=Types.DOUBLE;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TYPES ::= RW_STRING 
            {
              Types RESULT =null;
		   RESULT=Types.STRING;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TYPES ::= RW_BOOL 
            {
              Types RESULT =null;
		   RESULT=Types.BOOLEAN;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TYPES ::= RW_CHAR 
            {
              Types RESULT =null;
		   RESULT=Types.CHARACTER;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPES",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= MINUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, ArithmeticOperands.NEG, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= EXPRESION ASTERISK EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.MUL, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= EXPRESION SLASH EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.DIV, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= EXPRESION DOUBLEASTERISK EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.POW, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.MOD, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= EXPRESION MINUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.SUB, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESION PLUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.SUM, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= EXPRESION DOUBLEEQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.EQUALS, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION NOT_EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.NOT_EQUALS, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION LESS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.LESS_THAN, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION LESSEQUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.LESS_THAN_OR_EQUALS, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION GREATER EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.GREATER_THAN, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESION GREATEREQUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.GREATER_THAN_OR_EQUALS, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= NEGATION EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    RESULT = new Logical(a, LogicalOperands.NOT, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    RESULT = new Logical(a, b, LogicalOperands.OR, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    RESULT = new Logical(a, b, LogicalOperands.AND, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    RESULT = new Logical(a, b, LogicalOperands.XOR, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= INTEGER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new Primitive(Types.INTEGER,Integer.parseInt(a),  aleft, aright );   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= DECIMAL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new Primitive(Types.DOUBLE,new Double(a),  aleft, aright );   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= STRING 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new Primitive( Types.STRING,a, aleft, aright );   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= CHAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new Primitive(Types.CHARACTER, a.charAt(0), aleft, aright );   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= RW_TRUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new Primitive(Types.BOOLEAN, true, aleft, aright );   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= RW_FALSE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new Primitive(Types.BOOLEAN, false, aleft, aright );   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new SymbolAccess(a, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
