
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package edu.robertob.olc1.vj24.Analysis;

import edu.robertob.olc1.vj24.Engine.Expressions.*;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import edu.robertob.olc1.vj24.Engine.Base.Instruction;
import edu.robertob.olc1.vj24.Engine.Structs.Types;
import edu.robertob.olc1.vj24.Engine.Structs.JCError;
import edu.robertob.olc1.vj24.Engine.Statements.Print;
import edu.robertob.olc1.vj24.Engine.Statements.Declaration;
import edu.robertob.olc1.vj24.Engine.Statements.SymbolAssignation;
import edu.robertob.olc1.vj24.Engine.Statements.IfStatement;
import edu.robertob.olc1.vj24.Engine.Statements.WhileStatement;
import edu.robertob.olc1.vj24.Engine.Statements.DoWhileStatement;
import edu.robertob.olc1.vj24.Engine.Statements.Break;
import edu.robertob.olc1.vj24.Engine.Statements.Continue;
import edu.robertob.olc1.vj24.Engine.Structs.ComparisonOperands;
import edu.robertob.olc1.vj24.Engine.Structs.LogicalOperands;
import edu.robertob.olc1.vj24.Engine.Structs.ArithmeticOperands;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\004\000\002\017" +
    "\004\000\002\020\004\000\002\005\007\000\002\006\011" +
    "\000\002\006\007\000\002\006\007\000\002\006\011\000" +
    "\002\021\005\000\002\007\006\000\002\010\011\000\002" +
    "\010\015\000\002\011\011\000\002\012\012\000\002\015" +
    "\006\000\002\016\006\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\014\006\000\002\014\004\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\004\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\026\003\025\006\010\036\021\042\013\050" +
    "\022\051\024\052\005\053\017\054\007\055\016\001\002" +
    "\000\032\002\ufff4\003\ufff4\006\ufff4\017\ufff4\036\ufff4\042" +
    "\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4" +
    "\001\002\000\004\034\200\001\002\000\032\002\ufff8\003" +
    "\ufff8\006\ufff8\017\ufff8\036\ufff8\042\ufff8\050\ufff8\051\ufff8" +
    "\052\ufff8\053\ufff8\054\ufff8\055\ufff8\001\002\000\004\012" +
    "\177\001\002\000\010\013\167\014\170\015\166\001\002" +
    "\000\032\002\ufff7\003\ufff7\006\ufff7\017\ufff7\036\ufff7\042" +
    "\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7" +
    "\001\002\000\030\002\000\003\025\006\010\036\021\042" +
    "\013\050\022\051\024\052\005\053\017\054\007\055\016" +
    "\001\002\000\004\034\154\001\002\000\032\002\ufff6\003" +
    "\ufff6\006\ufff6\017\ufff6\036\ufff6\042\ufff6\050\ufff6\051\ufff6" +
    "\052\ufff6\053\ufff6\054\ufff6\055\ufff6\001\002\000\032\002" +
    "\ufffa\003\ufffa\006\ufffa\017\ufffa\036\ufffa\042\ufffa\050\ufffa" +
    "\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\001\002\000" +
    "\004\016\144\001\002\000\004\012\143\001\002\000\032" +
    "\002\ufff5\003\ufff5\006\ufff5\017\ufff5\036\ufff5\042\ufff5\050" +
    "\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\001\002" +
    "\000\004\034\137\001\002\000\004\006\130\001\002\000" +
    "\032\002\ufff9\003\ufff9\006\ufff9\017\ufff9\036\ufff9\042\ufff9" +
    "\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\001" +
    "\002\000\004\006\035\001\002\000\004\012\034\001\002" +
    "\000\032\002\ufffc\003\ufffc\006\ufffc\017\ufffc\036\ufffc\042" +
    "\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc" +
    "\001\002\000\004\002\033\001\002\000\032\002\ufffb\003" +
    "\ufffb\006\ufffb\017\ufffb\036\ufffb\042\ufffb\050\ufffb\051\ufffb" +
    "\052\ufffb\053\ufffb\054\ufffb\055\ufffb\001\002\000\032\002" +
    "\ufffe\003\ufffe\006\ufffe\017\ufffe\036\ufffe\042\ufffe\050\ufffe" +
    "\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\001\002\000" +
    "\032\002\ufffd\003\ufffd\006\ufffd\017\ufffd\036\ufffd\042\ufffd" +
    "\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\001" +
    "\002\000\004\002\001\001\002\000\032\002\ufff3\003\ufff3" +
    "\006\ufff3\017\ufff3\036\ufff3\042\ufff3\050\ufff3\051\ufff3\052" +
    "\ufff3\053\ufff3\054\ufff3\055\ufff3\001\002\000\004\025\036" +
    "\001\002\000\014\037\040\040\043\041\041\045\044\046" +
    "\037\001\002\000\010\012\uffdf\015\uffdf\035\uffdf\001\002" +
    "\000\010\012\uffe3\015\uffe3\035\uffe3\001\002\000\010\012" +
    "\uffe1\015\uffe1\035\uffe1\001\002\000\006\012\046\015\045" +
    "\001\002\000\010\012\uffe2\015\uffe2\035\uffe2\001\002\000" +
    "\010\012\uffe0\015\uffe0\035\uffe0\001\002\000\026\005\055" +
    "\006\057\007\052\010\050\011\061\014\047\024\056\034" +
    "\053\043\054\044\051\001\002\000\032\002\uffed\003\uffed" +
    "\006\uffed\017\uffed\036\uffed\042\uffed\050\uffed\051\uffed\052" +
    "\uffed\053\uffed\054\uffed\055\uffed\001\002\000\026\005\055" +
    "\006\057\007\052\010\050\011\061\014\047\024\056\034" +
    "\053\043\054\044\051\001\002\000\044\012\uffcb\013\uffcb" +
    "\014\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\035\uffcb\056\uffcb" +
    "\057\uffcb\060\uffcb\001\002\000\044\012\uffc7\013\uffc7\014" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\026\uffc7\027\uffc7" +
    "\030\uffc7\031\uffc7\032\uffc7\033\uffc7\035\uffc7\056\uffc7\057" +
    "\uffc7\060\uffc7\001\002\000\044\012\uffcc\013\uffcc\014\uffcc" +
    "\020\uffcc\021\uffcc\022\uffcc\023\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\035\uffcc\056\uffcc\057\uffcc" +
    "\060\uffcc\001\002\000\040\005\055\006\057\007\052\010" +
    "\050\011\061\014\047\024\056\034\053\037\040\040\043" +
    "\041\041\043\054\044\051\045\044\046\037\001\002\000" +
    "\044\012\uffc8\013\uffc8\014\uffc8\020\uffc8\021\uffc8\022\uffc8" +
    "\023\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033" +
    "\uffc8\035\uffc8\056\uffc8\057\uffc8\060\uffc8\001\002\000\044" +
    "\012\uffca\013\uffca\014\uffca\020\uffca\021\uffca\022\uffca\023" +
    "\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca" +
    "\035\uffca\056\uffca\057\uffca\060\uffca\001\002\000\026\005" +
    "\055\006\057\007\052\010\050\011\061\014\047\024\056" +
    "\034\053\043\054\044\051\001\002\000\044\012\uffc6\013" +
    "\uffc6\014\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\026\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\035\uffc6\056" +
    "\uffc6\057\uffc6\060\uffc6\001\002\000\042\012\066\013\071" +
    "\014\062\020\072\021\065\022\077\023\073\026\075\027" +
    "\076\030\070\031\067\032\100\033\074\056\101\057\063" +
    "\060\064\001\002\000\044\012\uffc9\013\uffc9\014\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\026\uffc9\027\uffc9\030\uffc9" +
    "\031\uffc9\032\uffc9\033\uffc9\035\uffc9\056\uffc9\057\uffc9\060" +
    "\uffc9\001\002\000\026\005\055\006\057\007\052\010\050" +
    "\011\061\014\047\024\056\034\053\043\054\044\051\001" +
    "\002\000\026\005\055\006\057\007\052\010\050\011\061" +
    "\014\047\024\056\034\053\043\054\044\051\001\002\000" +
    "\026\005\055\006\057\007\052\010\050\011\061\014\047" +
    "\024\056\034\053\043\054\044\051\001\002\000\026\005" +
    "\055\006\057\007\052\010\050\011\061\014\047\024\056" +
    "\034\053\043\054\044\051\001\002\000\032\002\uffec\003" +
    "\uffec\006\uffec\017\uffec\036\uffec\042\uffec\050\uffec\051\uffec" +
    "\052\uffec\053\uffec\054\uffec\055\uffec\001\002\000\026\005" +
    "\055\006\057\007\052\010\050\011\061\014\047\024\056" +
    "\034\053\043\054\044\051\001\002\000\026\005\055\006" +
    "\057\007\052\010\050\011\061\014\047\024\056\034\053" +
    "\043\054\044\051\001\002\000\026\005\055\006\057\007" +
    "\052\010\050\011\061\014\047\024\056\034\053\043\054" +
    "\044\051\001\002\000\026\005\055\006\057\007\052\010" +
    "\050\011\061\014\047\024\056\034\053\043\054\044\051" +
    "\001\002\000\026\005\055\006\057\007\052\010\050\011" +
    "\061\014\047\024\056\034\053\043\054\044\051\001\002" +
    "\000\026\005\055\006\057\007\052\010\050\011\061\014" +
    "\047\024\056\034\053\043\054\044\051\001\002\000\026" +
    "\005\055\006\057\007\052\010\050\011\061\014\047\024" +
    "\056\034\053\043\054\044\051\001\002\000\026\005\055" +
    "\006\057\007\052\010\050\011\061\014\047\024\056\034" +
    "\053\043\054\044\051\001\002\000\026\005\055\006\057" +
    "\007\052\010\050\011\061\014\047\024\056\034\053\043" +
    "\054\044\051\001\002\000\026\005\055\006\057\007\052" +
    "\010\050\011\061\014\047\024\056\034\053\043\054\044" +
    "\051\001\002\000\026\005\055\006\057\007\052\010\050" +
    "\011\061\014\047\024\056\034\053\043\054\044\051\001" +
    "\002\000\044\012\uffcf\013\071\014\062\020\072\021\065" +
    "\022\077\023\073\026\075\027\076\030\070\031\067\032" +
    "\100\033\074\035\uffcf\056\uffcf\057\063\060\064\001\002" +
    "\000\044\012\uffd1\013\071\014\062\020\072\021\065\022" +
    "\077\023\073\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\035\uffd1\056\uffd1\057\uffd1\060\uffd1\001\002\000" +
    "\044\012\uffd9\013\uffd9\014\uffd9\020\uffd9\021\uffd9\022\uffd9" +
    "\023\073\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\035\uffd9\056\uffd9\057\uffd9\060\uffd9\001\002\000\044" +
    "\012\uffd4\013\071\014\062\020\072\021\065\022\077\023" +
    "\073\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4" +
    "\035\uffd4\056\uffd4\057\uffd4\060\uffd4\001\002\000\044\012" +
    "\uffd6\013\071\014\062\020\072\021\065\022\077\023\073" +
    "\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\035" +
    "\uffd6\056\uffd6\057\uffd6\060\uffd6\001\002\000\044\012\uffd5" +
    "\013\071\014\062\020\072\021\065\022\077\023\073\026" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\035\uffd5" +
    "\056\uffd5\057\uffd5\060\uffd5\001\002\000\042\012\uffda\013" +
    "\uffda\014\uffda\020\uffda\021\uffda\022\uffda\026\uffda\027\uffda" +
    "\030\uffda\031\uffda\032\uffda\033\uffda\035\uffda\056\uffda\057" +
    "\uffda\060\uffda\001\002\000\044\012\uffdc\013\uffdc\014\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\023\073\026\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\035\uffdc\056\uffdc\057\uffdc" +
    "\060\uffdc\001\002\000\044\012\uffd7\013\uffd7\014\uffd7\020" +
    "\072\021\065\022\077\023\073\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\035\uffd7\056\uffd7\057\uffd7\060" +
    "\uffd7\001\002\000\044\012\uffd2\013\071\014\062\020\072" +
    "\021\065\022\077\023\073\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\035\uffd2\056\uffd2\057\uffd2\060\uffd2" +
    "\001\002\000\044\012\uffd3\013\071\014\062\020\072\021" +
    "\065\022\077\023\073\026\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\035\uffd3\056\uffd3\057\uffd3\060\uffd3\001" +
    "\002\000\044\012\uffdb\013\uffdb\014\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\023\073\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\035\uffdb\056\uffdb\057\uffdb\060\uffdb\001\002" +
    "\000\044\012\uffcd\013\071\014\062\020\072\021\065\022" +
    "\077\023\073\026\075\027\076\030\070\031\067\032\100" +
    "\033\074\035\uffcd\056\uffcd\057\uffcd\060\uffcd\001\002\000" +
    "\044\012\uffce\013\071\014\062\020\072\021\065\022\077" +
    "\023\073\026\075\027\076\030\070\031\067\032\100\033" +
    "\074\035\uffce\056\uffce\057\uffce\060\064\001\002\000\044" +
    "\012\uffd8\013\uffd8\014\uffd8\020\072\021\065\022\077\023" +
    "\073\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\035\uffd8\056\uffd8\057\uffd8\060\uffd8\001\002\000\044\012" +
    "\uffd0\013\071\014\062\020\072\021\065\022\077\023\073" +
    "\026\075\027\076\030\070\031\067\032\100\033\074\035" +
    "\uffd0\056\uffd0\057\uffd0\060\uffd0\001\002\000\004\035\125" +
    "\001\002\000\042\013\071\014\062\020\072\021\065\022" +
    "\077\023\073\026\075\027\076\030\070\031\067\032\100" +
    "\033\074\035\124\056\101\057\063\060\064\001\002\000" +
    "\044\012\uffc5\013\uffc5\014\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\035\uffc5\056\uffc5\057\uffc5\060\uffc5\001\002\000\026" +
    "\005\055\006\057\007\052\010\050\011\061\014\047\024" +
    "\056\034\053\043\054\044\051\001\002\000\044\012\uffde" +
    "\013\071\014\062\020\072\021\065\022\077\023\073\026" +
    "\075\027\076\030\070\031\067\032\100\033\074\035\uffde" +
    "\056\101\057\063\060\064\001\002\000\044\012\uffdd\013" +
    "\uffdd\014\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\035\uffdd\056" +
    "\uffdd\057\uffdd\060\uffdd\001\002\000\004\025\131\001\002" +
    "\000\014\037\040\040\043\041\041\045\044\046\037\001" +
    "\002\000\006\012\134\015\133\001\002\000\026\005\055" +
    "\006\057\007\052\010\050\011\061\014\047\024\056\034" +
    "\053\043\054\044\051\001\002\000\032\002\uffee\003\uffee" +
    "\006\uffee\017\uffee\036\uffee\042\uffee\050\uffee\051\uffee\052" +
    "\uffee\053\uffee\054\uffee\055\uffee\001\002\000\042\012\136" +
    "\013\071\014\062\020\072\021\065\022\077\023\073\026" +
    "\075\027\076\030\070\031\067\032\100\033\074\056\101" +
    "\057\063\060\064\001\002\000\032\002\uffef\003\uffef\006" +
    "\uffef\017\uffef\036\uffef\042\uffef\050\uffef\051\uffef\052\uffef" +
    "\053\uffef\054\uffef\055\uffef\001\002\000\026\005\055\006" +
    "\057\007\052\010\050\011\061\014\047\024\056\034\053" +
    "\043\054\044\051\001\002\000\042\013\071\014\062\020" +
    "\072\021\065\022\077\023\073\026\075\027\076\030\070" +
    "\031\067\032\100\033\074\035\141\056\101\057\063\060" +
    "\064\001\002\000\004\012\142\001\002\000\032\002\ufff0" +
    "\003\ufff0\006\ufff0\017\ufff0\036\ufff0\042\ufff0\050\ufff0\051" +
    "\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\001\002\000\032" +
    "\002\ufff2\003\ufff2\006\ufff2\017\ufff2\036\ufff2\042\ufff2\050" +
    "\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\001\002" +
    "\000\026\003\025\006\010\036\021\042\013\050\022\051" +
    "\024\052\005\053\017\054\007\055\016\001\002\000\030" +
    "\003\025\006\010\017\146\036\021\042\013\050\022\051" +
    "\024\052\005\053\017\054\007\055\016\001\002\000\004" +
    "\052\150\001\002\000\032\002\uffff\003\uffff\006\uffff\017" +
    "\uffff\036\uffff\042\uffff\050\uffff\051\uffff\052\uffff\053\uffff" +
    "\054\uffff\055\uffff\001\002\000\004\034\151\001\002\000" +
    "\026\005\055\006\057\007\052\010\050\011\061\014\047" +
    "\024\056\034\053\043\054\044\051\001\002\000\042\013" +
    "\071\014\062\020\072\021\065\022\077\023\073\026\075" +
    "\027\076\030\070\031\067\032\100\033\074\035\153\056" +
    "\101\057\063\060\064\001\002\000\032\002\uffe6\003\uffe6" +
    "\006\uffe6\017\uffe6\036\uffe6\042\uffe6\050\uffe6\051\uffe6\052" +
    "\uffe6\053\uffe6\054\uffe6\055\uffe6\001\002\000\026\005\055" +
    "\006\057\007\052\010\050\011\061\014\047\024\056\034" +
    "\053\043\054\044\051\001\002\000\042\013\071\014\062" +
    "\020\072\021\065\022\077\023\073\026\075\027\076\030" +
    "\070\031\067\032\100\033\074\035\156\056\101\057\063" +
    "\060\064\001\002\000\004\016\157\001\002\000\026\003" +
    "\025\006\010\036\021\042\013\050\022\051\024\052\005" +
    "\053\017\054\007\055\016\001\002\000\030\003\025\006" +
    "\010\017\161\036\021\042\013\050\022\051\024\052\005" +
    "\053\017\054\007\055\016\001\002\000\034\002\uffe9\003" +
    "\uffe9\006\uffe9\017\uffe9\036\uffe9\042\uffe9\047\162\050\uffe9" +
    "\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\001\002\000" +
    "\004\016\163\001\002\000\026\003\025\006\010\036\021" +
    "\042\013\050\022\051\024\052\005\053\017\054\007\055" +
    "\016\001\002\000\030\003\025\006\010\017\165\036\021" +
    "\042\013\050\022\051\024\052\005\053\017\054\007\055" +
    "\016\001\002\000\032\002\uffe8\003\uffe8\006\uffe8\017\uffe8" +
    "\036\uffe8\042\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054" +
    "\uffe8\055\uffe8\001\002\000\026\005\055\006\057\007\052" +
    "\010\050\011\061\014\047\024\056\034\053\043\054\044" +
    "\051\001\002\000\004\013\173\001\002\000\004\014\171" +
    "\001\002\000\004\012\172\001\002\000\032\002\uffe4\003" +
    "\uffe4\006\uffe4\017\uffe4\036\uffe4\042\uffe4\050\uffe4\051\uffe4" +
    "\052\uffe4\053\uffe4\054\uffe4\055\uffe4\001\002\000\004\012" +
    "\174\001\002\000\032\002\uffe5\003\uffe5\006\uffe5\017\uffe5" +
    "\036\uffe5\042\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054" +
    "\uffe5\055\uffe5\001\002\000\042\012\176\013\071\014\062" +
    "\020\072\021\065\022\077\023\073\026\075\027\076\030" +
    "\070\031\067\032\100\033\074\056\101\057\063\060\064" +
    "\001\002\000\032\002\uffea\003\uffea\006\uffea\017\uffea\036" +
    "\uffea\042\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea" +
    "\055\uffea\001\002\000\032\002\ufff1\003\ufff1\006\ufff1\017" +
    "\ufff1\036\ufff1\042\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1" +
    "\054\ufff1\055\ufff1\001\002\000\026\005\055\006\057\007" +
    "\052\010\050\011\061\014\047\024\056\034\053\043\054" +
    "\044\051\001\002\000\042\013\071\014\062\020\072\021" +
    "\065\022\077\023\073\026\075\027\076\030\070\031\067" +
    "\032\100\033\074\035\202\056\101\057\063\060\064\001" +
    "\002\000\004\016\203\001\002\000\026\003\025\006\010" +
    "\036\021\042\013\050\022\051\024\052\005\053\017\054" +
    "\007\055\016\001\002\000\030\003\025\006\010\017\205" +
    "\036\021\042\013\050\022\051\024\052\005\053\017\054" +
    "\007\055\016\001\002\000\032\002\uffe7\003\uffe7\006\uffe7" +
    "\017\uffe7\036\uffe7\042\uffe7\050\uffe7\051\uffe7\052\uffe7\053" +
    "\uffe7\054\uffe7\055\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\034\002\026\003\011\004\030\005\031\006" +
    "\025\007\027\010\014\011\010\012\013\015\022\016\005" +
    "\017\017\020\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\146\005\031\006\025\007" +
    "\027\010\014\011\010\012\013\015\022\016\005\017\017" +
    "\020\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\057\001\001\000" +
    "\002\001\001\000\004\014\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\121\014" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\117\001\001\000\004\014\116" +
    "\001\001\000\004\014\115\001\001\000\004\014\114\001" +
    "\001\000\002\001\001\000\004\014\113\001\001\000\004" +
    "\014\112\001\001\000\004\014\111\001\001\000\004\014" +
    "\110\001\001\000\004\014\107\001\001\000\004\014\106" +
    "\001\001\000\004\014\105\001\001\000\004\014\104\001" +
    "\001\000\004\014\103\001\001\000\004\014\102\001\001" +
    "\000\004\014\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\131" +
    "\001\001\000\002\001\001\000\004\014\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\144\004\030" +
    "\005\031\006\025\007\027\010\014\011\010\012\013\015" +
    "\022\016\005\017\017\020\003\001\001\000\030\004\146" +
    "\005\031\006\025\007\027\010\014\011\010\012\013\015" +
    "\022\016\005\017\017\020\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\157\004\030\005\031\006\025\007\027\010\014\011\010" +
    "\012\013\015\022\016\005\017\017\020\003\001\001\000" +
    "\030\004\146\005\031\006\025\007\027\010\014\011\010" +
    "\012\013\015\022\016\005\017\017\020\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\163\004\030" +
    "\005\031\006\025\007\027\010\014\011\010\012\013\015" +
    "\022\016\005\017\017\020\003\001\001\000\030\004\146" +
    "\005\031\006\025\007\027\010\014\011\010\012\013\015" +
    "\022\016\005\017\017\020\003\001\001\000\002\001\001" +
    "\000\004\014\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\203\004\030\005\031\006" +
    "\025\007\027\010\014\011\010\012\013\015\022\016\005" +
    "\017\017\020\003\001\001\000\030\004\146\005\031\006" +
    "\025\007\027\010\014\011\010\012\013\015\022\016\005" +
    "\017\017\020\003\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    JCLexer s;
    Parser(JCLexer s){this.s = s;}

//    public LinkedList<Errores> listaErrores = new LinkedList<>();
    private LinkedList<JCError> errorList = new LinkedList<>();
    public LinkedList<JCError> getSyntaxErrorList(){
        return errorList;
    }

    public void syntax_error(Symbol s){
        errorList.add(new JCError("Sintaxis", "Error en la instruccion, componente: "+s.value, s.left, s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        errorList.add(new JCError("Sintaxis - FATAL", "Error en la instruccion, componente: "+s.value, s.left, s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> start_val = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= STATEMENTS 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // STATEMENTS ::= STATEMENTS STATEMENT 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STATEMENTS ::= STATEMENT 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STATEMENT ::= IMPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT=a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STATEMENT ::= DECLARATION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT=a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATEMENT ::= ASSIGNATION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT=a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENT ::= IF_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT=a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENT ::= INCREMENT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT=a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEMENT ::= DECREMENT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT=a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STATEMENT ::= WHILE_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT=a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STATEMENT ::= DO_WHILE_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT=a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STATEMENT ::= BREAK 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT=a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STATEMENT ::= CONTINUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT=a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STATEMENT ::= error ENDLINE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   System.out.println(e);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BREAK ::= RW_BREAK ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new Break(aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BREAK",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTINUE ::= RW_CONTINUE ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new Continue(aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IMPRESION ::= RW_PRINT OPENPAR EXPRESION CLOSEPAR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		   RESULT = new Print(a, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARATION ::= RW_CONST ID COLON TYPES EQUALS EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Types b = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new Declaration(a, b, c, true, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARATION ::= RW_CONST ID COLON TYPES ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types b = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new Declaration(a, b, null, true,aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARATION ::= RW_VAR ID COLON TYPES ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types b = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new Declaration(a, b, null, false, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARATION ::= RW_VAR ID COLON TYPES EQUALS EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Types b = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new Declaration(a, b, c, false, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TYPE_CAST_OPERATOR ::= OPENPAR TYPES CLOSEPAR 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = type;  System.out.println("Type cast operator: "+type); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE_CAST_OPERATOR",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASSIGNATION ::= ID EQUALS EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT=new SymbolAssignation(a, b, aleft, aright);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IF_STMT ::= RW_IF OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new IfStatement(a, b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_STMT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IF_STMT ::= RW_IF OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE RW_ELSE OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new IfStatement(a, b, c, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_STMT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // WHILE_STMT ::= RW_WHILE OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new WhileStatement(a, b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE_STMT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DO_WHILE_STMT ::= RW_DO OPENBRACE STATEMENTS CLOSEBRACE RW_WHILE OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new DoWhileStatement(b, a, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DO_WHILE_STMT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INCREMENT ::= ID PLUS PLUS ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		   RESULT = new SymbolAssignation(a, new Arithmetic(new SymbolAccess(a, aleft, aright),new Primitive(Types.INTEGER, 1, aleft, aright),ArithmeticOperands.SUM, aleft, aright), aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECREMENT ::= ID MINUS MINUS ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		   RESULT = new SymbolAssignation(a, new Arithmetic(new SymbolAccess(a, aleft, aright), new Primitive(Types.INTEGER, 1, aleft, aright), ArithmeticOperands.SUB, aleft, aright), aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECREMENT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TYPES ::= RW_INT 
            {
              Types RESULT =null;
		   RESULT=Types.INTEGER;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPES",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TYPES ::= RW_DOUBLE 
            {
              Types RESULT =null;
		   RESULT=Types.DOUBLE;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPES",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TYPES ::= RW_STRING 
            {
              Types RESULT =null;
		   RESULT=Types.STRING;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPES",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TYPES ::= RW_BOOL 
            {
              Types RESULT =null;
		   RESULT=Types.BOOLEAN;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPES",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TYPES ::= RW_CHAR 
            {
              Types RESULT =null;
		   RESULT=Types.CHARACTER;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPES",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= OPENPAR TYPES CLOSEPAR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Types a = (Types)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new TypeCast(b, a, aleft, aright);
              System.out.println("Type cast: "+a+" "+b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= MINUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, ArithmeticOperands.NEG, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= EXPRESION ASTERISK EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.MUL, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESION SLASH EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.DIV, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= EXPRESION DOUBLEASTERISK EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.POW, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.MOD, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION MINUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.SUB, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION PLUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.SUM, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION DOUBLEEQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.EQUALS, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESION NOT_EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.NOT_EQUALS, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= EXPRESION LESS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.LESS_THAN, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION LESSEQUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.LESS_THAN_OR_EQUALS, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION GREATER EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.GREATER_THAN, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= EXPRESION GREATEREQUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.GREATER_THAN_OR_EQUALS, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= NEGATION EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    RESULT = new Logical(a, LogicalOperands.NOT, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    RESULT = new Logical(a, b, LogicalOperands.OR, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    RESULT = new Logical(a, b, LogicalOperands.AND, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    RESULT = new Logical(a, b, LogicalOperands.XOR, aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= INTEGER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new Primitive(Types.INTEGER,Integer.parseInt(a),  aleft, aright );   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= DECIMAL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new Primitive(Types.DOUBLE,new Double(a),  aleft, aright );   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= STRING 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new Primitive( Types.STRING,a, aleft, aright );   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= CHAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new Primitive(Types.CHARACTER, a.charAt(0), aleft, aright );   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= RW_TRUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new Primitive(Types.BOOLEAN, true, aleft, aright );   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= RW_FALSE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new Primitive(Types.BOOLEAN, false, aleft, aright );   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = new SymbolAccess(a, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = a;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
