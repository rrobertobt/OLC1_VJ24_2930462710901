
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package edu.robertob.olc1.vj24.Analysis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import edu.robertob.olc1.vj24.Engine.Base.Instruction;
import edu.robertob.olc1.vj24.Engine.Structs.Types;
import edu.robertob.olc1.vj24.Engine.Structs.JCError;
import edu.robertob.olc1.vj24.Engine.Statements.Print;
import edu.robertob.olc1.vj24.Engine.Statements.Declaration;
import edu.robertob.olc1.vj24.Engine.Statements.SymbolAssignation;
import edu.robertob.olc1.vj24.Engine.Expressions.SymbolAccess;
import edu.robertob.olc1.vj24.Engine.Statements.StartWithInvoke;
import edu.robertob.olc1.vj24.Engine.Statements.MethodDeclaration;
import edu.robertob.olc1.vj24.Engine.Expressions.Primitive;
import edu.robertob.olc1.vj24.Engine.Statements.IfStatement;
import edu.robertob.olc1.vj24.Engine.Statements.WhileStatement;
import edu.robertob.olc1.vj24.Engine.Statements.DoWhileStatement;
import edu.robertob.olc1.vj24.Engine.Statements.ForStatement;
import edu.robertob.olc1.vj24.Engine.Statements.Break;
import edu.robertob.olc1.vj24.Engine.Statements.Continue;
import edu.robertob.olc1.vj24.Engine.Expressions.TypeCast;
import edu.robertob.olc1.vj24.Engine.Expressions.Arithmetic;
import edu.robertob.olc1.vj24.Engine.Expressions.Comparison;
import edu.robertob.olc1.vj24.Engine.Structs.ComparisonOperands;
import edu.robertob.olc1.vj24.Engine.Expressions.Logical;
import edu.robertob.olc1.vj24.Engine.Structs.LogicalOperands;
import edu.robertob.olc1.vj24.Engine.Structs.ArithmeticOperands;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JCParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public JCParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JCParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JCParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\004\000\002\030\007" +
    "\000\002\021\004\000\002\022\004\000\002\005\007\000" +
    "\002\006\011\000\002\006\007\000\002\006\007\000\002" +
    "\006\011\000\002\031\011\000\002\025\005\000\002\007" +
    "\006\000\002\010\011\000\002\010\012\000\002\010\016" +
    "\000\002\026\012\000\002\027\004\000\002\027\003\000" +
    "\002\011\011\000\002\012\012\000\002\012\013\000\002" +
    "\013\014\000\002\014\005\000\002\014\003\000\002\014" +
    "\003\000\002\023\005\000\002\024\005\000\002\017\006" +
    "\000\002\020\006\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\016\006\000\002\016\004\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\004\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\046\003\035\006\015\036\031\037\046\040" +
    "\036\041\042\042\020\045\033\046\005\050\040\051\032" +
    "\052\034\053\007\054\024\055\014\056\023\057\025\060" +
    "\027\001\002\000\004\006\260\001\002\000\012\006\uffcf" +
    "\012\uffcf\015\uffcf\035\uffcf\001\002\000\052\002\ufff3\003" +
    "\ufff3\006\ufff3\017\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3" +
    "\042\ufff3\045\ufff3\046\ufff3\050\ufff3\051\ufff3\052\ufff3\053" +
    "\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\001\002" +
    "\000\004\034\252\001\002\000\052\002\ufff6\003\ufff6\006" +
    "\ufff6\017\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6" +
    "\045\ufff6\046\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054" +
    "\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\001\002\000\052" +
    "\002\ufff8\003\ufff8\006\ufff8\017\ufff8\036\ufff8\037\ufff8\040" +
    "\ufff8\041\ufff8\042\ufff8\045\ufff8\046\ufff8\050\ufff8\051\ufff8" +
    "\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060" +
    "\ufff8\001\002\000\052\002\ufff1\003\ufff1\006\ufff1\017\ufff1" +
    "\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\045\ufff1\046" +
    "\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1" +
    "\056\ufff1\057\ufff1\060\ufff1\001\002\000\052\002\ufff2\003" +
    "\ufff2\006\ufff2\017\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2" +
    "\042\ufff2\045\ufff2\046\ufff2\050\ufff2\051\ufff2\052\ufff2\053" +
    "\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\001\002" +
    "\000\004\012\251\001\002\000\010\013\243\014\244\015" +
    "\202\001\002\000\052\002\ufff7\003\ufff7\006\ufff7\017\ufff7" +
    "\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\045\ufff7\046" +
    "\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7" +
    "\056\ufff7\057\ufff7\060\ufff7\001\002\000\050\002\000\003" +
    "\035\006\015\036\031\037\046\040\036\041\042\042\020" +
    "\045\033\046\005\050\040\051\032\052\034\053\007\054" +
    "\024\055\014\056\023\057\025\060\027\001\002\000\004" +
    "\034\216\001\002\000\052\002\ufff5\003\ufff5\006\ufff5\017" +
    "\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\045\ufff5" +
    "\046\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055" +
    "\ufff5\056\ufff5\057\ufff5\060\ufff5\001\002\000\052\002\ufffa" +
    "\003\ufffa\006\ufffa\017\ufffa\036\ufffa\037\ufffa\040\ufffa\041" +
    "\ufffa\042\ufffa\045\ufffa\046\ufffa\050\ufffa\051\ufffa\052\ufffa" +
    "\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\001" +
    "\002\000\004\016\206\001\002\000\004\012\205\001\002" +
    "\000\004\034\156\001\002\000\052\002\ufff4\003\ufff4\006" +
    "\ufff4\017\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4" +
    "\045\ufff4\046\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054" +
    "\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\001\002\000\004" +
    "\006\152\001\002\000\052\002\ufff9\003\ufff9\006\ufff9\017" +
    "\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\045\ufff9" +
    "\046\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055" +
    "\ufff9\056\ufff9\057\ufff9\060\ufff9\001\002\000\004\034\146" +
    "\001\002\000\004\006\137\001\002\000\012\006\uffd0\012" +
    "\uffd0\015\uffd0\035\uffd0\001\002\000\004\006\051\001\002" +
    "\000\004\012\050\001\002\000\012\006\uffd2\012\uffd2\015" +
    "\uffd2\035\uffd2\001\002\000\052\002\ufffc\003\ufffc\006\ufffc" +
    "\017\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\045" +
    "\ufffc\046\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc" +
    "\055\ufffc\056\ufffc\057\ufffc\060\ufffc\001\002\000\012\006" +
    "\uffce\012\uffce\015\uffce\035\uffce\001\002\000\004\002\047" +
    "\001\002\000\012\006\uffd1\012\uffd1\015\uffd1\035\uffd1\001" +
    "\002\000\052\002\ufffb\003\ufffb\006\ufffb\017\ufffb\036\ufffb" +
    "\037\ufffb\040\ufffb\041\ufffb\042\ufffb\045\ufffb\046\ufffb\050" +
    "\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb" +
    "\057\ufffb\060\ufffb\001\002\000\052\002\ufffe\003\ufffe\006" +
    "\ufffe\017\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe" +
    "\045\ufffe\046\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054" +
    "\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\001\002\000\052" +
    "\002\ufffd\003\ufffd\006\ufffd\017\ufffd\036\ufffd\037\ufffd\040" +
    "\ufffd\041\ufffd\042\ufffd\045\ufffd\046\ufffd\050\ufffd\051\ufffd" +
    "\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060" +
    "\ufffd\001\002\000\012\006\uffd3\012\uffd3\015\uffd3\035\uffd3" +
    "\001\002\000\004\002\001\001\002\000\052\002\ufff0\003" +
    "\ufff0\006\ufff0\017\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0" +
    "\042\ufff0\045\ufff0\046\ufff0\050\ufff0\051\ufff0\052\ufff0\053" +
    "\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\001\002" +
    "\000\004\025\052\001\002\000\016\037\046\040\036\041" +
    "\042\045\033\046\005\050\040\001\002\000\006\012\055" +
    "\015\054\001\002\000\026\005\064\006\066\007\061\010" +
    "\057\011\070\014\056\024\065\034\062\043\063\044\060" +
    "\001\002\000\052\002\uffe9\003\uffe9\006\uffe9\017\uffe9\036" +
    "\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\045\uffe9\046\uffe9" +
    "\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056" +
    "\uffe9\057\uffe9\060\uffe9\001\002\000\026\005\064\006\066" +
    "\007\061\010\057\011\070\014\056\024\065\034\062\043" +
    "\063\044\060\001\002\000\044\012\uffba\013\uffba\014\uffba" +
    "\020\uffba\021\uffba\022\uffba\023\uffba\026\uffba\027\uffba\030" +
    "\uffba\031\uffba\032\uffba\033\uffba\035\uffba\061\uffba\062\uffba" +
    "\063\uffba\001\002\000\044\012\uffb6\013\uffb6\014\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\026\uffb6\027\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\035\uffb6\061\uffb6\062\uffb6\063" +
    "\uffb6\001\002\000\044\012\uffbb\013\uffbb\014\uffbb\020\uffbb" +
    "\021\uffbb\022\uffbb\023\uffbb\026\uffbb\027\uffbb\030\uffbb\031" +
    "\uffbb\032\uffbb\033\uffbb\035\uffbb\061\uffbb\062\uffbb\063\uffbb" +
    "\001\002\000\042\005\064\006\066\007\061\010\057\011" +
    "\070\014\056\024\065\034\062\037\046\040\036\041\042" +
    "\043\063\044\060\045\033\046\005\050\040\001\002\000" +
    "\044\012\uffb7\013\uffb7\014\uffb7\020\uffb7\021\uffb7\022\uffb7" +
    "\023\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033" +
    "\uffb7\035\uffb7\061\uffb7\062\uffb7\063\uffb7\001\002\000\044" +
    "\012\uffb9\013\uffb9\014\uffb9\020\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9" +
    "\035\uffb9\061\uffb9\062\uffb9\063\uffb9\001\002\000\026\005" +
    "\064\006\066\007\061\010\057\011\070\014\056\024\065" +
    "\034\062\043\063\044\060\001\002\000\044\012\uffb5\013" +
    "\uffb5\014\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\026\uffb5" +
    "\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\035\uffb5\061" +
    "\uffb5\062\uffb5\063\uffb5\001\002\000\042\012\075\013\100" +
    "\014\071\020\101\021\074\022\105\023\102\026\106\027" +
    "\104\030\076\031\077\032\107\033\103\061\110\062\072" +
    "\063\073\001\002\000\044\012\uffb8\013\uffb8\014\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\026\uffb8\027\uffb8\030\uffb8" +
    "\031\uffb8\032\uffb8\033\uffb8\035\uffb8\061\uffb8\062\uffb8\063" +
    "\uffb8\001\002\000\026\005\064\006\066\007\061\010\057" +
    "\011\070\014\056\024\065\034\062\043\063\044\060\001" +
    "\002\000\026\005\064\006\066\007\061\010\057\011\070" +
    "\014\056\024\065\034\062\043\063\044\060\001\002\000" +
    "\026\005\064\006\066\007\061\010\057\011\070\014\056" +
    "\024\065\034\062\043\063\044\060\001\002\000\026\005" +
    "\064\006\066\007\061\010\057\011\070\014\056\024\065" +
    "\034\062\043\063\044\060\001\002\000\052\002\uffe8\003" +
    "\uffe8\006\uffe8\017\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\045\uffe8\046\uffe8\050\uffe8\051\uffe8\052\uffe8\053" +
    "\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\001\002" +
    "\000\026\005\064\006\066\007\061\010\057\011\070\014" +
    "\056\024\065\034\062\043\063\044\060\001\002\000\026" +
    "\005\064\006\066\007\061\010\057\011\070\014\056\024" +
    "\065\034\062\043\063\044\060\001\002\000\026\005\064" +
    "\006\066\007\061\010\057\011\070\014\056\024\065\034" +
    "\062\043\063\044\060\001\002\000\026\005\064\006\066" +
    "\007\061\010\057\011\070\014\056\024\065\034\062\043" +
    "\063\044\060\001\002\000\026\005\064\006\066\007\061" +
    "\010\057\011\070\014\056\024\065\034\062\043\063\044" +
    "\060\001\002\000\026\005\064\006\066\007\061\010\057" +
    "\011\070\014\056\024\065\034\062\043\063\044\060\001" +
    "\002\000\026\005\064\006\066\007\061\010\057\011\070" +
    "\014\056\024\065\034\062\043\063\044\060\001\002\000" +
    "\026\005\064\006\066\007\061\010\057\011\070\014\056" +
    "\024\065\034\062\043\063\044\060\001\002\000\026\005" +
    "\064\006\066\007\061\010\057\011\070\014\056\024\065" +
    "\034\062\043\063\044\060\001\002\000\026\005\064\006" +
    "\066\007\061\010\057\011\070\014\056\024\065\034\062" +
    "\043\063\044\060\001\002\000\026\005\064\006\066\007" +
    "\061\010\057\011\070\014\056\024\065\034\062\043\063" +
    "\044\060\001\002\000\044\012\uffbe\013\100\014\071\020" +
    "\101\021\074\022\105\023\102\026\106\027\104\030\076" +
    "\031\077\032\107\033\103\035\uffbe\061\uffbe\062\072\063" +
    "\073\001\002\000\044\012\uffc0\013\100\014\071\020\101" +
    "\021\074\022\105\023\102\026\uffc0\027\uffc0\030\uffc0\031" +
    "\uffc0\032\uffc0\033\uffc0\035\uffc0\061\uffc0\062\uffc0\063\uffc0" +
    "\001\002\000\044\012\uffc5\013\100\014\071\020\101\021" +
    "\074\022\105\023\102\026\uffc5\027\uffc5\030\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\035\uffc5\061\uffc5\062\uffc5\063\uffc5\001" +
    "\002\000\044\012\uffc8\013\uffc8\014\uffc8\020\uffc8\021\uffc8" +
    "\022\uffc8\023\102\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032" +
    "\uffc8\033\uffc8\035\uffc8\061\uffc8\062\uffc8\063\uffc8\001\002" +
    "\000\044\012\uffc3\013\100\014\071\020\101\021\074\022" +
    "\105\023\102\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3" +
    "\033\uffc3\035\uffc3\061\uffc3\062\uffc3\063\uffc3\001\002\000" +
    "\044\012\uffc4\013\100\014\071\020\101\021\074\022\105" +
    "\023\102\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\035\uffc4\061\uffc4\062\uffc4\063\uffc4\001\002\000\042" +
    "\012\uffc9\013\uffc9\014\uffc9\020\uffc9\021\uffc9\022\uffc9\026" +
    "\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\035\uffc9" +
    "\061\uffc9\062\uffc9\063\uffc9\001\002\000\044\012\uffcb\013" +
    "\uffcb\014\uffcb\020\uffcb\021\uffcb\022\uffcb\023\102\026\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\035\uffcb\061" +
    "\uffcb\062\uffcb\063\uffcb\001\002\000\044\012\uffc6\013\uffc6" +
    "\014\uffc6\020\101\021\074\022\105\023\102\026\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\035\uffc6\061\uffc6" +
    "\062\uffc6\063\uffc6\001\002\000\044\012\uffc2\013\100\014" +
    "\071\020\101\021\074\022\105\023\102\026\uffc2\027\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\033\uffc2\035\uffc2\061\uffc2\062" +
    "\uffc2\063\uffc2\001\002\000\044\012\uffc1\013\100\014\071" +
    "\020\101\021\074\022\105\023\102\026\uffc1\027\uffc1\030" +
    "\uffc1\031\uffc1\032\uffc1\033\uffc1\035\uffc1\061\uffc1\062\uffc1" +
    "\063\uffc1\001\002\000\044\012\uffca\013\uffca\014\uffca\020" +
    "\uffca\021\uffca\022\uffca\023\102\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\035\uffca\061\uffca\062\uffca\063" +
    "\uffca\001\002\000\044\012\uffbc\013\100\014\071\020\101" +
    "\021\074\022\105\023\102\026\106\027\104\030\076\031" +
    "\077\032\107\033\103\035\uffbc\061\uffbc\062\uffbc\063\uffbc" +
    "\001\002\000\044\012\uffbd\013\100\014\071\020\101\021" +
    "\074\022\105\023\102\026\106\027\104\030\076\031\077" +
    "\032\107\033\103\035\uffbd\061\uffbd\062\uffbd\063\073\001" +
    "\002\000\044\012\uffc7\013\uffc7\014\uffc7\020\101\021\074" +
    "\022\105\023\102\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\035\uffc7\061\uffc7\062\uffc7\063\uffc7\001\002" +
    "\000\044\012\uffbf\013\100\014\071\020\101\021\074\022" +
    "\105\023\102\026\106\027\104\030\076\031\077\032\107" +
    "\033\103\035\uffbf\061\uffbf\062\uffbf\063\uffbf\001\002\000" +
    "\004\035\134\001\002\000\042\013\100\014\071\020\101" +
    "\021\074\022\105\023\102\026\106\027\104\030\076\031" +
    "\077\032\107\033\103\035\133\061\110\062\072\063\073" +
    "\001\002\000\044\012\uffb4\013\uffb4\014\uffb4\020\uffb4\021" +
    "\uffb4\022\uffb4\023\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\035\uffb4\061\uffb4\062\uffb4\063\uffb4\001" +
    "\002\000\026\005\064\006\066\007\061\010\057\011\070" +
    "\014\056\024\065\034\062\043\063\044\060\001\002\000" +
    "\044\012\uffcd\013\100\014\071\020\101\021\074\022\105" +
    "\023\102\026\106\027\104\030\076\031\077\032\107\033" +
    "\103\035\uffcd\061\110\062\072\063\073\001\002\000\044" +
    "\012\uffcc\013\uffcc\014\uffcc\020\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\035\uffcc\061\uffcc\062\uffcc\063\uffcc\001\002\000\004\025" +
    "\140\001\002\000\016\037\046\040\036\041\042\045\033" +
    "\046\005\050\040\001\002\000\006\012\143\015\142\001" +
    "\002\000\026\005\064\006\066\007\061\010\057\011\070" +
    "\014\056\024\065\034\062\043\063\044\060\001\002\000" +
    "\052\002\uffea\003\uffea\006\uffea\017\uffea\036\uffea\037\uffea" +
    "\040\uffea\041\uffea\042\uffea\045\uffea\046\uffea\050\uffea\051" +
    "\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea" +
    "\060\uffea\001\002\000\042\012\145\013\100\014\071\020" +
    "\101\021\074\022\105\023\102\026\106\027\104\030\076" +
    "\031\077\032\107\033\103\061\110\062\072\063\073\001" +
    "\002\000\052\002\uffeb\003\uffeb\006\uffeb\017\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\041\uffeb\042\uffeb\045\uffeb\046\uffeb\050" +
    "\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb" +
    "\057\uffeb\060\uffeb\001\002\000\026\005\064\006\066\007" +
    "\061\010\057\011\070\014\056\024\065\034\062\043\063" +
    "\044\060\001\002\000\042\013\100\014\071\020\101\021" +
    "\074\022\105\023\102\026\106\027\104\030\076\031\077" +
    "\032\107\033\103\035\150\061\110\062\072\063\073\001" +
    "\002\000\004\012\151\001\002\000\052\002\uffec\003\uffec" +
    "\006\uffec\017\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042" +
    "\uffec\045\uffec\046\uffec\050\uffec\051\uffec\052\uffec\053\uffec" +
    "\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec\001\002\000" +
    "\004\034\153\001\002\000\004\035\154\001\002\000\004" +
    "\012\155\001\002\000\052\002\uffef\003\uffef\006\uffef\017" +
    "\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\045\uffef" +
    "\046\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055" +
    "\uffef\056\uffef\057\uffef\060\uffef\001\002\000\004\006\157" +
    "\001\002\000\004\015\202\001\002\000\026\005\064\006" +
    "\066\007\061\010\057\011\070\014\056\024\065\034\062" +
    "\043\063\044\060\001\002\000\042\012\162\013\100\014" +
    "\071\020\101\021\074\022\105\023\102\026\106\027\104" +
    "\030\076\031\077\032\107\033\103\061\110\062\072\063" +
    "\073\001\002\000\004\006\163\001\002\000\010\013\175" +
    "\014\176\015\174\001\002\000\004\035\uffd8\001\002\000" +
    "\004\035\uffd9\001\002\000\004\035\167\001\002\000\004" +
    "\016\170\001\002\000\046\003\035\006\015\036\031\037" +
    "\046\040\036\041\042\042\020\045\033\046\005\050\040" +
    "\051\032\052\034\053\007\054\024\055\014\056\023\057" +
    "\025\060\027\001\002\000\050\003\035\006\015\017\172" +
    "\036\031\037\046\040\036\041\042\042\020\045\033\046" +
    "\005\050\040\051\032\052\034\053\007\054\024\055\014" +
    "\056\023\057\025\060\027\001\002\000\052\002\uffdb\003" +
    "\uffdb\006\uffdb\017\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\045\uffdb\046\uffdb\050\uffdb\051\uffdb\052\uffdb\053" +
    "\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\001\002" +
    "\000\052\002\uffff\003\uffff\006\uffff\017\uffff\036\uffff\037" +
    "\uffff\040\uffff\041\uffff\042\uffff\045\uffff\046\uffff\050\uffff" +
    "\051\uffff\052\uffff\053\uffff\054\uffff\055\uffff\056\uffff\057" +
    "\uffff\060\uffff\001\002\000\026\005\064\006\066\007\061" +
    "\010\057\011\070\014\056\024\065\034\062\043\063\044" +
    "\060\001\002\000\004\013\200\001\002\000\004\014\177" +
    "\001\002\000\004\035\uffd6\001\002\000\004\035\uffd7\001" +
    "\002\000\042\013\100\014\071\020\101\021\074\022\105" +
    "\023\102\026\106\027\104\030\076\031\077\032\107\033" +
    "\103\035\uffda\061\110\062\072\063\073\001\002\000\026" +
    "\005\064\006\066\007\061\010\057\011\070\014\056\024" +
    "\065\034\062\043\063\044\060\001\002\000\042\012\204" +
    "\013\100\014\071\020\101\021\074\022\105\023\102\026" +
    "\106\027\104\030\076\031\077\032\107\033\103\061\110" +
    "\062\072\063\073\001\002\000\074\002\uffe5\003\uffe5\005" +
    "\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\014\uffe5\017\uffe5" +
    "\024\uffe5\034\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042" +
    "\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\050\uffe5\051\uffe5" +
    "\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060" +
    "\uffe5\001\002\000\052\002\uffee\003\uffee\006\uffee\017\uffee" +
    "\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\045\uffee\046" +
    "\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee" +
    "\056\uffee\057\uffee\060\uffee\001\002\000\046\003\035\006" +
    "\015\036\031\037\046\040\036\041\042\042\020\045\033" +
    "\046\005\050\040\051\032\052\034\053\007\054\024\055" +
    "\014\056\023\057\025\060\027\001\002\000\050\003\035" +
    "\006\015\017\210\036\031\037\046\040\036\041\042\042" +
    "\020\045\033\046\005\050\040\051\032\052\034\053\007" +
    "\054\024\055\014\056\023\057\025\060\027\001\002\000" +
    "\004\053\211\001\002\000\004\034\212\001\002\000\026" +
    "\005\064\006\066\007\061\010\057\011\070\014\056\024" +
    "\065\034\062\043\063\044\060\001\002\000\042\013\100" +
    "\014\071\020\101\021\074\022\105\023\102\026\106\027" +
    "\104\030\076\031\077\032\107\033\103\035\214\061\110" +
    "\062\072\063\073\001\002\000\054\002\uffdd\003\uffdd\006" +
    "\uffdd\012\215\017\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\045\uffdd\046\uffdd\050\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\001\002" +
    "\000\052\002\uffdc\003\uffdc\006\uffdc\017\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\045\uffdc\046\uffdc\050\uffdc" +
    "\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057" +
    "\uffdc\060\uffdc\001\002\000\026\005\064\006\066\007\061" +
    "\010\057\011\070\014\056\024\065\034\062\043\063\044" +
    "\060\001\002\000\042\013\100\014\071\020\101\021\074" +
    "\022\105\023\102\026\106\027\104\030\076\031\077\032" +
    "\107\033\103\035\220\061\110\062\072\063\073\001\002" +
    "\000\004\016\221\001\002\000\046\003\035\006\015\036" +
    "\031\037\046\040\036\041\042\042\020\045\033\046\005" +
    "\050\040\051\032\052\034\053\007\054\024\055\014\056" +
    "\023\057\025\060\027\001\002\000\050\003\035\006\015" +
    "\017\223\036\031\037\046\040\036\041\042\042\020\045" +
    "\033\046\005\050\040\051\032\052\034\053\007\054\024" +
    "\055\014\056\023\057\025\060\027\001\002\000\054\002" +
    "\uffe4\003\uffe4\006\uffe4\017\uffe4\036\uffe4\037\uffe4\040\uffe4" +
    "\041\uffe4\042\uffe4\045\uffe4\046\uffe4\047\224\050\uffe4\051" +
    "\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4" +
    "\060\uffe4\001\002\000\004\042\232\001\002\000\054\002" +
    "\uffe3\003\uffe3\006\uffe3\017\uffe3\036\uffe3\037\uffe3\040\uffe3" +
    "\041\uffe3\042\uffe3\045\uffe3\046\uffe3\047\227\050\uffe3\051" +
    "\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3" +
    "\060\uffe3\001\002\000\054\002\uffdf\003\uffdf\006\uffdf\017" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\045\uffdf" +
    "\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054" +
    "\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\001\002\000\006" +
    "\016\231\042\232\001\002\000\054\002\uffe0\003\uffe0\006" +
    "\uffe0\017\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053" +
    "\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\001\002" +
    "\000\046\003\035\006\015\036\031\037\046\040\036\041" +
    "\042\042\020\045\033\046\005\050\040\051\032\052\034" +
    "\053\007\054\024\055\014\056\023\057\025\060\027\001" +
    "\002\000\004\034\233\001\002\000\026\005\064\006\066" +
    "\007\061\010\057\011\070\014\056\024\065\034\062\043" +
    "\063\044\060\001\002\000\042\013\100\014\071\020\101" +
    "\021\074\022\105\023\102\026\106\027\104\030\076\031" +
    "\077\032\107\033\103\035\235\061\110\062\072\063\073" +
    "\001\002\000\004\016\236\001\002\000\046\003\035\006" +
    "\015\036\031\037\046\040\036\041\042\042\020\045\033" +
    "\046\005\050\040\051\032\052\034\053\007\054\024\055" +
    "\014\056\023\057\025\060\027\001\002\000\050\003\035" +
    "\006\015\017\240\036\031\037\046\040\036\041\042\042" +
    "\020\045\033\046\005\050\040\051\032\052\034\053\007" +
    "\054\024\055\014\056\023\057\025\060\027\001\002\000" +
    "\054\002\uffe1\003\uffe1\006\uffe1\017\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\041\uffe1\042\uffe1\045\uffe1\046\uffe1\047\uffe1\050" +
    "\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1" +
    "\057\uffe1\060\uffe1\001\002\000\050\003\035\006\015\017" +
    "\242\036\031\037\046\040\036\041\042\042\020\045\033" +
    "\046\005\050\040\051\032\052\034\053\007\054\024\055" +
    "\014\056\023\057\025\060\027\001\002\000\052\002\uffe2" +
    "\003\uffe2\006\uffe2\017\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\045\uffe2\046\uffe2\050\uffe2\051\uffe2\052\uffe2" +
    "\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\001" +
    "\002\000\004\013\247\001\002\000\004\014\245\001\002" +
    "\000\004\012\246\001\002\000\052\002\uffd4\003\uffd4\006" +
    "\uffd4\017\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\045\uffd4\046\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054" +
    "\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\001\002\000\004" +
    "\012\250\001\002\000\052\002\uffd5\003\uffd5\006\uffd5\017" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\045\uffd5" +
    "\046\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055" +
    "\uffd5\056\uffd5\057\uffd5\060\uffd5\001\002\000\052\002\uffed" +
    "\003\uffed\006\uffed\017\uffed\036\uffed\037\uffed\040\uffed\041" +
    "\uffed\042\uffed\045\uffed\046\uffed\050\uffed\051\uffed\052\uffed" +
    "\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\060\uffed\001" +
    "\002\000\026\005\064\006\066\007\061\010\057\011\070" +
    "\014\056\024\065\034\062\043\063\044\060\001\002\000" +
    "\042\013\100\014\071\020\101\021\074\022\105\023\102" +
    "\026\106\027\104\030\076\031\077\032\107\033\103\035" +
    "\254\061\110\062\072\063\073\001\002\000\004\016\255" +
    "\001\002\000\046\003\035\006\015\036\031\037\046\040" +
    "\036\041\042\042\020\045\033\046\005\050\040\051\032" +
    "\052\034\053\007\054\024\055\014\056\023\057\025\060" +
    "\027\001\002\000\050\003\035\006\015\017\257\036\031" +
    "\037\046\040\036\041\042\042\020\045\033\046\005\050" +
    "\040\051\032\052\034\053\007\054\024\055\014\056\023" +
    "\057\025\060\027\001\002\000\052\002\uffde\003\uffde\006" +
    "\uffde\017\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde" +
    "\045\uffde\046\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054" +
    "\uffde\055\uffde\056\uffde\057\uffde\060\uffde\001\002\000\004" +
    "\034\261\001\002\000\004\035\262\001\002\000\004\016" +
    "\263\001\002\000\046\003\035\006\015\036\031\037\046" +
    "\040\036\041\042\042\020\045\033\046\005\050\040\051" +
    "\032\052\034\053\007\054\024\055\014\056\023\057\025" +
    "\060\027\001\002\000\050\003\035\006\015\017\265\036" +
    "\031\037\046\040\036\041\042\042\020\045\033\046\005" +
    "\050\040\051\032\052\034\053\007\054\024\055\014\056" +
    "\023\057\025\060\027\001\002\000\052\002\uffe7\003\uffe7" +
    "\006\uffe7\017\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042" +
    "\uffe7\045\uffe7\046\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7" +
    "\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\044\002\040\003\016\004\043\005\044\006" +
    "\036\007\042\010\021\011\015\012\020\013\007\015\003" +
    "\017\027\020\010\021\025\022\005\030\012\031\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\172\005\044\006" +
    "\036\007\042\010\021\011\015\012\020\013\007\015\003" +
    "\017\027\020\010\021\025\022\005\030\012\031\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\052\001\001\000\002\001\001\000\004" +
    "\016\066\001\001\000\002\001\001\000\004\016\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\130\016\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\126\001" +
    "\001\000\004\016\125\001\001\000\004\016\124\001\001" +
    "\000\004\016\123\001\001\000\002\001\001\000\004\016" +
    "\122\001\001\000\004\016\121\001\001\000\004\016\120" +
    "\001\001\000\004\016\117\001\001\000\004\016\116\001" +
    "\001\000\004\016\115\001\001\000\004\016\114\001\001" +
    "\000\004\016\113\001\001\000\004\016\112\001\001\000" +
    "\004\016\111\001\001\000\004\016\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\140\001\001\000\002\001\001\000\004" +
    "\016\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\157\001\001\000\002\001\001\000\004\016\160\001" +
    "\001\000\002\001\001\000\010\014\165\023\164\024\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\003\170" +
    "\004\043\005\044\006\036\007\042\010\021\011\015\012" +
    "\020\013\007\015\003\017\027\020\010\021\025\022\005" +
    "\030\012\031\011\001\001\000\040\004\172\005\044\006" +
    "\036\007\042\010\021\011\015\012\020\013\007\015\003" +
    "\017\027\020\010\021\025\022\005\030\012\031\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\003\206\004\043\005\044\006\036\007\042" +
    "\010\021\011\015\012\020\013\007\015\003\017\027\020" +
    "\010\021\025\022\005\030\012\031\011\001\001\000\040" +
    "\004\172\005\044\006\036\007\042\010\021\011\015\012" +
    "\020\013\007\015\003\017\027\020\010\021\025\022\005" +
    "\030\012\031\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\221\004\043" +
    "\005\044\006\036\007\042\010\021\011\015\012\020\013" +
    "\007\015\003\017\027\020\010\021\025\022\005\030\012" +
    "\031\011\001\001\000\040\004\172\005\044\006\036\007" +
    "\042\010\021\011\015\012\020\013\007\015\003\017\027" +
    "\020\010\021\025\022\005\030\012\031\011\001\001\000" +
    "\006\026\225\027\224\001\001\000\002\001\001\000\004" +
    "\026\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\240\004\043\005\044\006\036" +
    "\007\042\010\021\011\015\012\020\013\007\015\003\017" +
    "\027\020\010\021\025\022\005\030\012\031\011\001\001" +
    "\000\002\001\001\000\004\016\233\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\236\004\043\005\044" +
    "\006\036\007\042\010\021\011\015\012\020\013\007\015" +
    "\003\017\027\020\010\021\025\022\005\030\012\031\011" +
    "\001\001\000\040\004\172\005\044\006\036\007\042\010" +
    "\021\011\015\012\020\013\007\015\003\017\027\020\010" +
    "\021\025\022\005\030\012\031\011\001\001\000\002\001" +
    "\001\000\040\004\172\005\044\006\036\007\042\010\021" +
    "\011\015\012\020\013\007\015\003\017\027\020\010\021" +
    "\025\022\005\030\012\031\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\255\004\043\005\044\006\036" +
    "\007\042\010\021\011\015\012\020\013\007\015\003\017" +
    "\027\020\010\021\025\022\005\030\012\031\011\001\001" +
    "\000\040\004\172\005\044\006\036\007\042\010\021\011" +
    "\015\012\020\013\007\015\003\017\027\020\010\021\025" +
    "\022\005\030\012\031\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\263\004\043\005\044\006\036\007\042\010\021\011" +
    "\015\012\020\013\007\015\003\017\027\020\010\021\025" +
    "\022\005\030\012\031\011\001\001\000\040\004\172\005" +
    "\044\006\036\007\042\010\021\011\015\012\020\013\007" +
    "\015\003\017\027\020\010\021\025\022\005\030\012\031" +
    "\011\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JCParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JCParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JCParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    JCLexer s;
    JCParser(JCLexer s){this.s = s;}

//    public LinkedList<Errores> listaErrores = new LinkedList<>();
    private LinkedList<JCError> errorList = new LinkedList<>();
    public LinkedList<JCError> getSyntaxErrorList(){
        return errorList;
    }

    public void syntax_error(Symbol s){
        errorList.add(new JCError("Sintaxis", "Error en la instruccion, componente: "+s.value, s.left, s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        errorList.add(new JCError("Sintaxis - FATAL", "Error en la instruccion, componente: "+s.value, s.left, s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JCParser$actions {



  private final JCParser parser;

  /** Constructor */
  CUP$JCParser$actions(JCParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JCParser$do_action_part00000000(
    int                        CUP$JCParser$act_num,
    java_cup.runtime.lr_parser CUP$JCParser$parser,
    java.util.Stack            CUP$JCParser$stack,
    int                        CUP$JCParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JCParser$result;

      /* select the action based on the action number */
      switch (CUP$JCParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> start_val = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		RESULT = start_val;
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JCParser$parser.done_parsing();
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= STATEMENTS 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // STATEMENTS ::= STATEMENTS STATEMENT 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STATEMENTS ::= STATEMENT 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STATEMENT ::= IMPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STATEMENT ::= DECLARATION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATEMENT ::= ASSIGNATION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENT ::= IF_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENT ::= INCREMENT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEMENT ::= DECREMENT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STATEMENT ::= WHILE_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STATEMENT ::= FOR_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STATEMENT ::= DO_WHILE_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STATEMENT ::= BREAK 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STATEMENT ::= CONTINUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STATEMENT ::= START_WITH_INVOKE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STATEMENT ::= METHOD_DECLARATION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STATEMENT ::= error ENDLINE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // START_WITH_INVOKE ::= RW_START_WITH ID OPENPAR CLOSEPAR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		   RESULT = new StartWithInvoke(a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("START_WITH_INVOKE",22, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BREAK ::= RW_BREAK ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new Break(aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("BREAK",15, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTINUE ::= RW_CONTINUE ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new Continue(aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("CONTINUE",16, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IMPRESION ::= RW_PRINT OPENPAR EXPRESION CLOSEPAR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		   RESULT = new Print(a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("IMPRESION",3, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARATION ::= RW_CONST ID COLON TYPES EQUALS EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		Types b = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new Declaration(a, b, c, true, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARATION ::= RW_CONST ID COLON TYPES ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Types b = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new Declaration(a, b, null, true,aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARATION ::= RW_VAR ID COLON TYPES ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Types b = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new Declaration(a, b, null, false, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARATION ::= RW_VAR ID COLON TYPES EQUALS EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		Types b = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new Declaration(a, b, c, false, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // METHOD_DECLARATION ::= TYPES ID OPENPAR CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		Types a = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new MethodDeclaration(a, b, c, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("METHOD_DECLARATION",23, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TYPE_CAST_OPERATOR ::= OPENPAR TYPES CLOSEPAR 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = type; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPE_CAST_OPERATOR",19, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASSIGNATION ::= ID EQUALS EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT=new SymbolAssignation(a, b, aleft, aright);  
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",5, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IF_STMT ::= RW_IF OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
               RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, new LinkedList<IfStatement.ConditionBlock>()), aleft, aright);
           
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("IF_STMT",6, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IF_STMT ::= RW_IF OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE ELSE_IF_BLOCKS 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		LinkedList<IfStatement.ConditionBlock> c = (LinkedList<IfStatement.ConditionBlock>)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, c), aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("IF_STMT",6, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IF_STMT ::= RW_IF OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE ELSE_IF_BLOCKS RW_ELSE OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		LinkedList<IfStatement.ConditionBlock> c = (LinkedList<IfStatement.ConditionBlock>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, c), d, aleft, aright);

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("IF_STMT",6, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-11)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ELSE_IF_BLOCK ::= RW_ELSE RW_IF OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              IfStatement.ConditionBlock RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new IfStatement.ConditionBlock(a, b); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_BLOCK",20, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ELSE_IF_BLOCKS ::= ELSE_IF_BLOCKS ELSE_IF_BLOCK 
            {
              LinkedList<IfStatement.ConditionBlock> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<IfStatement.ConditionBlock> a = (LinkedList<IfStatement.ConditionBlock>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		IfStatement.ConditionBlock e = (IfStatement.ConditionBlock)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; a.add(e); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_BLOCKS",21, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ELSE_IF_BLOCKS ::= ELSE_IF_BLOCK 
            {
              LinkedList<IfStatement.ConditionBlock> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		IfStatement.ConditionBlock e = (IfStatement.ConditionBlock)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(e); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_BLOCKS",21, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // WHILE_STMT ::= RW_WHILE OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new WhileStatement(a, b, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("WHILE_STMT",7, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DO_WHILE_STMT ::= RW_DO OPENBRACE STATEMENTS CLOSEBRACE RW_WHILE OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new DoWhileStatement(b, a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DO_WHILE_STMT",8, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DO_WHILE_STMT ::= RW_DO OPENBRACE STATEMENTS CLOSEBRACE RW_WHILE OPENPAR EXPRESION CLOSEPAR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		   RESULT = new DoWhileStatement(b, a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DO_WHILE_STMT",8, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-8)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FOR_STMT ::= RW_FOR OPENPAR ASSIGNATION EXPRESION ENDLINE FOR_UPDATE CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new ForStatement(a, b, c, d, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("FOR_STMT",9, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FOR_UPDATE ::= ID EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new SymbolAssignation(a, b, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",10, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FOR_UPDATE ::= INCREMENT_NO_ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",10, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FOR_UPDATE ::= DECREMENT_NO_ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",10, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INCREMENT_NO_ENDLINE ::= ID PLUS PLUS 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		   RESULT = new SymbolAssignation(a, new Arithmetic(new SymbolAccess(a, aleft, aright),new Primitive(Types.INTEGER, 1, aleft, aright),ArithmeticOperands.SUM, aleft, aright), aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("INCREMENT_NO_ENDLINE",17, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECREMENT_NO_ENDLINE ::= ID MINUS MINUS 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		   RESULT = new SymbolAssignation(a, new Arithmetic(new SymbolAccess(a, aleft, aright), new Primitive(Types.INTEGER, 1, aleft, aright), ArithmeticOperands.SUB, aleft, aright), aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECREMENT_NO_ENDLINE",18, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INCREMENT ::= ID PLUS PLUS ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		   RESULT = new SymbolAssignation(a, new Arithmetic(new SymbolAccess(a, aleft, aright),new Primitive(Types.INTEGER, 1, aleft, aright),ArithmeticOperands.SUM, aleft, aright), aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("INCREMENT",13, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECREMENT ::= ID MINUS MINUS ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		   RESULT = new SymbolAssignation(a, new Arithmetic(new SymbolAccess(a, aleft, aright), new Primitive(Types.INTEGER, 1, aleft, aright), ArithmeticOperands.SUB, aleft, aright), aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECREMENT",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TYPES ::= RW_INT 
            {
              Types RESULT =null;
		   RESULT=Types.INTEGER;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",11, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TYPES ::= RW_DOUBLE 
            {
              Types RESULT =null;
		   RESULT=Types.DOUBLE;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",11, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TYPES ::= RW_STRING 
            {
              Types RESULT =null;
		   RESULT=Types.STRING;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",11, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TYPES ::= RW_BOOL 
            {
              Types RESULT =null;
		   RESULT=Types.BOOLEAN;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",11, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TYPES ::= RW_CHAR 
            {
              Types RESULT =null;
		   RESULT=Types.CHARACTER;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",11, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TYPES ::= RW_VOID 
            {
              Types RESULT =null;
		   RESULT=Types.VOID;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",11, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= OPENPAR TYPES CLOSEPAR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Types a = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new TypeCast(b, a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= MINUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, ArithmeticOperands.NEG, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= EXPRESION ASTERISK EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.MUL, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= EXPRESION SLASH EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.DIV, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= EXPRESION DOUBLEASTERISK EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.POW, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.MOD, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= EXPRESION MINUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.SUB, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= EXPRESION PLUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.SUM, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= EXPRESION DOUBLEEQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.EQUALS, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= EXPRESION NOT_EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.NOT_EQUALS, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= EXPRESION LESS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.LESS_THAN, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= EXPRESION LESSEQUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.LESS_THAN_OR_EQUALS, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= EXPRESION GREATER EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.GREATER_THAN, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= EXPRESION GREATEREQUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.GREATER_THAN_OR_EQUALS, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= NEGATION EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Logical(a, LogicalOperands.NOT, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Logical(a, b, LogicalOperands.OR, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Logical(a, b, LogicalOperands.AND, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Logical(a, b, LogicalOperands.XOR, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= INTEGER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive(Types.INTEGER,Integer.parseInt(a),  aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= DECIMAL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive(Types.DOUBLE,new Double(a),  aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= STRING 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive( Types.STRING,a, aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= CHAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive(Types.CHARACTER, a.charAt(0), aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= RW_TRUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive(Types.BOOLEAN, true, aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= RW_FALSE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive(Types.BOOLEAN, false, aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new SymbolAccess(a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JCParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JCParser$do_action(
    int                        CUP$JCParser$act_num,
    java_cup.runtime.lr_parser CUP$JCParser$parser,
    java.util.Stack            CUP$JCParser$stack,
    int                        CUP$JCParser$top)
    throws java.lang.Exception
    {
              return CUP$JCParser$do_action_part00000000(
                               CUP$JCParser$act_num,
                               CUP$JCParser$parser,
                               CUP$JCParser$stack,
                               CUP$JCParser$top);
    }
}

}
