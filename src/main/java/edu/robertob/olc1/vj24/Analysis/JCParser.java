
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package edu.robertob.olc1.vj24.Analysis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.HashMap;
import edu.robertob.olc1.vj24.Engine.Base.*;
import edu.robertob.olc1.vj24.Engine.Structs.*;
import edu.robertob.olc1.vj24.Engine.Statements.*;
import edu.robertob.olc1.vj24.Engine.Expressions.*;
import edu.robertob.olc1.vj24.Engine.BuiltIn.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JCParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public JCParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JCParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JCParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\004\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\004\003\000\002\004\004\000\002\032\007\000\002" +
    "\023\004\000\002\024\004\000\002\005\007\000\002\005" +
    "\007\000\002\041\003\000\002\041\003\000\002\006\007" +
    "\000\002\006\011\000\002\006\011\000\002\006\015\000" +
    "\002\006\017\000\002\006\011\000\002\050\007\000\002" +
    "\050\005\000\002\047\005\000\002\047\003\000\002\051" +
    "\003\000\002\051\003\000\002\054\015\000\002\055\010" +
    "\000\002\055\010\000\002\042\010\000\002\033\011\000" +
    "\002\033\012\000\002\034\006\000\002\034\004\000\002" +
    "\036\005\000\002\036\003\000\002\037\003\000\002\037" +
    "\003\000\002\035\005\000\002\035\006\000\002\040\005" +
    "\000\002\040\004\000\002\040\005\000\002\027\005\000" +
    "\002\007\006\000\002\007\006\000\002\007\011\000\002" +
    "\007\014\000\002\007\006\000\002\007\011\000\002\007" +
    "\014\000\002\043\012\000\002\043\011\000\002\043\011" +
    "\000\002\044\004\000\002\044\003\000\002\045\007\000" +
    "\002\046\007\000\002\012\011\000\002\012\012\000\002" +
    "\012\016\000\002\012\015\000\002\030\012\000\002\031" +
    "\004\000\002\031\003\000\002\013\011\000\002\014\012" +
    "\000\002\014\013\000\002\015\014\000\002\016\005\000" +
    "\002\016\003\000\002\016\003\000\002\025\005\000\002" +
    "\026\005\000\002\021\006\000\002\022\006\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\020\006\000" +
    "\002\020\004\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\004\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\006\000\002\020\011\000" +
    "\002\020\006\000\002\020\006\000\002\020\006\000\002" +
    "\020\003\000\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u014d\000\054\003\026\006\022\036\033\037\040\040" +
    "\006\041\046\042\037\045\024\046\010\050\041\051\042" +
    "\052\023\053\020\054\013\055\025\056\011\057\044\060" +
    "\032\061\021\062\054\074\052\001\002\000\004\012\u014f" +
    "\001\002\000\060\002\ufff8\003\ufff8\006\ufff8\017\ufff8\036" +
    "\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\045\ufff8\046\ufff8" +
    "\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056" +
    "\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\074\ufff8\001\002" +
    "\000\016\006\uffa3\012\uffa3\015\uffa3\030\uffa3\035\uffa3\067" +
    "\uffa3\001\002\000\060\002\uffef\003\uffef\006\uffef\017\uffef" +
    "\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\045\uffef\046" +
    "\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef" +
    "\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef\074\uffef\001" +
    "\002\000\016\006\uffa0\012\uffa0\015\uffa0\030\uffa0\035\uffa0" +
    "\067\uffa0\001\002\000\004\016\u0147\001\002\000\060\002" +
    "\ufff7\003\ufff7\006\ufff7\017\ufff7\036\ufff7\037\ufff7\040\ufff7" +
    "\041\ufff7\042\ufff7\045\ufff7\046\ufff7\050\ufff7\051\ufff7\052" +
    "\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7" +
    "\061\ufff7\062\ufff7\074\ufff7\001\002\000\004\012\u0146\001" +
    "\002\000\060\002\ufff4\003\ufff4\006\ufff4\017\ufff4\036\ufff4" +
    "\037\ufff4\040\ufff4\041\ufff4\042\ufff4\045\ufff4\046\ufff4\050" +
    "\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4" +
    "\057\ufff4\060\ufff4\061\ufff4\062\ufff4\074\ufff4\001\002\000" +
    "\060\002\ufff5\003\ufff5\006\ufff5\017\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\045\ufff5\046\ufff5\050\ufff5\051" +
    "\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5" +
    "\060\ufff5\061\ufff5\062\ufff5\074\ufff5\001\002\000\060\002" +
    "\ufff1\003\ufff1\006\ufff1\017\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\041\ufff1\042\ufff1\045\ufff1\046\ufff1\050\ufff1\051\ufff1\052" +
    "\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1" +
    "\061\ufff1\062\ufff1\074\ufff1\001\002\000\004\006\u0121\001" +
    "\002\000\004\034\u011b\001\002\000\036\005\074\006\321" +
    "\007\066\010\064\011\101\012\u0116\014\063\024\075\034" +
    "\067\043\073\044\065\100\071\102\070\103\076\001\002" +
    "\000\016\013\u010f\014\u0110\015\276\034\305\067\275\071" +
    "\u0111\001\002\000\004\006\uffe4\001\002\000\016\006\uffa1" +
    "\012\uffa1\015\uffa1\030\uffa1\035\uffa1\067\uffa1\001\002\000" +
    "\004\012\u010e\001\002\000\004\012\u010d\001\002\000\004" +
    "\002\u010c\001\002\000\060\002\ufff6\003\ufff6\006\ufff6\017" +
    "\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\045\ufff6" +
    "\046\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055" +
    "\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\074\ufff6" +
    "\001\002\000\060\002\ufff0\003\ufff0\006\ufff0\017\ufff0\036" +
    "\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\045\ufff0\046\ufff0" +
    "\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056" +
    "\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\074\ufff0\001\002" +
    "\000\004\006\u0108\001\002\000\004\034\u0101\001\002\000" +
    "\060\002\ufff3\003\ufff3\006\ufff3\017\ufff3\036\ufff3\037\ufff3" +
    "\040\ufff3\041\ufff3\042\ufff3\045\ufff3\046\ufff3\050\ufff3\051" +
    "\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3" +
    "\060\ufff3\061\ufff3\062\ufff3\074\ufff3\001\002\000\060\002" +
    "\ufff9\003\ufff9\006\ufff9\017\ufff9\036\ufff9\037\ufff9\040\ufff9" +
    "\041\ufff9\042\ufff9\045\ufff9\046\ufff9\050\ufff9\051\ufff9\052" +
    "\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9" +
    "\061\ufff9\062\ufff9\074\ufff9\001\002\000\060\002\ufffc\003" +
    "\ufffc\006\ufffc\017\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc" +
    "\042\ufffc\045\ufffc\046\ufffc\050\ufffc\051\ufffc\052\ufffc\053" +
    "\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc" +
    "\062\ufffc\074\ufffc\001\002\000\004\034\351\001\002\000" +
    "\016\006\uffa4\012\uffa4\015\uffa4\030\uffa4\035\uffa4\067\uffa4" +
    "\001\002\000\016\006\uff9f\012\uff9f\015\uff9f\030\uff9f\035" +
    "\uff9f\067\uff9f\001\002\000\004\006\uffe3\001\002\000\060" +
    "\002\ufffb\003\ufffb\006\ufffb\017\ufffb\036\ufffb\037\ufffb\040" +
    "\ufffb\041\ufffb\042\ufffb\045\ufffb\046\ufffb\050\ufffb\051\ufffb" +
    "\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060" +
    "\ufffb\061\ufffb\062\ufffb\074\ufffb\001\002\000\004\034\252" +
    "\001\002\000\060\002\ufffd\003\ufffd\006\ufffd\017\ufffd\036" +
    "\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\045\ufffd\046\ufffd" +
    "\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056" +
    "\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd\074\ufffd\001\002" +
    "\000\016\006\uffa2\012\uffa2\015\uffa2\030\uffa2\035\uffa2\067" +
    "\uffa2\001\002\000\060\002\ufffe\003\ufffe\006\ufffe\017\ufffe" +
    "\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\045\ufffe\046" +
    "\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe" +
    "\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\074\ufffe\001" +
    "\002\000\056\002\000\003\026\006\022\036\033\037\040" +
    "\040\006\041\046\042\037\045\024\046\010\050\041\051" +
    "\042\052\023\053\020\054\013\055\025\056\011\057\044" +
    "\060\032\061\021\062\054\074\052\001\002\000\060\002" +
    "\uffee\003\uffee\006\uffee\017\uffee\036\uffee\037\uffee\040\uffee" +
    "\041\uffee\042\uffee\045\uffee\046\uffee\050\uffee\051\uffee\052" +
    "\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057\uffee\060\uffee" +
    "\061\uffee\062\uffee\074\uffee\001\002\000\004\027\240\001" +
    "\002\000\004\006\220\001\002\000\004\034\062\001\002" +
    "\000\060\002\uffed\003\uffed\006\uffed\017\uffed\036\uffed\037" +
    "\uffed\040\uffed\041\uffed\042\uffed\045\uffed\046\uffed\050\uffed" +
    "\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057" +
    "\uffed\060\uffed\061\uffed\062\uffed\074\uffed\001\002\000\060" +
    "\002\ufffa\003\ufffa\006\ufffa\017\ufffa\036\ufffa\037\ufffa\040" +
    "\ufffa\041\ufffa\042\ufffa\045\ufffa\046\ufffa\050\ufffa\051\ufffa" +
    "\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060" +
    "\ufffa\061\ufffa\062\ufffa\074\ufffa\001\002\000\004\012\061" +
    "\001\002\000\060\002\uffeb\003\uffeb\006\uffeb\017\uffeb\036" +
    "\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\045\uffeb\046\uffeb" +
    "\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056" +
    "\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\074\uffeb\001\002" +
    "\000\060\002\ufff2\003\ufff2\006\ufff2\017\ufff2\036\ufff2\037" +
    "\ufff2\040\ufff2\041\ufff2\042\ufff2\045\ufff2\046\ufff2\050\ufff2" +
    "\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057" +
    "\ufff2\060\ufff2\061\ufff2\062\ufff2\074\ufff2\001\002\000\034" +
    "\005\074\006\077\007\066\010\064\011\101\014\063\024" +
    "\075\034\067\043\073\044\065\100\071\102\070\103\076" +
    "\001\002\000\034\005\074\006\077\007\066\010\064\011" +
    "\101\014\063\024\075\034\067\043\073\044\065\100\071" +
    "\102\070\103\076\001\002\000\052\012\uff8b\013\uff8b\014" +
    "\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\026\uff8b\027\uff8b" +
    "\030\uff8b\031\uff8b\032\uff8b\033\uff8b\035\uff8b\063\uff8b\064" +
    "\uff8b\065\uff8b\066\uff8b\070\uff8b\073\uff8b\001\002\000\052" +
    "\012\uff87\013\uff87\014\uff87\020\uff87\021\uff87\022\uff87\023" +
    "\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87" +
    "\035\uff87\063\uff87\064\uff87\065\uff87\066\uff87\070\uff87\073" +
    "\uff87\001\002\000\052\012\uff8c\013\uff8c\014\uff8c\020\uff8c" +
    "\021\uff8c\022\uff8c\023\uff8c\026\uff8c\027\uff8c\030\uff8c\031" +
    "\uff8c\032\uff8c\033\uff8c\035\uff8c\063\uff8c\064\uff8c\065\uff8c" +
    "\066\uff8c\070\uff8c\073\uff8c\001\002\000\050\005\074\006" +
    "\077\007\066\010\064\011\101\014\063\024\075\034\067" +
    "\037\040\040\006\041\046\043\073\044\065\045\024\046" +
    "\010\050\041\100\071\102\070\103\076\001\002\000\004" +
    "\034\207\001\002\000\004\034\204\001\002\000\052\012" +
    "\uff80\013\uff80\014\uff80\020\uff80\021\uff80\022\uff80\023\uff80" +
    "\026\uff80\027\uff80\030\uff80\031\uff80\032\uff80\033\uff80\035" +
    "\uff80\063\uff80\064\uff80\065\uff80\066\uff80\070\uff80\073\uff80" +
    "\001\002\000\052\012\uff88\013\uff88\014\uff88\020\uff88\021" +
    "\uff88\022\uff88\023\uff88\026\uff88\027\uff88\030\uff88\031\uff88" +
    "\032\uff88\033\uff88\035\uff88\063\uff88\064\uff88\065\uff88\066" +
    "\uff88\070\uff88\073\uff88\001\002\000\052\012\uff8a\013\uff8a" +
    "\014\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\026\uff8a\027" +
    "\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\035\uff8a\063\uff8a" +
    "\064\uff8a\065\uff8a\066\uff8a\070\uff8a\073\uff8a\001\002\000" +
    "\034\005\074\006\077\007\066\010\064\011\101\014\063" +
    "\024\075\034\067\043\073\044\065\100\071\102\070\103" +
    "\076\001\002\000\004\034\200\001\002\000\056\012\uff86" +
    "\013\uff86\014\uff86\020\uff86\021\uff86\022\uff86\023\uff86\026" +
    "\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033\uff86\035\uff86" +
    "\063\uff86\064\uff86\065\uff86\066\uff86\067\165\070\uff86\071" +
    "\166\073\uff86\001\002\000\042\013\111\014\103\020\112" +
    "\021\105\022\116\023\113\026\117\027\115\030\107\031" +
    "\110\032\120\033\114\035\106\063\121\064\102\065\104" +
    "\001\002\000\052\012\uff89\013\uff89\014\uff89\020\uff89\021" +
    "\uff89\022\uff89\023\uff89\026\uff89\027\uff89\030\uff89\031\uff89" +
    "\032\uff89\033\uff89\035\uff89\063\uff89\064\uff89\065\uff89\066" +
    "\uff89\070\uff89\073\uff89\001\002\000\034\005\074\006\077" +
    "\007\066\010\064\011\101\014\063\024\075\034\067\043" +
    "\073\044\065\100\071\102\070\103\076\001\002\000\034" +
    "\005\074\006\077\007\066\010\064\011\101\014\063\024" +
    "\075\034\067\043\073\044\065\100\071\102\070\103\076" +
    "\001\002\000\034\005\074\006\077\007\066\010\064\011" +
    "\101\014\063\024\075\034\067\043\073\044\065\100\071" +
    "\102\070\103\076\001\002\000\034\005\074\006\077\007" +
    "\066\010\064\011\101\014\063\024\075\034\067\043\073" +
    "\044\065\100\071\102\070\103\076\001\002\000\004\016" +
    "\135\001\002\000\034\005\074\006\077\007\066\010\064" +
    "\011\101\014\063\024\075\034\067\043\073\044\065\100" +
    "\071\102\070\103\076\001\002\000\034\005\074\006\077" +
    "\007\066\010\064\011\101\014\063\024\075\034\067\043" +
    "\073\044\065\100\071\102\070\103\076\001\002\000\034" +
    "\005\074\006\077\007\066\010\064\011\101\014\063\024" +
    "\075\034\067\043\073\044\065\100\071\102\070\103\076" +
    "\001\002\000\034\005\074\006\077\007\066\010\064\011" +
    "\101\014\063\024\075\034\067\043\073\044\065\100\071" +
    "\102\070\103\076\001\002\000\034\005\074\006\077\007" +
    "\066\010\064\011\101\014\063\024\075\034\067\043\073" +
    "\044\065\100\071\102\070\103\076\001\002\000\034\005" +
    "\074\006\077\007\066\010\064\011\101\014\063\024\075" +
    "\034\067\043\073\044\065\100\071\102\070\103\076\001" +
    "\002\000\034\005\074\006\077\007\066\010\064\011\101" +
    "\014\063\024\075\034\067\043\073\044\065\100\071\102" +
    "\070\103\076\001\002\000\034\005\074\006\077\007\066" +
    "\010\064\011\101\014\063\024\075\034\067\043\073\044" +
    "\065\100\071\102\070\103\076\001\002\000\034\005\074" +
    "\006\077\007\066\010\064\011\101\014\063\024\075\034" +
    "\067\043\073\044\065\100\071\102\070\103\076\001\002" +
    "\000\034\005\074\006\077\007\066\010\064\011\101\014" +
    "\063\024\075\034\067\043\073\044\065\100\071\102\070" +
    "\103\076\001\002\000\034\005\074\006\077\007\066\010" +
    "\064\011\101\014\063\024\075\034\067\043\073\044\065" +
    "\100\071\102\070\103\076\001\002\000\052\012\uff8f\013" +
    "\111\014\103\020\112\021\105\022\116\023\113\026\117" +
    "\027\115\030\107\031\110\032\120\033\114\035\uff8f\063" +
    "\uff8f\064\102\065\104\066\uff8f\070\uff8f\073\uff8f\001\002" +
    "\000\052\012\uff91\013\111\014\103\020\112\021\105\022" +
    "\116\023\113\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91" +
    "\033\uff91\035\uff91\063\uff91\064\uff91\065\uff91\066\uff91\070" +
    "\uff91\073\uff91\001\002\000\052\012\uff96\013\111\014\103" +
    "\020\112\021\105\022\116\023\113\026\uff96\027\uff96\030" +
    "\uff96\031\uff96\032\uff96\033\uff96\035\uff96\063\uff96\064\uff96" +
    "\065\uff96\066\uff96\070\uff96\073\uff96\001\002\000\052\012" +
    "\uff99\013\uff99\014\uff99\020\uff99\021\uff99\022\uff99\023\113" +
    "\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99\035" +
    "\uff99\063\uff99\064\uff99\065\uff99\066\uff99\070\uff99\073\uff99" +
    "\001\002\000\052\012\uff94\013\111\014\103\020\112\021" +
    "\105\022\116\023\113\026\uff94\027\uff94\030\uff94\031\uff94" +
    "\032\uff94\033\uff94\035\uff94\063\uff94\064\uff94\065\uff94\066" +
    "\uff94\070\uff94\073\uff94\001\002\000\052\012\uff95\013\111" +
    "\014\103\020\112\021\105\022\116\023\113\026\uff95\027" +
    "\uff95\030\uff95\031\uff95\032\uff95\033\uff95\035\uff95\063\uff95" +
    "\064\uff95\065\uff95\066\uff95\070\uff95\073\uff95\001\002\000" +
    "\050\012\uff9a\013\uff9a\014\uff9a\020\uff9a\021\uff9a\022\uff9a" +
    "\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\035" +
    "\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\070\uff9a\073\uff9a" +
    "\001\002\000\052\012\uff9c\013\uff9c\014\uff9c\020\uff9c\021" +
    "\uff9c\022\uff9c\023\113\026\uff9c\027\uff9c\030\uff9c\031\uff9c" +
    "\032\uff9c\033\uff9c\035\uff9c\063\uff9c\064\uff9c\065\uff9c\066" +
    "\uff9c\070\uff9c\073\uff9c\001\002\000\052\012\uff97\013\uff97" +
    "\014\uff97\020\112\021\105\022\116\023\113\026\uff97\027" +
    "\uff97\030\uff97\031\uff97\032\uff97\033\uff97\035\uff97\063\uff97" +
    "\064\uff97\065\uff97\066\uff97\070\uff97\073\uff97\001\002\000" +
    "\052\012\uff93\013\111\014\103\020\112\021\105\022\116" +
    "\023\113\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033" +
    "\uff93\035\uff93\063\uff93\064\uff93\065\uff93\066\uff93\070\uff93" +
    "\073\uff93\001\002\000\052\012\uff92\013\111\014\103\020" +
    "\112\021\105\022\116\023\113\026\uff92\027\uff92\030\uff92" +
    "\031\uff92\032\uff92\033\uff92\035\uff92\063\uff92\064\uff92\065" +
    "\uff92\066\uff92\070\uff92\073\uff92\001\002\000\036\005\074" +
    "\006\077\007\066\010\064\011\101\014\063\024\075\034" +
    "\067\043\073\044\065\072\136\100\071\102\070\103\076" +
    "\001\002\000\004\073\155\001\002\000\040\005\uffb9\006" +
    "\uffb9\007\uffb9\010\uffb9\011\uffb9\014\uffb9\017\uffb9\024\uffb9" +
    "\034\uffb9\043\uffb9\044\uffb9\072\uffb9\100\uffb9\102\uffb9\103" +
    "\uffb9\001\002\000\040\005\074\006\077\007\066\010\064" +
    "\011\101\014\063\017\151\024\075\034\067\043\073\044" +
    "\065\072\136\100\071\102\070\103\076\001\002\000\004" +
    "\017\150\001\002\000\042\013\111\014\103\020\112\021" +
    "\105\022\116\023\113\026\117\027\115\030\107\031\110" +
    "\032\120\033\114\063\121\064\102\065\104\073\143\001" +
    "\002\000\004\016\144\001\002\000\054\003\026\006\022" +
    "\036\033\037\040\040\006\041\046\042\037\045\024\046" +
    "\010\050\041\051\042\052\023\053\020\054\013\055\025" +
    "\056\011\057\044\060\032\061\021\062\054\074\052\001" +
    "\002\000\056\003\026\006\022\017\146\036\033\037\040" +
    "\040\006\041\046\042\037\045\024\046\010\050\041\051" +
    "\042\052\023\053\020\054\013\055\025\056\011\057\044" +
    "\060\032\061\021\062\054\074\052\001\002\000\040\005" +
    "\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\014\uffb8\017\uffb8" +
    "\024\uffb8\034\uffb8\043\uffb8\044\uffb8\072\uffb8\100\uffb8\102" +
    "\uffb8\103\uffb8\001\002\000\060\002\uffff\003\uffff\006\uffff" +
    "\017\uffff\036\uffff\037\uffff\040\uffff\041\uffff\042\uffff\045" +
    "\uffff\046\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054\uffff" +
    "\055\uffff\056\uffff\057\uffff\060\uffff\061\uffff\062\uffff\074" +
    "\uffff\001\002\000\060\002\uffbb\003\uffbb\006\uffbb\017\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\045\uffbb\046" +
    "\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb" +
    "\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\074\uffbb\001" +
    "\002\000\060\002\uffbc\003\uffbc\006\uffbc\017\uffbc\036\uffbc" +
    "\037\uffbc\040\uffbc\041\uffbc\042\uffbc\045\uffbc\046\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc" +
    "\057\uffbc\060\uffbc\061\uffbc\062\uffbc\074\uffbc\001\002\000" +
    "\040\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\014\uffba" +
    "\017\uffba\024\uffba\034\uffba\043\uffba\044\uffba\072\uffba\100" +
    "\uffba\102\uffba\103\uffba\001\002\000\004\017\154\001\002" +
    "\000\060\002\uffbd\003\uffbd\006\uffbd\017\uffbd\036\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\045\uffbd\046\uffbd\050\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057" +
    "\uffbd\060\uffbd\061\uffbd\062\uffbd\074\uffbd\001\002\000\004" +
    "\016\156\001\002\000\054\003\026\006\022\036\033\037" +
    "\040\040\006\041\046\042\037\045\024\046\010\050\041" +
    "\051\042\052\023\053\020\054\013\055\025\056\011\057" +
    "\044\060\032\061\021\062\054\074\052\001\002\000\056" +
    "\003\026\006\022\017\160\036\033\037\040\040\006\041" +
    "\046\042\037\045\024\046\010\050\041\051\042\052\023" +
    "\053\020\054\013\055\025\056\011\057\044\060\032\061" +
    "\021\062\054\074\052\001\002\000\004\017\uffb7\001\002" +
    "\000\052\012\uff9b\013\uff9b\014\uff9b\020\uff9b\021\uff9b\022" +
    "\uff9b\023\113\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b" +
    "\033\uff9b\035\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\070" +
    "\uff9b\073\uff9b\001\002\000\052\012\uff8d\013\111\014\103" +
    "\020\112\021\105\022\116\023\113\026\117\027\115\030" +
    "\107\031\110\032\120\033\114\035\uff8d\063\uff8d\064\uff8d" +
    "\065\uff8d\066\uff8d\070\uff8d\073\uff8d\001\002\000\052\012" +
    "\uff98\013\uff98\014\uff98\020\112\021\105\022\116\023\113" +
    "\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98\035" +
    "\uff98\063\uff98\064\uff98\065\uff98\066\uff98\070\uff98\073\uff98" +
    "\001\002\000\052\012\uff8e\013\111\014\103\020\112\021" +
    "\105\022\116\023\113\026\117\027\115\030\107\031\110" +
    "\032\120\033\114\035\uff8e\063\uff8e\064\uff8e\065\104\066" +
    "\uff8e\070\uff8e\073\uff8e\001\002\000\034\005\074\006\077" +
    "\007\066\010\064\011\101\014\063\024\075\034\067\043" +
    "\073\044\065\100\071\102\070\103\076\001\002\000\004" +
    "\101\167\001\002\000\004\034\170\001\002\000\034\005" +
    "\074\006\077\007\066\010\064\011\101\014\063\024\075" +
    "\034\067\043\073\044\065\100\071\102\070\103\076\001" +
    "\002\000\042\013\111\014\103\020\112\021\105\022\116" +
    "\023\113\026\117\027\115\030\107\031\110\032\120\033" +
    "\114\035\172\063\121\064\102\065\104\001\002\000\052" +
    "\012\uffd3\013\uffd3\014\uffd3\020\uffd3\021\uffd3\022\uffd3\023" +
    "\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\035\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\070\uffd3\073" +
    "\uffd3\001\002\000\042\013\111\014\103\020\112\021\105" +
    "\022\116\023\113\026\117\027\115\030\107\031\110\032" +
    "\120\033\114\063\121\064\102\065\104\070\174\001\002" +
    "\000\054\012\uff85\013\uff85\014\uff85\020\uff85\021\uff85\022" +
    "\uff85\023\uff85\026\uff85\027\uff85\030\uff85\031\uff85\032\uff85" +
    "\033\uff85\035\uff85\063\uff85\064\uff85\065\uff85\066\uff85\067" +
    "\175\070\uff85\073\uff85\001\002\000\034\005\074\006\077" +
    "\007\066\010\064\011\101\014\063\024\075\034\067\043" +
    "\073\044\065\100\071\102\070\103\076\001\002\000\042" +
    "\013\111\014\103\020\112\021\105\022\116\023\113\026" +
    "\117\027\115\030\107\031\110\032\120\033\114\063\121" +
    "\064\102\065\104\070\177\001\002\000\052\012\uff84\013" +
    "\uff84\014\uff84\020\uff84\021\uff84\022\uff84\023\uff84\026\uff84" +
    "\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84\035\uff84\063" +
    "\uff84\064\uff84\065\uff84\066\uff84\070\uff84\073\uff84\001\002" +
    "\000\034\005\074\006\077\007\066\010\064\011\101\014" +
    "\063\024\075\034\067\043\073\044\065\100\071\102\070" +
    "\103\076\001\002\000\042\013\111\014\103\020\112\021" +
    "\105\022\116\023\113\026\117\027\115\030\107\031\110" +
    "\032\120\033\114\035\202\063\121\064\102\065\104\001" +
    "\002\000\052\012\uff81\013\uff81\014\uff81\020\uff81\021\uff81" +
    "\022\uff81\023\uff81\026\uff81\027\uff81\030\uff81\031\uff81\032" +
    "\uff81\033\uff81\035\uff81\063\uff81\064\uff81\065\uff81\066\uff81" +
    "\070\uff81\073\uff81\001\002\000\052\012\uff90\013\111\014" +
    "\103\020\112\021\105\022\116\023\113\026\117\027\115" +
    "\030\107\031\110\032\120\033\114\035\uff90\063\uff90\064" +
    "\uff90\065\uff90\066\uff90\070\uff90\073\uff90\001\002\000\034" +
    "\005\074\006\077\007\066\010\064\011\101\014\063\024" +
    "\075\034\067\043\073\044\065\100\071\102\070\103\076" +
    "\001\002\000\042\013\111\014\103\020\112\021\105\022" +
    "\116\023\113\026\117\027\115\030\107\031\110\032\120" +
    "\033\114\035\206\063\121\064\102\065\104\001\002\000" +
    "\052\012\uff83\013\uff83\014\uff83\020\uff83\021\uff83\022\uff83" +
    "\023\uff83\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033" +
    "\uff83\035\uff83\063\uff83\064\uff83\065\uff83\066\uff83\070\uff83" +
    "\073\uff83\001\002\000\034\005\074\006\077\007\066\010" +
    "\064\011\101\014\063\024\075\034\067\043\073\044\065" +
    "\100\071\102\070\103\076\001\002\000\042\013\111\014" +
    "\103\020\112\021\105\022\116\023\113\026\117\027\115" +
    "\030\107\031\110\032\120\033\114\035\211\063\121\064" +
    "\102\065\104\001\002\000\052\012\uff82\013\uff82\014\uff82" +
    "\020\uff82\021\uff82\022\uff82\023\uff82\026\uff82\027\uff82\030" +
    "\uff82\031\uff82\032\uff82\033\uff82\035\uff82\063\uff82\064\uff82" +
    "\065\uff82\066\uff82\070\uff82\073\uff82\001\002\000\004\035" +
    "\215\001\002\000\042\013\111\014\103\020\112\021\105" +
    "\022\116\023\113\026\117\027\115\030\107\031\110\032" +
    "\120\033\114\035\214\063\121\064\102\065\104\001\002" +
    "\000\052\012\uff7f\013\uff7f\014\uff7f\020\uff7f\021\uff7f\022" +
    "\uff7f\023\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f" +
    "\033\uff7f\035\uff7f\063\uff7f\064\uff7f\065\uff7f\066\uff7f\070" +
    "\uff7f\073\uff7f\001\002\000\034\005\074\006\077\007\066" +
    "\010\064\011\101\014\063\024\075\034\067\043\073\044" +
    "\065\100\071\102\070\103\076\001\002\000\052\012\uff9e" +
    "\013\111\014\103\020\112\021\105\022\116\023\113\026" +
    "\117\027\115\030\107\031\110\032\120\033\114\035\uff9e" +
    "\063\121\064\102\065\104\066\uff9e\070\uff9e\073\uff9e\001" +
    "\002\000\052\012\uff9d\013\uff9d\014\uff9d\020\uff9d\021\uff9d" +
    "\022\uff9d\023\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032" +
    "\uff9d\033\uff9d\035\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d" +
    "\070\uff9d\073\uff9d\001\002\000\004\034\221\001\002\000" +
    "\020\035\223\037\040\040\006\041\046\045\024\046\010" +
    "\050\041\001\002\000\004\006\237\001\002\000\004\016" +
    "\234\001\002\000\006\035\226\066\225\001\002\000\016" +
    "\037\040\040\006\041\046\045\024\046\010\050\041\001" +
    "\002\000\004\016\227\001\002\000\054\003\026\006\022" +
    "\036\033\037\040\040\006\041\046\042\037\045\024\046" +
    "\010\050\041\051\042\052\023\053\020\054\013\055\025" +
    "\056\011\057\044\060\032\061\021\062\054\074\052\001" +
    "\002\000\056\003\026\006\022\017\231\036\033\037\040" +
    "\040\006\041\046\042\037\045\024\046\010\050\041\051" +
    "\042\052\023\053\020\054\013\055\025\056\011\057\044" +
    "\060\032\061\021\062\054\074\052\001\002\000\060\002" +
    "\uffd1\003\uffd1\006\uffd1\017\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\042\uffd1\045\uffd1\046\uffd1\050\uffd1\051\uffd1\052" +
    "\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1" +
    "\061\uffd1\062\uffd1\074\uffd1\001\002\000\004\006\233\001" +
    "\002\000\006\035\uffd0\066\uffd0\001\002\000\054\003\026" +
    "\006\022\036\033\037\040\040\006\041\046\042\037\045" +
    "\024\046\010\050\041\051\042\052\023\053\020\054\013" +
    "\055\025\056\011\057\044\060\032\061\021\062\054\074" +
    "\052\001\002\000\056\003\026\006\022\017\236\036\033" +
    "\037\040\040\006\041\046\042\037\045\024\046\010\050" +
    "\041\051\042\052\023\053\020\054\013\055\025\056\011" +
    "\057\044\060\032\061\021\062\054\074\052\001\002\000" +
    "\060\002\uffd2\003\uffd2\006\uffd2\017\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\045\uffd2\046\uffd2\050\uffd2\051" +
    "\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2" +
    "\060\uffd2\061\uffd2\062\uffd2\074\uffd2\001\002\000\006\035" +
    "\uffcf\066\uffcf\001\002\000\016\037\040\040\006\041\046" +
    "\045\024\046\010\050\041\001\002\000\004\030\242\001" +
    "\002\000\004\006\243\001\002\000\004\015\244\001\002" +
    "\000\004\075\245\001\002\000\004\074\246\001\002\000" +
    "\004\034\247\001\002\000\004\035\250\001\002\000\004" +
    "\012\251\001\002\000\060\002\uffd6\003\uffd6\006\uffd6\017" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\045\uffd6" +
    "\046\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055" +
    "\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\074\uffd6" +
    "\001\002\000\004\006\253\001\002\000\006\015\276\067" +
    "\275\001\002\000\034\005\074\006\077\007\066\010\064" +
    "\011\101\014\063\024\075\034\067\043\073\044\065\100" +
    "\071\102\070\103\076\001\002\000\042\012\256\013\111" +
    "\014\103\020\112\021\105\022\116\023\113\026\117\027" +
    "\115\030\107\031\110\032\120\033\114\063\121\064\102" +
    "\065\104\001\002\000\004\006\257\001\002\000\010\013" +
    "\270\014\271\015\267\001\002\000\004\035\uffa9\001\002" +
    "\000\004\035\uffaa\001\002\000\004\035\263\001\002\000" +
    "\004\016\264\001\002\000\054\003\026\006\022\036\033" +
    "\037\040\040\006\041\046\042\037\045\024\046\010\050" +
    "\041\051\042\052\023\053\020\054\013\055\025\056\011" +
    "\057\044\060\032\061\021\062\054\074\052\001\002\000" +
    "\056\003\026\006\022\017\266\036\033\037\040\040\006" +
    "\041\046\042\037\045\024\046\010\050\041\051\042\052" +
    "\023\053\020\054\013\055\025\056\011\057\044\060\032" +
    "\061\021\062\054\074\052\001\002\000\060\002\uffac\003" +
    "\uffac\006\uffac\017\uffac\036\uffac\037\uffac\040\uffac\041\uffac" +
    "\042\uffac\045\uffac\046\uffac\050\uffac\051\uffac\052\uffac\053" +
    "\uffac\054\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac" +
    "\062\uffac\074\uffac\001\002\000\034\005\074\006\077\007" +
    "\066\010\064\011\101\014\063\024\075\034\067\043\073" +
    "\044\065\100\071\102\070\103\076\001\002\000\004\013" +
    "\273\001\002\000\004\014\272\001\002\000\004\035\uffa7" +
    "\001\002\000\004\035\uffa8\001\002\000\042\013\111\014" +
    "\103\020\112\021\105\022\116\023\113\026\117\027\115" +
    "\030\107\031\110\032\120\033\114\035\uffab\063\121\064" +
    "\102\065\104\001\002\000\034\005\074\006\077\007\066" +
    "\010\064\011\101\014\063\024\075\034\067\043\073\044" +
    "\065\100\071\102\070\103\076\001\002\000\034\005\074" +
    "\006\300\007\066\010\064\011\101\014\063\024\075\034" +
    "\067\043\073\044\065\100\071\102\070\103\076\001\002" +
    "\000\004\012\330\001\002\000\050\012\uff86\013\uff86\014" +
    "\uff86\020\uff86\021\uff86\022\uff86\023\uff86\026\uff86\027\uff86" +
    "\030\uff86\031\uff86\032\uff86\033\uff86\034\305\063\uff86\064" +
    "\uff86\065\uff86\067\165\071\306\001\002\000\004\012\304" +
    "\001\002\000\042\012\303\013\111\014\103\020\112\021" +
    "\105\022\116\023\113\026\117\027\115\030\107\031\110" +
    "\032\120\033\114\063\121\064\102\065\104\001\002\000" +
    "\110\002\uffc4\003\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4" +
    "\011\uffc4\014\uffc4\017\uffc4\024\uffc4\034\uffc4\036\uffc4\037" +
    "\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4" +
    "\046\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055" +
    "\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\074\uffc4" +
    "\100\uffc4\102\uffc4\103\uffc4\001\002\000\110\002\uffc3\003" +
    "\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\014\uffc3" +
    "\017\uffc3\024\uffc3\034\uffc3\036\uffc3\037\uffc3\040\uffc3\041" +
    "\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\050\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057" +
    "\uffc3\060\uffc3\061\uffc3\062\uffc3\074\uffc3\100\uffc3\102\uffc3" +
    "\103\uffc3\001\002\000\036\005\074\006\321\007\066\010" +
    "\064\011\101\014\063\024\075\034\067\035\320\043\073" +
    "\044\065\100\071\102\070\103\076\001\002\000\010\076" +
    "\307\077\310\101\167\001\002\000\004\034\314\001\002" +
    "\000\004\034\311\001\002\000\034\005\074\006\077\007" +
    "\066\010\064\011\101\014\063\024\075\034\067\043\073" +
    "\044\065\100\071\102\070\103\076\001\002\000\042\013" +
    "\111\014\103\020\112\021\105\022\116\023\113\026\117" +
    "\027\115\030\107\031\110\032\120\033\114\035\313\063" +
    "\121\064\102\065\104\001\002\000\004\012\uffd4\001\002" +
    "\000\034\005\074\006\077\007\066\010\064\011\101\014" +
    "\063\024\075\034\067\043\073\044\065\100\071\102\070" +
    "\103\076\001\002\000\042\013\111\014\103\020\112\021" +
    "\105\022\116\023\113\026\117\027\115\030\107\031\110" +
    "\032\120\033\114\035\316\063\121\064\102\065\104\001" +
    "\002\000\004\012\uffd5\001\002\000\006\035\uffcd\066\uffcd" +
    "\001\002\000\012\012\uffca\035\uffca\066\uffca\070\uffca\001" +
    "\002\000\056\012\uff86\013\uff86\014\uff86\020\uff86\021\uff86" +
    "\022\uff86\023\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032" +
    "\uff86\033\uff86\034\305\035\uff86\063\uff86\064\uff86\065\uff86" +
    "\066\uff86\067\165\070\uff86\071\166\001\002\000\006\035" +
    "\uffcb\066\uffcb\001\002\000\006\035\326\066\325\001\002" +
    "\000\044\013\111\014\103\020\112\021\105\022\116\023" +
    "\113\026\117\027\115\030\107\031\110\032\120\033\114" +
    "\035\uffcc\063\121\064\102\065\104\066\uffcc\001\002\000" +
    "\034\005\074\006\321\007\066\010\064\011\101\014\063" +
    "\024\075\034\067\043\073\044\065\100\071\102\070\103" +
    "\076\001\002\000\012\012\uffc9\035\uffc9\066\uffc9\070\uffc9" +
    "\001\002\000\006\035\uffce\066\uffce\001\002\000\110\002" +
    "\uffc0\003\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0" +
    "\014\uffc0\017\uffc0\024\uffc0\034\uffc0\036\uffc0\037\uffc0\040" +
    "\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0" +
    "\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\074\uffc0\100\uffc0" +
    "\102\uffc0\103\uffc0\001\002\000\042\013\111\014\103\020" +
    "\112\021\105\022\116\023\113\026\117\027\115\030\107" +
    "\031\110\032\120\033\114\063\121\064\102\065\104\070" +
    "\332\001\002\000\006\015\333\067\334\001\002\000\034" +
    "\005\074\006\341\007\066\010\064\011\101\014\063\024" +
    "\075\034\067\043\073\044\065\100\071\102\070\103\076" +
    "\001\002\000\034\005\074\006\077\007\066\010\064\011" +
    "\101\014\063\024\075\034\067\043\073\044\065\100\071" +
    "\102\070\103\076\001\002\000\042\013\111\014\103\020" +
    "\112\021\105\022\116\023\113\026\117\027\115\030\107" +
    "\031\110\032\120\033\114\063\121\064\102\065\104\070" +
    "\336\001\002\000\004\015\337\001\002\000\034\005\074" +
    "\006\341\007\066\010\064\011\101\014\063\024\075\034" +
    "\067\043\073\044\065\100\071\102\070\103\076\001\002" +
    "\000\004\012\344\001\002\000\046\012\uff86\013\uff86\014" +
    "\uff86\020\uff86\021\uff86\022\uff86\023\uff86\026\uff86\027\uff86" +
    "\030\uff86\031\uff86\032\uff86\033\uff86\063\uff86\064\uff86\065" +
    "\uff86\067\165\071\306\001\002\000\042\012\343\013\111" +
    "\014\103\020\112\021\105\022\116\023\113\026\117\027" +
    "\115\030\107\031\110\032\120\033\114\063\121\064\102" +
    "\065\104\001\002\000\110\002\uffc1\003\uffc1\005\uffc1\006" +
    "\uffc1\007\uffc1\010\uffc1\011\uffc1\014\uffc1\017\uffc1\024\uffc1" +
    "\034\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\046\uffc1\050\uffc1\051\uffc1\052\uffc1" +
    "\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061" +
    "\uffc1\062\uffc1\074\uffc1\100\uffc1\102\uffc1\103\uffc1\001\002" +
    "\000\110\002\uffbe\003\uffbe\005\uffbe\006\uffbe\007\uffbe\010" +
    "\uffbe\011\uffbe\014\uffbe\017\uffbe\024\uffbe\034\uffbe\036\uffbe" +
    "\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045" +
    "\uffbe\046\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe" +
    "\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\074" +
    "\uffbe\100\uffbe\102\uffbe\103\uffbe\001\002\000\004\012\350" +
    "\001\002\000\042\012\347\013\111\014\103\020\112\021" +
    "\105\022\116\023\113\026\117\027\115\030\107\031\110" +
    "\032\120\033\114\063\121\064\102\065\104\001\002\000" +
    "\110\002\uffc2\003\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\014\uffc2\017\uffc2\024\uffc2\034\uffc2\036\uffc2\037" +
    "\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2" +
    "\046\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055" +
    "\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\074\uffc2" +
    "\100\uffc2\102\uffc2\103\uffc2\001\002\000\110\002\uffbf\003" +
    "\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\014\uffbf" +
    "\017\uffbf\024\uffbf\034\uffbf\036\uffbf\037\uffbf\040\uffbf\041" +
    "\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\050\uffbf" +
    "\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057" +
    "\uffbf\060\uffbf\061\uffbf\062\uffbf\074\uffbf\100\uffbf\102\uffbf" +
    "\103\uffbf\001\002\000\034\005\074\006\077\007\066\010" +
    "\064\011\101\014\063\024\075\034\067\043\073\044\065" +
    "\100\071\102\070\103\076\001\002\000\042\013\111\014" +
    "\103\020\112\021\105\022\116\023\113\026\117\027\115" +
    "\030\107\031\110\032\120\033\114\035\353\063\121\064" +
    "\102\065\104\001\002\000\004\016\354\001\002\000\054" +
    "\003\026\006\022\036\033\037\040\040\006\041\046\042" +
    "\037\045\024\046\010\050\041\051\042\052\023\053\020" +
    "\054\013\055\025\056\011\057\044\060\032\061\021\062" +
    "\054\074\052\001\002\000\056\003\026\006\022\017\356" +
    "\036\033\037\040\040\006\041\046\042\037\045\024\046" +
    "\010\050\041\051\042\052\023\053\020\054\013\055\025" +
    "\056\011\057\044\060\032\061\021\062\054\074\052\001" +
    "\002\000\062\002\uffb6\003\uffb6\006\uffb6\017\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\042\uffb6\045\uffb6\046\uffb6\047" +
    "\357\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6" +
    "\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\074\uffb6\001" +
    "\002\000\006\016\376\042\365\001\002\000\062\002\uffb5" +
    "\003\uffb5\006\uffb5\017\uffb5\036\uffb5\037\uffb5\040\uffb5\041" +
    "\uffb5\042\uffb5\045\uffb5\046\uffb5\047\362\050\uffb5\051\uffb5" +
    "\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060" +
    "\uffb5\061\uffb5\062\uffb5\074\uffb5\001\002\000\062\002\uffb0" +
    "\003\uffb0\006\uffb0\017\uffb0\036\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0" +
    "\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060" +
    "\uffb0\061\uffb0\062\uffb0\074\uffb0\001\002\000\006\016\364" +
    "\042\365\001\002\000\062\002\uffb1\003\uffb1\006\uffb1\017" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\045\uffb1" +
    "\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054" +
    "\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1" +
    "\074\uffb1\001\002\000\054\003\026\006\022\036\033\037" +
    "\040\040\006\041\046\042\037\045\024\046\010\050\041" +
    "\051\042\052\023\053\020\054\013\055\025\056\011\057" +
    "\044\060\032\061\021\062\054\074\052\001\002\000\004" +
    "\034\366\001\002\000\034\005\074\006\077\007\066\010" +
    "\064\011\101\014\063\024\075\034\067\043\073\044\065" +
    "\100\071\102\070\103\076\001\002\000\042\013\111\014" +
    "\103\020\112\021\105\022\116\023\113\026\117\027\115" +
    "\030\107\031\110\032\120\033\114\035\370\063\121\064" +
    "\102\065\104\001\002\000\004\016\371\001\002\000\054" +
    "\003\026\006\022\036\033\037\040\040\006\041\046\042" +
    "\037\045\024\046\010\050\041\051\042\052\023\053\020" +
    "\054\013\055\025\056\011\057\044\060\032\061\021\062" +
    "\054\074\052\001\002\000\056\003\026\006\022\017\373" +
    "\036\033\037\040\040\006\041\046\042\037\045\024\046" +
    "\010\050\041\051\042\052\023\053\020\054\013\055\025" +
    "\056\011\057\044\060\032\061\021\062\054\074\052\001" +
    "\002\000\062\002\uffb2\003\uffb2\006\uffb2\017\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\042\uffb2\045\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2" +
    "\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\074\uffb2\001" +
    "\002\000\056\003\026\006\022\017\375\036\033\037\040" +
    "\040\006\041\046\042\037\045\024\046\010\050\041\051" +
    "\042\052\023\053\020\054\013\055\025\056\011\057\044" +
    "\060\032\061\021\062\054\074\052\001\002\000\060\002" +
    "\uffb4\003\uffb4\006\uffb4\017\uffb4\036\uffb4\037\uffb4\040\uffb4" +
    "\041\uffb4\042\uffb4\045\uffb4\046\uffb4\050\uffb4\051\uffb4\052" +
    "\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4" +
    "\061\uffb4\062\uffb4\074\uffb4\001\002\000\054\003\026\006" +
    "\022\036\033\037\040\040\006\041\046\042\037\045\024" +
    "\046\010\050\041\051\042\052\023\053\020\054\013\055" +
    "\025\056\011\057\044\060\032\061\021\062\054\074\052" +
    "\001\002\000\056\003\026\006\022\017\u0100\036\033\037" +
    "\040\040\006\041\046\042\037\045\024\046\010\050\041" +
    "\051\042\052\023\053\020\054\013\055\025\056\011\057" +
    "\044\060\032\061\021\062\054\074\052\001\002\000\060" +
    "\002\uffb3\003\uffb3\006\uffb3\017\uffb3\036\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\045\uffb3\046\uffb3\050\uffb3\051\uffb3" +
    "\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060" +
    "\uffb3\061\uffb3\062\uffb3\074\uffb3\001\002\000\034\005\074" +
    "\006\321\007\066\010\064\011\101\014\063\024\075\034" +
    "\067\043\073\044\065\100\071\102\070\103\076\001\002" +
    "\000\004\035\u0106\001\002\000\042\013\111\014\103\020" +
    "\112\021\105\022\116\023\113\026\117\027\115\030\107" +
    "\031\110\032\120\033\114\035\u0104\063\121\064\102\065" +
    "\104\001\002\000\004\012\u0105\001\002\000\060\002\uffe6" +
    "\003\uffe6\006\uffe6\017\uffe6\036\uffe6\037\uffe6\040\uffe6\041" +
    "\uffe6\042\uffe6\045\uffe6\046\uffe6\050\uffe6\051\uffe6\052\uffe6" +
    "\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061" +
    "\uffe6\062\uffe6\074\uffe6\001\002\000\004\012\u0107\001\002" +
    "\000\060\002\uffe5\003\uffe5\006\uffe5\017\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\041\uffe5\042\uffe5\045\uffe5\046\uffe5\050\uffe5" +
    "\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057" +
    "\uffe5\060\uffe5\061\uffe5\062\uffe5\074\uffe5\001\002\000\004" +
    "\034\u0109\001\002\000\004\035\u010a\001\002\000\004\012" +
    "\u010b\001\002\000\060\002\uffe9\003\uffe9\006\uffe9\017\uffe9" +
    "\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\045\uffe9\046" +
    "\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9" +
    "\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\074\uffe9\001" +
    "\002\000\004\002\001\001\002\000\060\002\uffea\003\uffea" +
    "\006\uffea\017\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042" +
    "\uffea\045\uffea\046\uffea\050\uffea\051\uffea\052\uffea\053\uffea" +
    "\054\uffea\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea\062" +
    "\uffea\074\uffea\001\002\000\060\002\uffe7\003\uffe7\006\uffe7" +
    "\017\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\045" +
    "\uffe7\046\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7" +
    "\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\074" +
    "\uffe7\001\002\000\004\013\u0114\001\002\000\004\014\u0112" +
    "\001\002\000\006\076\307\077\310\001\002\000\004\012" +
    "\u0113\001\002\000\060\002\uffa5\003\uffa5\006\uffa5\017\uffa5" +
    "\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\045\uffa5\046" +
    "\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5" +
    "\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\074\uffa5\001" +
    "\002\000\004\012\u0115\001\002\000\060\002\uffa6\003\uffa6" +
    "\006\uffa6\017\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042" +
    "\uffa6\045\uffa6\046\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6" +
    "\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062" +
    "\uffa6\074\uffa6\001\002\000\060\002\uffc7\003\uffc7\006\uffc7" +
    "\017\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\045" +
    "\uffc7\046\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7" +
    "\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\074" +
    "\uffc7\001\002\000\004\012\u011a\001\002\000\042\012\u0119" +
    "\013\111\014\103\020\112\021\105\022\116\023\113\026" +
    "\117\027\115\030\107\031\110\032\120\033\114\063\121" +
    "\064\102\065\104\001\002\000\060\002\uffc8\003\uffc8\006" +
    "\uffc8\017\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\045\uffc8\046\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054" +
    "\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8" +
    "\074\uffc8\001\002\000\060\002\uffc6\003\uffc6\006\uffc6\017" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\045\uffc6" +
    "\046\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055" +
    "\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\074\uffc6" +
    "\001\002\000\034\005\074\006\077\007\066\010\064\011" +
    "\101\014\063\024\075\034\067\043\073\044\065\100\071" +
    "\102\070\103\076\001\002\000\042\013\111\014\103\020" +
    "\112\021\105\022\116\023\113\026\117\027\115\030\107" +
    "\031\110\032\120\033\114\035\u011d\063\121\064\102\065" +
    "\104\001\002\000\004\016\u011e\001\002\000\054\003\026" +
    "\006\022\036\033\037\040\040\006\041\046\042\037\045" +
    "\024\046\010\050\041\051\042\052\023\053\020\054\013" +
    "\055\025\056\011\057\044\060\032\061\021\062\054\074" +
    "\052\001\002\000\056\003\026\006\022\017\u0120\036\033" +
    "\037\040\040\006\041\046\042\037\045\024\046\010\050" +
    "\041\051\042\052\023\053\020\054\013\055\025\056\011" +
    "\057\044\060\032\061\021\062\054\074\052\001\002\000" +
    "\060\002\uffaf\003\uffaf\006\uffaf\017\uffaf\036\uffaf\037\uffaf" +
    "\040\uffaf\041\uffaf\042\uffaf\045\uffaf\046\uffaf\050\uffaf\051" +
    "\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf" +
    "\060\uffaf\061\uffaf\062\uffaf\074\uffaf\001\002\000\004\025" +
    "\u0122\001\002\000\016\037\040\040\006\041\046\045\024" +
    "\046\010\050\041\001\002\000\010\012\u0126\015\u0124\067" +
    "\u0125\001\002\000\034\005\074\006\300\007\066\010\064" +
    "\011\101\014\063\024\075\034\067\043\073\044\065\100" +
    "\071\102\070\103\076\001\002\000\004\070\u0127\001\002" +
    "\000\060\002\uffe2\003\uffe2\006\uffe2\017\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\041\uffe2\042\uffe2\045\uffe2\046\uffe2\050\uffe2" +
    "\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057" +
    "\uffe2\060\uffe2\061\uffe2\062\uffe2\074\uffe2\001\002\000\006" +
    "\015\u0129\067\u0128\001\002\000\004\070\u0133\001\002\000" +
    "\004\067\u012a\001\002\000\034\005\074\006\321\007\066" +
    "\010\064\011\101\014\063\024\075\034\067\043\073\044" +
    "\065\100\071\102\070\103\076\001\002\000\006\066\uffd9" +
    "\070\uffd9\001\002\000\006\066\uffd7\070\uffd7\001\002\000" +
    "\006\066\u012f\070\u0130\001\002\000\044\013\111\014\103" +
    "\020\112\021\105\022\116\023\113\026\117\027\115\030" +
    "\107\031\110\032\120\033\114\063\121\064\102\065\104" +
    "\066\uffd8\070\uffd8\001\002\000\034\005\074\006\321\007" +
    "\066\010\064\011\101\014\063\024\075\034\067\043\073" +
    "\044\065\100\071\102\070\103\076\001\002\000\004\012" +
    "\u0131\001\002\000\060\002\uffdf\003\uffdf\006\uffdf\017\uffdf" +
    "\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\045\uffdf\046" +
    "\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf" +
    "\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\074\uffdf\001" +
    "\002\000\006\066\uffda\070\uffda\001\002\000\004\015\u0134" +
    "\001\002\000\004\067\u0135\001\002\000\004\067\u0136\001" +
    "\002\000\034\005\074\006\321\007\066\010\064\011\101" +
    "\014\063\024\075\034\067\043\073\044\065\100\071\102" +
    "\070\103\076\001\002\000\006\066\u0138\070\u0139\001\002" +
    "\000\004\067\u013b\001\002\000\004\012\u013a\001\002\000" +
    "\060\002\uffde\003\uffde\006\uffde\017\uffde\036\uffde\037\uffde" +
    "\040\uffde\041\uffde\042\uffde\045\uffde\046\uffde\050\uffde\051" +
    "\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde" +
    "\060\uffde\061\uffde\062\uffde\074\uffde\001\002\000\034\005" +
    "\074\006\321\007\066\010\064\011\101\014\063\024\075" +
    "\034\067\043\073\044\065\100\071\102\070\103\076\001" +
    "\002\000\006\066\u012f\070\u013d\001\002\000\006\066\uffdc" +
    "\070\uffdc\001\002\000\006\066\u012f\070\u013f\001\002\000" +
    "\006\066\uffdb\070\uffdb\001\002\000\004\012\u0145\001\002" +
    "\000\004\012\u0144\001\002\000\042\012\u0143\013\111\014" +
    "\103\020\112\021\105\022\116\023\113\026\117\027\115" +
    "\030\107\031\110\032\120\033\114\063\121\064\102\065" +
    "\104\001\002\000\060\002\uffe1\003\uffe1\006\uffe1\017\uffe1" +
    "\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\045\uffe1\046" +
    "\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1" +
    "\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\074\uffe1\001" +
    "\002\000\060\002\uffe0\003\uffe0\006\uffe0\017\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\042\uffe0\045\uffe0\046\uffe0\050" +
    "\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0" +
    "\057\uffe0\060\uffe0\061\uffe0\062\uffe0\074\uffe0\001\002\000" +
    "\060\002\uffdd\003\uffdd\006\uffdd\017\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\041\uffdd\042\uffdd\045\uffdd\046\uffdd\050\uffdd\051" +
    "\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd" +
    "\060\uffdd\061\uffdd\062\uffdd\074\uffdd\001\002\000\060\002" +
    "\uffe8\003\uffe8\006\uffe8\017\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\045\uffe8\046\uffe8\050\uffe8\051\uffe8\052" +
    "\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8" +
    "\061\uffe8\062\uffe8\074\uffe8\001\002\000\054\003\026\006" +
    "\022\036\033\037\040\040\006\041\046\042\037\045\024" +
    "\046\010\050\041\051\042\052\023\053\020\054\013\055" +
    "\025\056\011\057\044\060\032\061\021\062\054\074\052" +
    "\001\002\000\056\003\026\006\022\017\u0149\036\033\037" +
    "\040\040\006\041\046\042\037\045\024\046\010\050\041" +
    "\051\042\052\023\053\020\054\013\055\025\056\011\057" +
    "\044\060\032\061\021\062\054\074\052\001\002\000\004" +
    "\053\u014a\001\002\000\004\034\u014b\001\002\000\034\005" +
    "\074\006\077\007\066\010\064\011\101\014\063\024\075" +
    "\034\067\043\073\044\065\100\071\102\070\103\076\001" +
    "\002\000\042\013\111\014\103\020\112\021\105\022\116" +
    "\023\113\026\117\027\115\030\107\031\110\032\120\033" +
    "\114\035\u014d\063\121\064\102\065\104\001\002\000\062" +
    "\002\uffae\003\uffae\006\uffae\012\u014e\017\uffae\036\uffae\037" +
    "\uffae\040\uffae\041\uffae\042\uffae\045\uffae\046\uffae\050\uffae" +
    "\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057" +
    "\uffae\060\uffae\061\uffae\062\uffae\074\uffae\001\002\000\060" +
    "\002\uffad\003\uffad\006\uffad\017\uffad\036\uffad\037\uffad\040" +
    "\uffad\041\uffad\042\uffad\045\uffad\046\uffad\050\uffad\051\uffad" +
    "\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060" +
    "\uffad\061\uffad\062\uffad\074\uffad\001\002\000\060\002\uffec" +
    "\003\uffec\006\uffec\017\uffec\036\uffec\037\uffec\040\uffec\041" +
    "\uffec\042\uffec\045\uffec\046\uffec\050\uffec\051\uffec\052\uffec" +
    "\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061" +
    "\uffec\062\uffec\074\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u014d\000\062\002\026\003\047\004\046\005\044\006" +
    "\035\007\042\012\034\013\027\014\013\015\014\017\052" +
    "\021\004\022\011\023\030\024\006\032\050\033\057\035" +
    "\003\040\015\041\016\043\054\052\055\054\033\055\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\u0117\035\u0116\042\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\004\146" +
    "\005\044\006\035\007\042\012\034\013\027\014\013\015" +
    "\014\017\052\021\004\022\011\023\030\024\006\032\050" +
    "\033\057\035\003\040\015\041\016\043\054\052\055\054" +
    "\033\055\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\077\042\071\001\001\000\006\020" +
    "\216\042\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\211\020\212\042\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\202\042" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\163\042\071\001" +
    "\001\000\006\020\162\042\071\001\001\000\006\020\161" +
    "\042\071\001\001\000\006\020\160\042\071\001\001\000" +
    "\002\001\001\000\006\020\133\042\071\001\001\000\006" +
    "\020\132\042\071\001\001\000\006\020\131\042\071\001" +
    "\001\000\006\020\130\042\071\001\001\000\006\020\127" +
    "\042\071\001\001\000\006\020\126\042\071\001\001\000" +
    "\006\020\125\042\071\001\001\000\006\020\124\042\071" +
    "\001\001\000\006\020\123\042\071\001\001\000\006\020" +
    "\122\042\071\001\001\000\006\020\121\042\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\020\141\042\071\044\137" +
    "\045\136\046\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\020\141\042\071\045\151\046\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\003\144\004\046\005\044\006\035\007\042\012\034" +
    "\013\027\014\013\015\014\017\052\021\004\022\011\023" +
    "\030\024\006\032\050\033\057\035\003\040\015\041\016" +
    "\043\054\052\055\054\033\055\056\001\001\000\056\004" +
    "\146\005\044\006\035\007\042\012\034\013\027\014\013" +
    "\015\014\017\052\021\004\022\011\023\030\024\006\032" +
    "\050\033\057\035\003\040\015\041\016\043\054\052\055" +
    "\054\033\055\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\003\156\004\046\005\044\006\035\007\042\012\034" +
    "\013\027\014\013\015\014\017\052\021\004\022\011\023" +
    "\030\024\006\032\050\033\057\035\003\040\015\041\016" +
    "\043\054\052\055\054\033\055\056\001\001\000\056\004" +
    "\146\005\044\006\035\007\042\012\034\013\027\014\013" +
    "\015\014\017\052\021\004\022\011\023\030\024\006\032" +
    "\050\033\057\035\003\040\015\041\016\043\054\052\055" +
    "\054\033\055\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\172\042\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\170\042\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\175\042\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\200\042\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\204\042\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\207\042\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\215\042\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\221\034\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\231\001\001\000\002\001" +
    "\001\000\060\003\227\004\046\005\044\006\035\007\042" +
    "\012\034\013\027\014\013\015\014\017\052\021\004\022" +
    "\011\023\030\024\006\032\050\033\057\035\003\040\015" +
    "\041\016\043\054\052\055\054\033\055\056\001\001\000" +
    "\056\004\146\005\044\006\035\007\042\012\034\013\027" +
    "\014\013\015\014\017\052\021\004\022\011\023\030\024" +
    "\006\032\050\033\057\035\003\040\015\041\016\043\054" +
    "\052\055\054\033\055\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\003\234\004\046" +
    "\005\044\006\035\007\042\012\034\013\027\014\013\015" +
    "\014\017\052\021\004\022\011\023\030\024\006\032\050" +
    "\033\057\035\003\040\015\041\016\043\054\052\055\054" +
    "\033\055\056\001\001\000\056\004\146\005\044\006\035" +
    "\007\042\012\034\013\027\014\013\015\014\017\052\021" +
    "\004\022\011\023\030\024\006\032\050\033\057\035\003" +
    "\040\015\041\016\043\054\052\055\054\033\055\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\240" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\253\001\001\000\002\001\001\000\006\020\254" +
    "\042\071\001\001\000\002\001\001\000\010\016\261\025" +
    "\260\026\257\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\003\264\004\046\005\044\006\035\007\042\012\034" +
    "\013\027\014\013\015\014\017\052\021\004\022\011\023" +
    "\030\024\006\032\050\033\057\035\003\040\015\041\016" +
    "\043\054\052\055\054\033\055\056\001\001\000\056\004" +
    "\146\005\044\006\035\007\042\012\034\013\027\014\013" +
    "\015\014\017\052\021\004\022\011\023\030\024\006\032" +
    "\050\033\057\035\003\040\015\041\016\043\054\052\055" +
    "\054\033\055\056\001\001\000\002\001\001\000\006\020" +
    "\273\042\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\330\042\071\001\001\000\012\020\301\035\300" +
    "\042\071\055\276\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\020\323\035\321\036\322\037" +
    "\316\042\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\311\042\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\314\042\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\323\035" +
    "\321\037\326\042\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\345\042\071\055\344\001\001\000\006" +
    "\020\334\042\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\341\042\071\055\337\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\351\042" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\003\354\004\046\005\044\006\035\007\042\012\034\013" +
    "\027\014\013\015\014\017\052\021\004\022\011\023\030" +
    "\024\006\032\050\033\057\035\003\040\015\041\016\043" +
    "\054\052\055\054\033\055\056\001\001\000\056\004\146" +
    "\005\044\006\035\007\042\012\034\013\027\014\013\015" +
    "\014\017\052\021\004\022\011\023\030\024\006\032\050" +
    "\033\057\035\003\040\015\041\016\043\054\052\055\054" +
    "\033\055\056\001\001\000\006\030\360\031\357\001\001" +
    "\000\002\001\001\000\004\030\362\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\003\373" +
    "\004\046\005\044\006\035\007\042\012\034\013\027\014" +
    "\013\015\014\017\052\021\004\022\011\023\030\024\006" +
    "\032\050\033\057\035\003\040\015\041\016\043\054\052" +
    "\055\054\033\055\056\001\001\000\002\001\001\000\006" +
    "\020\366\042\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\003\371\004\046\005\044\006\035\007\042" +
    "\012\034\013\027\014\013\015\014\017\052\021\004\022" +
    "\011\023\030\024\006\032\050\033\057\035\003\040\015" +
    "\041\016\043\054\052\055\054\033\055\056\001\001\000" +
    "\056\004\146\005\044\006\035\007\042\012\034\013\027" +
    "\014\013\015\014\017\052\021\004\022\011\023\030\024" +
    "\006\032\050\033\057\035\003\040\015\041\016\043\054" +
    "\052\055\054\033\055\056\001\001\000\002\001\001\000" +
    "\056\004\146\005\044\006\035\007\042\012\034\013\027" +
    "\014\013\015\014\017\052\021\004\022\011\023\030\024" +
    "\006\032\050\033\057\035\003\040\015\041\016\043\054" +
    "\052\055\054\033\055\056\001\001\000\002\001\001\000" +
    "\060\003\376\004\046\005\044\006\035\007\042\012\034" +
    "\013\027\014\013\015\014\017\052\021\004\022\011\023" +
    "\030\024\006\032\050\033\057\035\003\040\015\041\016" +
    "\043\054\052\055\054\033\055\056\001\001\000\056\004" +
    "\146\005\044\006\035\007\042\012\034\013\027\014\013" +
    "\015\014\017\052\021\004\022\011\023\030\024\006\032" +
    "\050\033\057\035\003\040\015\041\016\043\054\052\055" +
    "\054\033\055\056\001\001\000\002\001\001\000\010\020" +
    "\u0102\035\u0101\042\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\u011b\042\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\003\u011e\004\046\005" +
    "\044\006\035\007\042\012\034\013\027\014\013\015\014" +
    "\017\052\021\004\022\011\023\030\024\006\032\050\033" +
    "\057\035\003\040\015\041\016\043\054\052\055\054\033" +
    "\055\056\001\001\000\056\004\146\005\044\006\035\007" +
    "\042\012\034\013\027\014\013\015\014\017\052\021\004" +
    "\022\011\023\030\024\006\032\050\033\057\035\003\040" +
    "\015\041\016\043\054\052\055\054\033\055\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\u0122\001" +
    "\001\000\002\001\001\000\012\020\u0141\035\u0140\042\071" +
    "\055\u013f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\020\u012d\035\u012b\042\071\047\u012c\051\u012a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\u012d\035\u012b\042\071\051\u0131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\u0136\001" +
    "\001\000\014\020\u012d\035\u012b\042\071\047\u013d\051\u012a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\020\u012d\035\u012b\042\071" +
    "\047\u013b\051\u012a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\003\u0147\004\046\005\044\006\035\007\042\012\034\013" +
    "\027\014\013\015\014\017\052\021\004\022\011\023\030" +
    "\024\006\032\050\033\057\035\003\040\015\041\016\043" +
    "\054\052\055\054\033\055\056\001\001\000\056\004\146" +
    "\005\044\006\035\007\042\012\034\013\027\014\013\015" +
    "\014\017\052\021\004\022\011\023\030\024\006\032\050" +
    "\033\057\035\003\040\015\041\016\043\054\052\055\054" +
    "\033\055\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\u014b\042\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JCParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JCParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JCParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    JCLexer s;
    JCParser(JCLexer s){this.s = s;}
    private LinkedList<JCError> errorList = new LinkedList<>();
    public LinkedList<JCError> getSyntaxErrorList(){
        return errorList;
    }

    public void syntax_error(Symbol s){
        errorList.add(new JCError("Sintaxis", "Error en la instruccion, componente: "+s.value, s.left, s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        errorList.add(new JCError("Sintaxis - FATAL", "Error en la instruccion, componente: "+s.value, s.left, s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JCParser$actions {



  private final JCParser parser;

  /** Constructor */
  CUP$JCParser$actions(JCParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JCParser$do_action_part00000000(
    int                        CUP$JCParser$act_num,
    java_cup.runtime.lr_parser CUP$JCParser$parser,
    java.util.Stack            CUP$JCParser$stack,
    int                        CUP$JCParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JCParser$result;

      /* select the action based on the action number */
      switch (CUP$JCParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> start_val = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		RESULT = start_val;
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JCParser$parser.done_parsing();
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= STATEMENTS 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // STATEMENTS ::= STATEMENTS STATEMENT 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STATEMENTS ::= STATEMENT 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STATEMENT ::= IMPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STATEMENT ::= DECLARATION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATEMENT ::= ASSIGNATION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENT ::= ARRAY_ASSIGNATION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENT ::= IF_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEMENT ::= INCREMENT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STATEMENT ::= DECREMENT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STATEMENT ::= WHILE_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STATEMENT ::= FOR_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STATEMENT ::= DO_WHILE_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STATEMENT ::= DYNAMIC_LIST_DECLARATION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STATEMENT ::= DYNAMIC_LIST_MUTATOR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STATEMENT ::= RETURN_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STATEMENT ::= BREAK 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STATEMENT ::= CONTINUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STATEMENT ::= START_WITH_INVOKE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STATEMENT ::= MATCH_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STATEMENT ::= METHOD_CALL ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STATEMENT ::= METHOD_DECLARATION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STATEMENT ::= error ENDLINE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // START_WITH_INVOKE ::= RW_START_WITH ID OPENPAR CLOSEPAR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		   RESULT = new StartWithInvoke(a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("START_WITH_INVOKE",24, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BREAK ::= RW_BREAK ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new Break(aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("BREAK",17, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTINUE ::= RW_CONTINUE ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new Continue(aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("CONTINUE",18, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IMPRESION ::= RW_PRINT OPENPAR EXPRESION CLOSEPAR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		   RESULT = new Print(a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("IMPRESION",3, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IMPRESION ::= RW_PRINT OPENPAR METHOD_CALL CLOSEPAR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		   RESULT = new Print(a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("IMPRESION",3, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MUTABILITY ::= RW_VAR 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("MUTABILITY",31, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MUTABILITY ::= RW_CONST 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("MUTABILITY",31, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARATION ::= MUTABILITY ID COLON TYPES ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Types c = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new Declaration(b, c, null, a, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARATION ::= MUTABILITY ID COLON TYPES EQUALS EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		Types c = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new Declaration(b, c, d, a, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARATION ::= MUTABILITY ID COLON TYPES EQUALS METHOD_CALL ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		Types c = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new Declaration(b, c, d, a, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARATION ::= MUTABILITY ID COLON TYPES OPENBRACKET CLOSEBRACKET EQUALS OPENBRACKET VALUES_LIST CLOSEBRACKET ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-10)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).right;
		Types c = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		
                RESULT = new Declaration(b, c, 1, d, a, aleft, aright);
            
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-10)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARATION ::= MUTABILITY ID COLON TYPES OPENBRACKET CLOSEBRACKET OPENBRACKET CLOSEBRACKET EQUALS OPENBRACKET VALUES_OF_VALUES_LIST CLOSEBRACKET ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-12)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).right;
		Types c = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		LinkedList<LinkedList<Instruction>> d = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		
                RESULT = new Declaration(b, c, d, 2, a, aleft, aright);
            
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-12)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARATION ::= MUTABILITY ID COLON TYPES EQUALS DYNAMIC_LIST_MUTATOR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		Types c = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
                RESULT = new Declaration(b, c, d, a, aleft, aright);
            
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALUES_OF_VALUES_LIST ::= VALUES_OF_VALUES_LIST COMMA OPENBRACKET VALUES_LIST CLOSEBRACKET 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		LinkedList<LinkedList<Instruction>> a = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = a; a.add(b); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("VALUES_OF_VALUES_LIST",38, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALUES_OF_VALUES_LIST ::= OPENBRACKET VALUES_LIST CLOSEBRACKET 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("VALUES_OF_VALUES_LIST",38, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALUES_LIST ::= VALUES_LIST COMMA ARRAY_VALUE 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; a.add(b); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("VALUES_LIST",37, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VALUES_LIST ::= ARRAY_VALUE 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("VALUES_LIST",37, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ARRAY_VALUE ::= EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ARRAY_VALUE",39, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ARRAY_VALUE ::= METHOD_CALL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ARRAY_VALUE",39, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DYNAMIC_LIST_DECLARATION ::= RW_LIST LESS TYPES GREATER ID EQUALS RW_NEW RW_LIST OPENPAR CLOSEPAR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-8)).right;
		Types a = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		
    System.out.println("[debug] found dynamic list declaration");
    RESULT = new Declaration(b, a, null, false, aleft, aright, true);

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DYNAMIC_LIST_DECLARATION",42, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-10)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DYNAMIC_LIST_MUTATOR ::= ID DOT RW_APPEND OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
    System.out.println("[debug] found dynamic list mutator");
    RESULT = new DynamicListMutation(a, null, b, DynamicListMutation.MutationType.ADD, aleft, aright);

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DYNAMIC_LIST_MUTATOR",43, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DYNAMIC_LIST_MUTATOR ::= ID DOT RW_REMOVE OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
    System.out.println("[debug] found dynamic list mutator");
    RESULT = new DynamicListMutation(a, b, null, DynamicListMutation.MutationType.REMOVE, aleft, aright);

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DYNAMIC_LIST_MUTATOR",43, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ITERABLE_FIND ::= ID DOT RW_FIND OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
        System.out.println("[debug] found iterable find");
        RESULT = new Find(a, b, aleft, aright);
    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ITERABLE_FIND",32, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // METHOD_DECLARATION ::= TYPES ID OPENPAR CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		Types a = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new MethodDeclaration(a, b, new LinkedList<HashMap>(), c, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("METHOD_DECLARATION",25, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // METHOD_DECLARATION ::= TYPES ID OPENPAR METHOD_PARAMS_DECLARATION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).right;
		Types a = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		LinkedList<HashMap> c = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new MethodDeclaration(a, b, c, d, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("METHOD_DECLARATION",25, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // METHOD_PARAMS_DECLARATION ::= METHOD_PARAMS_DECLARATION COMMA TYPES ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Types b = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		
    RESULT = a;
    HashMap<String, Object> singleParam = new HashMap<>();
    singleParam.put("type", b);
    singleParam.put("id", c);
    RESULT.add(singleParam);
    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("METHOD_PARAMS_DECLARATION",26, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // METHOD_PARAMS_DECLARATION ::= TYPES ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Types a = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		
        RESULT = new LinkedList<HashMap>();
        HashMap<String, Object> singleParam = new HashMap<>();
        singleParam.put("type", a);
        singleParam.put("id", b);
        RESULT.add(singleParam);
    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("METHOD_PARAMS_DECLARATION",26, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CALL_ARGUMENTS ::= CALL_ARGUMENTS COMMA ARGUMENT 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; a.add(b); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("CALL_ARGUMENTS",28, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CALL_ARGUMENTS ::= ARGUMENT 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("CALL_ARGUMENTS",28, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARGUMENT ::= EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ARGUMENT",29, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARGUMENT ::= METHOD_CALL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ARGUMENT",29, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // METHOD_CALL ::= ID OPENPAR CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		  RESULT = new MethodCall(a, new LinkedList<>(), aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("METHOD_CALL",27, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // METHOD_CALL ::= ID OPENPAR CALL_ARGUMENTS CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		  RESULT = new MethodCall(a, b, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("METHOD_CALL",27, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RETURN_STMT ::= RW_RETURN EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new ReturnIns(a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("RETURN_STMT",30, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // RETURN_STMT ::= RW_RETURN ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new ReturnIns(null, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("RETURN_STMT",30, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // RETURN_STMT ::= RW_RETURN METHOD_CALL ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new ReturnIns(a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("RETURN_STMT",30, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TYPE_CAST_OPERATOR ::= OPENPAR TYPES CLOSEPAR 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = type; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPE_CAST_OPERATOR",21, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASSIGNATION ::= ID EQUALS EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT=new SymbolAssignation(a, b, aleft, aright);  
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",5, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASSIGNATION ::= ID EQUALS METHOD_CALL ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT=new SymbolAssignation(a, b, aleft, aright);  
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",5, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ASSIGNATION ::= ID OPENBRACKET EXPRESION CLOSEBRACKET EQUALS EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
                RESULT = new ArrayAssignation(a, b, null, c, aleft, aright);
            
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",5, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASSIGNATION ::= ID OPENBRACKET EXPRESION CLOSEBRACKET OPENBRACKET EXPRESION CLOSEBRACKET EQUALS EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
                RESULT = new ArrayAssignation(a, b, c, d, aleft, aright);
            
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",5, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASSIGNATION ::= ID EQUALS DYNAMIC_LIST_MUTATOR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
                RESULT = new SymbolAssignation(a, b, aleft, aright);
            
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",5, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASSIGNATION ::= ID OPENBRACKET EXPRESION CLOSEBRACKET EQUALS DYNAMIC_LIST_MUTATOR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
                RESULT = new ArrayAssignation(a, b, null, c, aleft, aright);
            
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",5, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASSIGNATION ::= ID OPENBRACKET EXPRESION CLOSEBRACKET OPENBRACKET EXPRESION CLOSEBRACKET EQUALS DYNAMIC_LIST_MUTATOR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
                RESULT = new ArrayAssignation(a, b, c, d, aleft, aright);
            
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",5, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // MATCH_STMT ::= RW_MATCH OPENPAR EXPRESION CLOSEPAR OPENBRACE MATCH_CASES_LIST DEFAULT_MATCH_CASE CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		LinkedList<MatchCase> b = (LinkedList<MatchCase>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		MatchCase c = (MatchCase)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
    RESULT = new MatchStatement(a, b, c, aleft, aright);

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("MATCH_STMT",33, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MATCH_STMT ::= RW_MATCH OPENPAR EXPRESION CLOSEPAR OPENBRACE MATCH_CASES_LIST CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<MatchCase> b = (LinkedList<MatchCase>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
      RESULT = new MatchStatement(a, b, null, aleft, aright);
  
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("MATCH_STMT",33, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MATCH_STMT ::= RW_MATCH OPENPAR EXPRESION CLOSEPAR OPENBRACE DEFAULT_MATCH_CASE CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		MatchCase c = (MatchCase)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
      RESULT = new MatchStatement(a, null, c, aleft, aright);
  
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("MATCH_STMT",33, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // MATCH_CASES_LIST ::= MATCH_CASES_LIST CUSTOM_MATCH_CASE 
            {
              LinkedList<MatchCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<MatchCase> a = (LinkedList<MatchCase>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		MatchCase b = (MatchCase)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; a.add(b); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("MATCH_CASES_LIST",34, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // MATCH_CASES_LIST ::= CUSTOM_MATCH_CASE 
            {
              LinkedList<MatchCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		MatchCase a = (MatchCase)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("MATCH_CASES_LIST",34, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CUSTOM_MATCH_CASE ::= EXPRESION ARROW OPENBRACE STATEMENTS CLOSEBRACE 
            {
              MatchCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
    RESULT = new MatchCase(a, b, aleft, aright);

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("CUSTOM_MATCH_CASE",35, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DEFAULT_MATCH_CASE ::= UNDERSCORE ARROW OPENBRACE STATEMENTS CLOSEBRACE 
            {
              MatchCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
    RESULT = new MatchCase(a, aleft, aright);

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DEFAULT_MATCH_CASE",36, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IF_STMT ::= RW_IF OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
               RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, new LinkedList<IfStatement.ConditionBlock>()), aleft, aright);
           
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("IF_STMT",8, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IF_STMT ::= RW_IF OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE ELSE_IF_BLOCKS 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		LinkedList<IfStatement.ConditionBlock> c = (LinkedList<IfStatement.ConditionBlock>)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, c), aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("IF_STMT",8, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IF_STMT ::= RW_IF OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE ELSE_IF_BLOCKS RW_ELSE OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		LinkedList<IfStatement.ConditionBlock> c = (LinkedList<IfStatement.ConditionBlock>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, c), d, aleft, aright);

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("IF_STMT",8, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-11)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IF_STMT ::= RW_IF OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE RW_ELSE OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-8)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, new LinkedList<IfStatement.ConditionBlock>()), c, aleft, aright);

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("IF_STMT",8, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-10)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ELSE_IF_BLOCK ::= RW_ELSE RW_IF OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              IfStatement.ConditionBlock RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new IfStatement.ConditionBlock(a, b); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_BLOCK",22, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ELSE_IF_BLOCKS ::= ELSE_IF_BLOCKS ELSE_IF_BLOCK 
            {
              LinkedList<IfStatement.ConditionBlock> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<IfStatement.ConditionBlock> a = (LinkedList<IfStatement.ConditionBlock>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		IfStatement.ConditionBlock e = (IfStatement.ConditionBlock)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; a.add(e); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_BLOCKS",23, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ELSE_IF_BLOCKS ::= ELSE_IF_BLOCK 
            {
              LinkedList<IfStatement.ConditionBlock> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		IfStatement.ConditionBlock e = (IfStatement.ConditionBlock)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(e); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_BLOCKS",23, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // WHILE_STMT ::= RW_WHILE OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new WhileStatement(a, b, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("WHILE_STMT",9, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DO_WHILE_STMT ::= RW_DO OPENBRACE STATEMENTS CLOSEBRACE RW_WHILE OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new DoWhileStatement(b, a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DO_WHILE_STMT",10, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DO_WHILE_STMT ::= RW_DO OPENBRACE STATEMENTS CLOSEBRACE RW_WHILE OPENPAR EXPRESION CLOSEPAR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		   RESULT = new DoWhileStatement(b, a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DO_WHILE_STMT",10, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-8)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FOR_STMT ::= RW_FOR OPENPAR ASSIGNATION EXPRESION ENDLINE FOR_UPDATE CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new ForStatement(a, b, c, d, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("FOR_STMT",11, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FOR_UPDATE ::= ID EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new SymbolAssignation(a, b, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FOR_UPDATE ::= INCREMENT_NO_ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FOR_UPDATE ::= DECREMENT_NO_ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // INCREMENT_NO_ENDLINE ::= ID PLUS PLUS 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		   RESULT = new SymbolAssignation(a, new Arithmetic(new SymbolAccess(a, aleft, aright),new Primitive(Types.INTEGER, 1, aleft, aright),ArithmeticOperands.SUM, aleft, aright), aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("INCREMENT_NO_ENDLINE",19, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECREMENT_NO_ENDLINE ::= ID MINUS MINUS 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		   RESULT = new SymbolAssignation(a, new Arithmetic(new SymbolAccess(a, aleft, aright), new Primitive(Types.INTEGER, 1, aleft, aright), ArithmeticOperands.SUB, aleft, aright), aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECREMENT_NO_ENDLINE",20, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INCREMENT ::= ID PLUS PLUS ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		   RESULT = new SymbolAssignation(a, new Arithmetic(new SymbolAccess(a, aleft, aright),new Primitive(Types.INTEGER, 1, aleft, aright),ArithmeticOperands.SUM, aleft, aright), aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("INCREMENT",15, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECREMENT ::= ID MINUS MINUS ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		   RESULT = new SymbolAssignation(a, new Arithmetic(new SymbolAccess(a, aleft, aright), new Primitive(Types.INTEGER, 1, aleft, aright), ArithmeticOperands.SUB, aleft, aright), aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECREMENT",16, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TYPES ::= RW_INT 
            {
              Types RESULT =null;
		   RESULT=Types.INTEGER;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",13, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TYPES ::= RW_DOUBLE 
            {
              Types RESULT =null;
		   RESULT=Types.DOUBLE;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",13, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TYPES ::= RW_STRING 
            {
              Types RESULT =null;
		   RESULT=Types.STRING;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",13, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TYPES ::= RW_BOOL 
            {
              Types RESULT =null;
		   RESULT=Types.BOOLEAN;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",13, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TYPES ::= RW_CHAR 
            {
              Types RESULT =null;
		   RESULT=Types.CHARACTER;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",13, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TYPES ::= RW_VOID 
            {
              Types RESULT =null;
		   RESULT=Types.VOID;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",13, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= OPENPAR TYPES CLOSEPAR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Types a = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new TypeCast(b, a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= MINUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, ArithmeticOperands.NEG, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= EXPRESION ASTERISK EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.MUL, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION ::= EXPRESION SLASH EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.DIV, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION ::= EXPRESION DOUBLEASTERISK EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.POW, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.MOD, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION ::= EXPRESION MINUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.SUB, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION ::= EXPRESION PLUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.SUM, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= EXPRESION DOUBLEEQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.EQUALS, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= EXPRESION NOT_EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.NOT_EQUALS, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION ::= EXPRESION LESS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.LESS_THAN, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION ::= EXPRESION LESSEQUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.LESS_THAN_OR_EQUALS, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION ::= EXPRESION GREATER EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.GREATER_THAN, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESION ::= EXPRESION GREATEREQUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.GREATER_THAN_OR_EQUALS, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESION ::= NEGATION EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Logical(a, LogicalOperands.NOT, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Logical(a, b, LogicalOperands.OR, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Logical(a, b, LogicalOperands.AND, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Logical(a, b, LogicalOperands.XOR, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESION ::= INTEGER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive(Types.INTEGER,Integer.parseInt(a),  aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESION ::= DECIMAL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive(Types.DOUBLE,new Double(a),  aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESION ::= STRING 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive( Types.STRING,a, aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPRESION ::= CHAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive(Types.CHARACTER, a.charAt(0), aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPRESION ::= RW_TRUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive(Types.BOOLEAN, true, aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPRESION ::= RW_FALSE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive(Types.BOOLEAN, false, aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPRESION ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new SymbolAccess(a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPRESION ::= ID OPENBRACKET EXPRESION CLOSEBRACKET 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new ArrayAccess(a, b, null, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPRESION ::= ID OPENBRACKET EXPRESION CLOSEBRACKET OPENBRACKET EXPRESION CLOSEBRACKET 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new ArrayAccess(a, b, c, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXPRESION ::= RW_LENGTH OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new Length(a, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXPRESION ::= RW_ROUND OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new Round(a, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXPRESION ::= RW_TOSTRING OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new ToString(a, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXPRESION ::= ITERABLE_FIND 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXPRESION ::= OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JCParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JCParser$do_action(
    int                        CUP$JCParser$act_num,
    java_cup.runtime.lr_parser CUP$JCParser$parser,
    java.util.Stack            CUP$JCParser$stack,
    int                        CUP$JCParser$top)
    throws java.lang.Exception
    {
              return CUP$JCParser$do_action_part00000000(
                               CUP$JCParser$act_num,
                               CUP$JCParser$parser,
                               CUP$JCParser$stack,
                               CUP$JCParser$top);
    }
}

}
