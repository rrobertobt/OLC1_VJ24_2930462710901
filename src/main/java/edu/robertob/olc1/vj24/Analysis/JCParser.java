
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package edu.robertob.olc1.vj24.Analysis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import edu.robertob.olc1.vj24.Engine.Base.Instruction;
import edu.robertob.olc1.vj24.Engine.Structs.Types;
import edu.robertob.olc1.vj24.Engine.Structs.JCError;
import edu.robertob.olc1.vj24.Engine.Statements.Print;
import edu.robertob.olc1.vj24.Engine.Statements.Declaration;
import edu.robertob.olc1.vj24.Engine.Statements.SymbolAssignation;
import edu.robertob.olc1.vj24.Engine.Expressions.SymbolAccess;
import edu.robertob.olc1.vj24.Engine.Expressions.Primitive;
import edu.robertob.olc1.vj24.Engine.Statements.IfStatement;
import edu.robertob.olc1.vj24.Engine.Statements.WhileStatement;
import edu.robertob.olc1.vj24.Engine.Statements.DoWhileStatement;
import edu.robertob.olc1.vj24.Engine.Statements.ForStatement;
import edu.robertob.olc1.vj24.Engine.Statements.Break;
import edu.robertob.olc1.vj24.Engine.Statements.Continue;
import edu.robertob.olc1.vj24.Engine.Expressions.TypeCast;
import edu.robertob.olc1.vj24.Engine.Expressions.Arithmetic;
import edu.robertob.olc1.vj24.Engine.Expressions.Comparison;
import edu.robertob.olc1.vj24.Engine.Structs.ComparisonOperands;
import edu.robertob.olc1.vj24.Engine.Expressions.Logical;
import edu.robertob.olc1.vj24.Engine.Structs.LogicalOperands;
import edu.robertob.olc1.vj24.Engine.Structs.ArithmeticOperands;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JCParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public JCParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JCParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JCParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\004\000\002\021\004\000\002\022\004\000\002\005\007" +
    "\000\002\006\011\000\002\006\007\000\002\006\007\000" +
    "\002\006\011\000\002\025\005\000\002\007\006\000\002" +
    "\010\011\000\002\010\015\000\002\011\011\000\002\012" +
    "\012\000\002\012\013\000\002\013\014\000\002\014\005" +
    "\000\002\014\003\000\002\014\003\000\002\023\005\000" +
    "\002\024\005\000\002\017\006\000\002\020\006\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\016\006\000\002\016\004" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\004" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\030\003\027\006\011\036\024\042\014\050" +
    "\023\051\026\052\005\053\020\054\010\055\017\056\021" +
    "\001\002\000\034\002\ufff3\003\ufff3\006\ufff3\017\ufff3\036" +
    "\ufff3\042\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3" +
    "\055\ufff3\056\ufff3\001\002\000\004\034\226\001\002\000" +
    "\034\002\ufff6\003\ufff6\006\ufff6\017\ufff6\036\ufff6\042\ufff6" +
    "\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056" +
    "\ufff6\001\002\000\034\002\ufff8\003\ufff8\006\ufff8\017\ufff8" +
    "\036\ufff8\042\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054" +
    "\ufff8\055\ufff8\056\ufff8\001\002\000\004\012\225\001\002" +
    "\000\010\013\217\014\220\015\171\001\002\000\034\002" +
    "\ufff7\003\ufff7\006\ufff7\017\ufff7\036\ufff7\042\ufff7\050\ufff7" +
    "\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\001" +
    "\002\000\032\002\000\003\027\006\011\036\024\042\014" +
    "\050\023\051\026\052\005\053\020\054\010\055\017\056" +
    "\021\001\002\000\004\034\205\001\002\000\034\002\ufff5" +
    "\003\ufff5\006\ufff5\017\ufff5\036\ufff5\042\ufff5\050\ufff5\051" +
    "\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\001\002" +
    "\000\034\002\ufffa\003\ufffa\006\ufffa\017\ufffa\036\ufffa\042" +
    "\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa" +
    "\056\ufffa\001\002\000\004\016\175\001\002\000\004\012" +
    "\174\001\002\000\004\034\145\001\002\000\034\002\ufff4" +
    "\003\ufff4\006\ufff4\017\ufff4\036\ufff4\042\ufff4\050\ufff4\051" +
    "\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\001\002" +
    "\000\004\006\136\001\002\000\004\034\132\001\002\000" +
    "\034\002\ufff9\003\ufff9\006\ufff9\017\ufff9\036\ufff9\042\ufff9" +
    "\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056" +
    "\ufff9\001\002\000\004\006\037\001\002\000\004\012\036" +
    "\001\002\000\034\002\ufffc\003\ufffc\006\ufffc\017\ufffc\036" +
    "\ufffc\042\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc" +
    "\055\ufffc\056\ufffc\001\002\000\004\002\035\001\002\000" +
    "\034\002\ufffb\003\ufffb\006\ufffb\017\ufffb\036\ufffb\042\ufffb" +
    "\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056" +
    "\ufffb\001\002\000\034\002\ufffe\003\ufffe\006\ufffe\017\ufffe" +
    "\036\ufffe\042\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054" +
    "\ufffe\055\ufffe\056\ufffe\001\002\000\034\002\ufffd\003\ufffd" +
    "\006\ufffd\017\ufffd\036\ufffd\042\ufffd\050\ufffd\051\ufffd\052" +
    "\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\001\002\000\004" +
    "\002\001\001\002\000\034\002\ufff2\003\ufff2\006\ufff2\017" +
    "\ufff2\036\ufff2\042\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2" +
    "\054\ufff2\055\ufff2\056\ufff2\001\002\000\004\025\040\001" +
    "\002\000\014\037\042\040\045\041\043\045\046\046\041" +
    "\001\002\000\010\012\uffd7\015\uffd7\035\uffd7\001\002\000" +
    "\010\012\uffdb\015\uffdb\035\uffdb\001\002\000\010\012\uffd9" +
    "\015\uffd9\035\uffd9\001\002\000\006\012\050\015\047\001" +
    "\002\000\010\012\uffda\015\uffda\035\uffda\001\002\000\010" +
    "\012\uffd8\015\uffd8\035\uffd8\001\002\000\026\005\057\006" +
    "\061\007\054\010\052\011\063\014\051\024\060\034\055" +
    "\043\056\044\053\001\002\000\034\002\uffec\003\uffec\006" +
    "\uffec\017\uffec\036\uffec\042\uffec\050\uffec\051\uffec\052\uffec" +
    "\053\uffec\054\uffec\055\uffec\056\uffec\001\002\000\026\005" +
    "\057\006\061\007\054\010\052\011\063\014\051\024\060" +
    "\034\055\043\056\044\053\001\002\000\044\012\uffc3\013" +
    "\uffc3\014\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\035\uffc3\057" +
    "\uffc3\060\uffc3\061\uffc3\001\002\000\044\012\uffbf\013\uffbf" +
    "\014\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\026\uffbf\027" +
    "\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\035\uffbf\057\uffbf" +
    "\060\uffbf\061\uffbf\001\002\000\044\012\uffc4\013\uffc4\014" +
    "\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\033\uffc4\035\uffc4\057\uffc4\060" +
    "\uffc4\061\uffc4\001\002\000\040\005\057\006\061\007\054" +
    "\010\052\011\063\014\051\024\060\034\055\037\042\040" +
    "\045\041\043\043\056\044\053\045\046\046\041\001\002" +
    "\000\044\012\uffc0\013\uffc0\014\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0" +
    "\033\uffc0\035\uffc0\057\uffc0\060\uffc0\061\uffc0\001\002\000" +
    "\044\012\uffc2\013\uffc2\014\uffc2\020\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033" +
    "\uffc2\035\uffc2\057\uffc2\060\uffc2\061\uffc2\001\002\000\026" +
    "\005\057\006\061\007\054\010\052\011\063\014\051\024" +
    "\060\034\055\043\056\044\053\001\002\000\044\012\uffbe" +
    "\013\uffbe\014\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\026" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\035\uffbe" +
    "\057\uffbe\060\uffbe\061\uffbe\001\002\000\042\012\070\013" +
    "\073\014\064\020\074\021\066\022\100\023\075\026\101" +
    "\027\077\030\071\031\072\032\102\033\076\057\103\060" +
    "\065\061\067\001\002\000\044\012\uffc1\013\uffc1\014\uffc1" +
    "\020\uffc1\021\uffc1\022\uffc1\023\uffc1\026\uffc1\027\uffc1\030" +
    "\uffc1\031\uffc1\032\uffc1\033\uffc1\035\uffc1\057\uffc1\060\uffc1" +
    "\061\uffc1\001\002\000\026\005\057\006\061\007\054\010" +
    "\052\011\063\014\051\024\060\034\055\043\056\044\053" +
    "\001\002\000\026\005\057\006\061\007\054\010\052\011" +
    "\063\014\051\024\060\034\055\043\056\044\053\001\002" +
    "\000\026\005\057\006\061\007\054\010\052\011\063\014" +
    "\051\024\060\034\055\043\056\044\053\001\002\000\026" +
    "\005\057\006\061\007\054\010\052\011\063\014\051\024" +
    "\060\034\055\043\056\044\053\001\002\000\034\002\uffeb" +
    "\003\uffeb\006\uffeb\017\uffeb\036\uffeb\042\uffeb\050\uffeb\051" +
    "\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\001\002" +
    "\000\026\005\057\006\061\007\054\010\052\011\063\014" +
    "\051\024\060\034\055\043\056\044\053\001\002\000\026" +
    "\005\057\006\061\007\054\010\052\011\063\014\051\024" +
    "\060\034\055\043\056\044\053\001\002\000\026\005\057" +
    "\006\061\007\054\010\052\011\063\014\051\024\060\034" +
    "\055\043\056\044\053\001\002\000\026\005\057\006\061" +
    "\007\054\010\052\011\063\014\051\024\060\034\055\043" +
    "\056\044\053\001\002\000\026\005\057\006\061\007\054" +
    "\010\052\011\063\014\051\024\060\034\055\043\056\044" +
    "\053\001\002\000\026\005\057\006\061\007\054\010\052" +
    "\011\063\014\051\024\060\034\055\043\056\044\053\001" +
    "\002\000\026\005\057\006\061\007\054\010\052\011\063" +
    "\014\051\024\060\034\055\043\056\044\053\001\002\000" +
    "\026\005\057\006\061\007\054\010\052\011\063\014\051" +
    "\024\060\034\055\043\056\044\053\001\002\000\026\005" +
    "\057\006\061\007\054\010\052\011\063\014\051\024\060" +
    "\034\055\043\056\044\053\001\002\000\026\005\057\006" +
    "\061\007\054\010\052\011\063\014\051\024\060\034\055" +
    "\043\056\044\053\001\002\000\026\005\057\006\061\007" +
    "\054\010\052\011\063\014\051\024\060\034\055\043\056" +
    "\044\053\001\002\000\044\012\uffc7\013\073\014\064\020" +
    "\074\021\066\022\100\023\075\026\101\027\077\030\071" +
    "\031\072\032\102\033\076\035\uffc7\057\uffc7\060\065\061" +
    "\067\001\002\000\044\012\uffc9\013\073\014\064\020\074" +
    "\021\066\022\100\023\075\026\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\035\uffc9\057\uffc9\060\uffc9\061\uffc9" +
    "\001\002\000\044\012\uffce\013\073\014\064\020\074\021" +
    "\066\022\100\023\075\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\035\uffce\057\uffce\060\uffce\061\uffce\001" +
    "\002\000\044\012\uffd1\013\uffd1\014\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\023\075\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\035\uffd1\057\uffd1\060\uffd1\061\uffd1\001\002" +
    "\000\044\012\uffcc\013\073\014\064\020\074\021\066\022" +
    "\100\023\075\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\035\uffcc\057\uffcc\060\uffcc\061\uffcc\001\002\000" +
    "\044\012\uffcd\013\073\014\064\020\074\021\066\022\100" +
    "\023\075\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033" +
    "\uffcd\035\uffcd\057\uffcd\060\uffcd\061\uffcd\001\002\000\042" +
    "\012\uffd2\013\uffd2\014\uffd2\020\uffd2\021\uffd2\022\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\035\uffd2" +
    "\057\uffd2\060\uffd2\061\uffd2\001\002\000\044\012\uffd4\013" +
    "\uffd4\014\uffd4\020\uffd4\021\uffd4\022\uffd4\023\075\026\uffd4" +
    "\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\035\uffd4\057" +
    "\uffd4\060\uffd4\061\uffd4\001\002\000\044\012\uffcf\013\uffcf" +
    "\014\uffcf\020\074\021\066\022\100\023\075\026\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\035\uffcf\057\uffcf" +
    "\060\uffcf\061\uffcf\001\002\000\044\012\uffcb\013\073\014" +
    "\064\020\074\021\066\022\100\023\075\026\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\035\uffcb\057\uffcb\060" +
    "\uffcb\061\uffcb\001\002\000\044\012\uffca\013\073\014\064" +
    "\020\074\021\066\022\100\023\075\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\035\uffca\057\uffca\060\uffca" +
    "\061\uffca\001\002\000\044\012\uffc5\013\073\014\064\020" +
    "\074\021\066\022\100\023\075\026\101\027\077\030\071" +
    "\031\072\032\102\033\076\035\uffc5\057\uffc5\060\uffc5\061" +
    "\uffc5\001\002\000\044\012\uffd3\013\uffd3\014\uffd3\020\uffd3" +
    "\021\uffd3\022\uffd3\023\075\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\035\uffd3\057\uffd3\060\uffd3\061\uffd3" +
    "\001\002\000\044\012\uffc6\013\073\014\064\020\074\021" +
    "\066\022\100\023\075\026\101\027\077\030\071\031\072" +
    "\032\102\033\076\035\uffc6\057\uffc6\060\uffc6\061\067\001" +
    "\002\000\044\012\uffd0\013\uffd0\014\uffd0\020\074\021\066" +
    "\022\100\023\075\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\035\uffd0\057\uffd0\060\uffd0\061\uffd0\001\002" +
    "\000\044\012\uffc8\013\073\014\064\020\074\021\066\022" +
    "\100\023\075\026\101\027\077\030\071\031\072\032\102" +
    "\033\076\035\uffc8\057\uffc8\060\uffc8\061\uffc8\001\002\000" +
    "\004\035\127\001\002\000\042\013\073\014\064\020\074" +
    "\021\066\022\100\023\075\026\101\027\077\030\071\031" +
    "\072\032\102\033\076\035\126\057\103\060\065\061\067" +
    "\001\002\000\044\012\uffbd\013\uffbd\014\uffbd\020\uffbd\021" +
    "\uffbd\022\uffbd\023\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\035\uffbd\057\uffbd\060\uffbd\061\uffbd\001" +
    "\002\000\026\005\057\006\061\007\054\010\052\011\063" +
    "\014\051\024\060\034\055\043\056\044\053\001\002\000" +
    "\044\012\uffd6\013\073\014\064\020\074\021\066\022\100" +
    "\023\075\026\101\027\077\030\071\031\072\032\102\033" +
    "\076\035\uffd6\057\103\060\065\061\067\001\002\000\044" +
    "\012\uffd5\013\uffd5\014\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\035\uffd5\057\uffd5\060\uffd5\061\uffd5\001\002\000\026\005" +
    "\057\006\061\007\054\010\052\011\063\014\051\024\060" +
    "\034\055\043\056\044\053\001\002\000\042\013\073\014" +
    "\064\020\074\021\066\022\100\023\075\026\101\027\077" +
    "\030\071\031\072\032\102\033\076\035\134\057\103\060" +
    "\065\061\067\001\002\000\004\012\135\001\002\000\034" +
    "\002\uffef\003\uffef\006\uffef\017\uffef\036\uffef\042\uffef\050" +
    "\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef" +
    "\001\002\000\004\025\137\001\002\000\014\037\042\040" +
    "\045\041\043\045\046\046\041\001\002\000\006\012\142" +
    "\015\141\001\002\000\026\005\057\006\061\007\054\010" +
    "\052\011\063\014\051\024\060\034\055\043\056\044\053" +
    "\001\002\000\034\002\uffed\003\uffed\006\uffed\017\uffed\036" +
    "\uffed\042\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed" +
    "\055\uffed\056\uffed\001\002\000\042\012\144\013\073\014" +
    "\064\020\074\021\066\022\100\023\075\026\101\027\077" +
    "\030\071\031\072\032\102\033\076\057\103\060\065\061" +
    "\067\001\002\000\034\002\uffee\003\uffee\006\uffee\017\uffee" +
    "\036\uffee\042\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054" +
    "\uffee\055\uffee\056\uffee\001\002\000\004\006\146\001\002" +
    "\000\004\015\171\001\002\000\026\005\057\006\061\007" +
    "\054\010\052\011\063\014\051\024\060\034\055\043\056" +
    "\044\053\001\002\000\042\012\151\013\073\014\064\020" +
    "\074\021\066\022\100\023\075\026\101\027\077\030\071" +
    "\031\072\032\102\033\076\057\103\060\065\061\067\001" +
    "\002\000\004\006\152\001\002\000\010\013\164\014\165" +
    "\015\163\001\002\000\004\035\uffe0\001\002\000\004\035" +
    "\uffe1\001\002\000\004\035\156\001\002\000\004\016\157" +
    "\001\002\000\030\003\027\006\011\036\024\042\014\050" +
    "\023\051\026\052\005\053\020\054\010\055\017\056\021" +
    "\001\002\000\032\003\027\006\011\017\161\036\024\042" +
    "\014\050\023\051\026\052\005\053\020\054\010\055\017" +
    "\056\021\001\002\000\034\002\uffe3\003\uffe3\006\uffe3\017" +
    "\uffe3\036\uffe3\042\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3" +
    "\054\uffe3\055\uffe3\056\uffe3\001\002\000\034\002\uffff\003" +
    "\uffff\006\uffff\017\uffff\036\uffff\042\uffff\050\uffff\051\uffff" +
    "\052\uffff\053\uffff\054\uffff\055\uffff\056\uffff\001\002\000" +
    "\026\005\057\006\061\007\054\010\052\011\063\014\051" +
    "\024\060\034\055\043\056\044\053\001\002\000\004\013" +
    "\167\001\002\000\004\014\166\001\002\000\004\035\uffde" +
    "\001\002\000\004\035\uffdf\001\002\000\042\013\073\014" +
    "\064\020\074\021\066\022\100\023\075\026\101\027\077" +
    "\030\071\031\072\032\102\033\076\035\uffe2\057\103\060" +
    "\065\061\067\001\002\000\026\005\057\006\061\007\054" +
    "\010\052\011\063\014\051\024\060\034\055\043\056\044" +
    "\053\001\002\000\042\012\173\013\073\014\064\020\074" +
    "\021\066\022\100\023\075\026\101\027\077\030\071\031" +
    "\072\032\102\033\076\057\103\060\065\061\067\001\002" +
    "\000\056\002\uffe9\003\uffe9\005\uffe9\006\uffe9\007\uffe9\010" +
    "\uffe9\011\uffe9\014\uffe9\017\uffe9\024\uffe9\034\uffe9\036\uffe9" +
    "\042\uffe9\043\uffe9\044\uffe9\050\uffe9\051\uffe9\052\uffe9\053" +
    "\uffe9\054\uffe9\055\uffe9\056\uffe9\001\002\000\034\002\ufff1" +
    "\003\ufff1\006\ufff1\017\ufff1\036\ufff1\042\ufff1\050\ufff1\051" +
    "\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\001\002" +
    "\000\030\003\027\006\011\036\024\042\014\050\023\051" +
    "\026\052\005\053\020\054\010\055\017\056\021\001\002" +
    "\000\032\003\027\006\011\017\177\036\024\042\014\050" +
    "\023\051\026\052\005\053\020\054\010\055\017\056\021" +
    "\001\002\000\004\052\200\001\002\000\004\034\201\001" +
    "\002\000\026\005\057\006\061\007\054\010\052\011\063" +
    "\014\051\024\060\034\055\043\056\044\053\001\002\000" +
    "\042\013\073\014\064\020\074\021\066\022\100\023\075" +
    "\026\101\027\077\030\071\031\072\032\102\033\076\035" +
    "\203\057\103\060\065\061\067\001\002\000\036\002\uffe5" +
    "\003\uffe5\006\uffe5\012\204\017\uffe5\036\uffe5\042\uffe5\050" +
    "\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5" +
    "\001\002\000\034\002\uffe4\003\uffe4\006\uffe4\017\uffe4\036" +
    "\uffe4\042\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4" +
    "\055\uffe4\056\uffe4\001\002\000\026\005\057\006\061\007" +
    "\054\010\052\011\063\014\051\024\060\034\055\043\056" +
    "\044\053\001\002\000\042\013\073\014\064\020\074\021" +
    "\066\022\100\023\075\026\101\027\077\030\071\031\072" +
    "\032\102\033\076\035\207\057\103\060\065\061\067\001" +
    "\002\000\004\016\210\001\002\000\030\003\027\006\011" +
    "\036\024\042\014\050\023\051\026\052\005\053\020\054" +
    "\010\055\017\056\021\001\002\000\032\003\027\006\011" +
    "\017\212\036\024\042\014\050\023\051\026\052\005\053" +
    "\020\054\010\055\017\056\021\001\002\000\036\002\uffe8" +
    "\003\uffe8\006\uffe8\017\uffe8\036\uffe8\042\uffe8\047\213\050" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8" +
    "\001\002\000\004\016\214\001\002\000\030\003\027\006" +
    "\011\036\024\042\014\050\023\051\026\052\005\053\020" +
    "\054\010\055\017\056\021\001\002\000\032\003\027\006" +
    "\011\017\216\036\024\042\014\050\023\051\026\052\005" +
    "\053\020\054\010\055\017\056\021\001\002\000\034\002" +
    "\uffe7\003\uffe7\006\uffe7\017\uffe7\036\uffe7\042\uffe7\050\uffe7" +
    "\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\001" +
    "\002\000\004\013\223\001\002\000\004\014\221\001\002" +
    "\000\004\012\222\001\002\000\034\002\uffdc\003\uffdc\006" +
    "\uffdc\017\uffdc\036\uffdc\042\uffdc\050\uffdc\051\uffdc\052\uffdc" +
    "\053\uffdc\054\uffdc\055\uffdc\056\uffdc\001\002\000\004\012" +
    "\224\001\002\000\034\002\uffdd\003\uffdd\006\uffdd\017\uffdd" +
    "\036\uffdd\042\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054" +
    "\uffdd\055\uffdd\056\uffdd\001\002\000\034\002\ufff0\003\ufff0" +
    "\006\ufff0\017\ufff0\036\ufff0\042\ufff0\050\ufff0\051\ufff0\052" +
    "\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\001\002\000\026" +
    "\005\057\006\061\007\054\010\052\011\063\014\051\024" +
    "\060\034\055\043\056\044\053\001\002\000\042\013\073" +
    "\014\064\020\074\021\066\022\100\023\075\026\101\027" +
    "\077\030\071\031\072\032\102\033\076\035\230\057\103" +
    "\060\065\061\067\001\002\000\004\016\231\001\002\000" +
    "\030\003\027\006\011\036\024\042\014\050\023\051\026" +
    "\052\005\053\020\054\010\055\017\056\021\001\002\000" +
    "\032\003\027\006\011\017\233\036\024\042\014\050\023" +
    "\051\026\052\005\053\020\054\010\055\017\056\021\001" +
    "\002\000\034\002\uffe6\003\uffe6\006\uffe6\017\uffe6\036\uffe6" +
    "\042\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055" +
    "\uffe6\056\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\036\002\030\003\012\004\032\005\033\006" +
    "\027\007\031\010\015\011\011\012\014\013\005\017\024" +
    "\020\006\021\021\022\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\004" +
    "\161\005\033\006\027\007\031\010\015\011\011\012\014" +
    "\013\005\017\024\020\006\021\021\022\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\061\001\001\000\002" +
    "\001\001\000\004\016\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\123\016\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\121\001\001\000\004\016\120\001" +
    "\001\000\004\016\117\001\001\000\004\016\116\001\001" +
    "\000\002\001\001\000\004\016\115\001\001\000\004\016" +
    "\114\001\001\000\004\016\113\001\001\000\004\016\112" +
    "\001\001\000\004\016\111\001\001\000\004\016\110\001" +
    "\001\000\004\016\107\001\001\000\004\016\106\001\001" +
    "\000\004\016\105\001\001\000\004\016\104\001\001\000" +
    "\004\016\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\137\001\001\000\002\001\001\000\004\016" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\146\001\001\000\002\001\001\000" +
    "\004\016\147\001\001\000\002\001\001\000\010\014\154" +
    "\023\153\024\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\157\004\032\005\033\006\027\007\031\010" +
    "\015\011\011\012\014\013\005\017\024\020\006\021\021" +
    "\022\003\001\001\000\032\004\161\005\033\006\027\007" +
    "\031\010\015\011\011\012\014\013\005\017\024\020\006" +
    "\021\021\022\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\175\004\032\005" +
    "\033\006\027\007\031\010\015\011\011\012\014\013\005" +
    "\017\024\020\006\021\021\022\003\001\001\000\032\004" +
    "\161\005\033\006\027\007\031\010\015\011\011\012\014" +
    "\013\005\017\024\020\006\021\021\022\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\210\004\032\005\033\006\027\007\031\010" +
    "\015\011\011\012\014\013\005\017\024\020\006\021\021" +
    "\022\003\001\001\000\032\004\161\005\033\006\027\007" +
    "\031\010\015\011\011\012\014\013\005\017\024\020\006" +
    "\021\021\022\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\214\004\032\005\033\006\027\007\031" +
    "\010\015\011\011\012\014\013\005\017\024\020\006\021" +
    "\021\022\003\001\001\000\032\004\161\005\033\006\027" +
    "\007\031\010\015\011\011\012\014\013\005\017\024\020" +
    "\006\021\021\022\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\231\004\032\005\033\006\027\007\031" +
    "\010\015\011\011\012\014\013\005\017\024\020\006\021" +
    "\021\022\003\001\001\000\032\004\161\005\033\006\027" +
    "\007\031\010\015\011\011\012\014\013\005\017\024\020" +
    "\006\021\021\022\003\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JCParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JCParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JCParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    JCLexer s;
    JCParser(JCLexer s){this.s = s;}

//    public LinkedList<Errores> listaErrores = new LinkedList<>();
    private LinkedList<JCError> errorList = new LinkedList<>();
    public LinkedList<JCError> getSyntaxErrorList(){
        return errorList;
    }

    public void syntax_error(Symbol s){
        errorList.add(new JCError("Sintaxis", "Error en la instruccion, componente: "+s.value, s.left, s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        errorList.add(new JCError("Sintaxis - FATAL", "Error en la instruccion, componente: "+s.value, s.left, s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JCParser$actions {



  private final JCParser parser;

  /** Constructor */
  CUP$JCParser$actions(JCParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JCParser$do_action_part00000000(
    int                        CUP$JCParser$act_num,
    java_cup.runtime.lr_parser CUP$JCParser$parser,
    java.util.Stack            CUP$JCParser$stack,
    int                        CUP$JCParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JCParser$result;

      /* select the action based on the action number */
      switch (CUP$JCParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> start_val = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		RESULT = start_val;
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JCParser$parser.done_parsing();
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= STATEMENTS 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // STATEMENTS ::= STATEMENTS STATEMENT 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STATEMENTS ::= STATEMENT 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STATEMENT ::= IMPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STATEMENT ::= DECLARATION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATEMENT ::= ASSIGNATION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENT ::= IF_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENT ::= INCREMENT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEMENT ::= DECREMENT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STATEMENT ::= WHILE_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STATEMENT ::= FOR_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STATEMENT ::= DO_WHILE_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STATEMENT ::= BREAK 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STATEMENT ::= CONTINUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STATEMENT ::= error ENDLINE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BREAK ::= RW_BREAK ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new Break(aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("BREAK",15, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTINUE ::= RW_CONTINUE ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new Continue(aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("CONTINUE",16, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IMPRESION ::= RW_PRINT OPENPAR EXPRESION CLOSEPAR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		   RESULT = new Print(a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("IMPRESION",3, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARATION ::= RW_CONST ID COLON TYPES EQUALS EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		Types b = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new Declaration(a, b, c, true, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARATION ::= RW_CONST ID COLON TYPES ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Types b = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new Declaration(a, b, null, true,aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARATION ::= RW_VAR ID COLON TYPES ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Types b = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new Declaration(a, b, null, false, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARATION ::= RW_VAR ID COLON TYPES EQUALS EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		Types b = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new Declaration(a, b, c, false, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TYPE_CAST_OPERATOR ::= OPENPAR TYPES CLOSEPAR 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = type; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPE_CAST_OPERATOR",19, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASSIGNATION ::= ID EQUALS EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT=new SymbolAssignation(a, b, aleft, aright);  
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",5, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IF_STMT ::= RW_IF OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new IfStatement(a, b, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("IF_STMT",6, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IF_STMT ::= RW_IF OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE RW_ELSE OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-8)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new IfStatement(a, b, c, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("IF_STMT",6, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-10)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // WHILE_STMT ::= RW_WHILE OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new WhileStatement(a, b, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("WHILE_STMT",7, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DO_WHILE_STMT ::= RW_DO OPENBRACE STATEMENTS CLOSEBRACE RW_WHILE OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new DoWhileStatement(b, a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DO_WHILE_STMT",8, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DO_WHILE_STMT ::= RW_DO OPENBRACE STATEMENTS CLOSEBRACE RW_WHILE OPENPAR EXPRESION CLOSEPAR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		   RESULT = new DoWhileStatement(b, a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DO_WHILE_STMT",8, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-8)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FOR_STMT ::= RW_FOR OPENPAR ASSIGNATION EXPRESION ENDLINE FOR_UPDATE CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new ForStatement(a, b, c, d, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("FOR_STMT",9, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FOR_UPDATE ::= ID EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new SymbolAssignation(a, b, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",10, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FOR_UPDATE ::= INCREMENT_NO_ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",10, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FOR_UPDATE ::= DECREMENT_NO_ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",10, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INCREMENT_NO_ENDLINE ::= ID PLUS PLUS 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		   RESULT = new SymbolAssignation(a, new Arithmetic(new SymbolAccess(a, aleft, aright),new Primitive(Types.INTEGER, 1, aleft, aright),ArithmeticOperands.SUM, aleft, aright), aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("INCREMENT_NO_ENDLINE",17, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECREMENT_NO_ENDLINE ::= ID MINUS MINUS 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		   RESULT = new SymbolAssignation(a, new Arithmetic(new SymbolAccess(a, aleft, aright), new Primitive(Types.INTEGER, 1, aleft, aright), ArithmeticOperands.SUB, aleft, aright), aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECREMENT_NO_ENDLINE",18, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INCREMENT ::= ID PLUS PLUS ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		   RESULT = new SymbolAssignation(a, new Arithmetic(new SymbolAccess(a, aleft, aright),new Primitive(Types.INTEGER, 1, aleft, aright),ArithmeticOperands.SUM, aleft, aright), aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("INCREMENT",13, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECREMENT ::= ID MINUS MINUS ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		   RESULT = new SymbolAssignation(a, new Arithmetic(new SymbolAccess(a, aleft, aright), new Primitive(Types.INTEGER, 1, aleft, aright), ArithmeticOperands.SUB, aleft, aright), aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECREMENT",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TYPES ::= RW_INT 
            {
              Types RESULT =null;
		   RESULT=Types.INTEGER;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",11, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TYPES ::= RW_DOUBLE 
            {
              Types RESULT =null;
		   RESULT=Types.DOUBLE;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",11, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TYPES ::= RW_STRING 
            {
              Types RESULT =null;
		   RESULT=Types.STRING;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",11, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TYPES ::= RW_BOOL 
            {
              Types RESULT =null;
		   RESULT=Types.BOOLEAN;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",11, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TYPES ::= RW_CHAR 
            {
              Types RESULT =null;
		   RESULT=Types.CHARACTER;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",11, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= OPENPAR TYPES CLOSEPAR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Types a = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new TypeCast(b, a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= MINUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, ArithmeticOperands.NEG, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= EXPRESION ASTERISK EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.MUL, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION SLASH EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.DIV, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION DOUBLEASTERISK EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.POW, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.MOD, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= EXPRESION MINUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.SUB, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= EXPRESION PLUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.SUM, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= EXPRESION DOUBLEEQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.EQUALS, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= EXPRESION NOT_EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.NOT_EQUALS, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= EXPRESION LESS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.LESS_THAN, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= EXPRESION LESSEQUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.LESS_THAN_OR_EQUALS, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= EXPRESION GREATER EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.GREATER_THAN, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= EXPRESION GREATEREQUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.GREATER_THAN_OR_EQUALS, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= NEGATION EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Logical(a, LogicalOperands.NOT, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Logical(a, b, LogicalOperands.OR, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Logical(a, b, LogicalOperands.AND, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Logical(a, b, LogicalOperands.XOR, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= INTEGER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive(Types.INTEGER,Integer.parseInt(a),  aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= DECIMAL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive(Types.DOUBLE,new Double(a),  aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= STRING 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive( Types.STRING,a, aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= CHAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive(Types.CHARACTER, a.charAt(0), aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= RW_TRUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive(Types.BOOLEAN, true, aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= RW_FALSE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive(Types.BOOLEAN, false, aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new SymbolAccess(a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JCParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JCParser$do_action(
    int                        CUP$JCParser$act_num,
    java_cup.runtime.lr_parser CUP$JCParser$parser,
    java.util.Stack            CUP$JCParser$stack,
    int                        CUP$JCParser$top)
    throws java.lang.Exception
    {
              return CUP$JCParser$do_action_part00000000(
                               CUP$JCParser$act_num,
                               CUP$JCParser$parser,
                               CUP$JCParser$stack,
                               CUP$JCParser$top);
    }
}

}
