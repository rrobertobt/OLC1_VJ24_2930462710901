
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package edu.robertob.olc1.vj24.Analysis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.HashMap;
import edu.robertob.olc1.vj24.Engine.Base.*;
import edu.robertob.olc1.vj24.Engine.Structs.*;
import edu.robertob.olc1.vj24.Engine.Statements.*;
import edu.robertob.olc1.vj24.Engine.Statements.Struct.*;
import edu.robertob.olc1.vj24.Engine.Expressions.*;
import edu.robertob.olc1.vj24.Engine.BuiltIn.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JCParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public JCParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JCParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JCParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\213\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\004\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\004\000\002\004\003\000\002\004\004\000\002" +
    "\032\007\000\002\023\004\000\002\024\004\000\002\005" +
    "\007\000\002\041\003\000\002\041\003\000\002\006\007" +
    "\000\002\006\011\000\002\006\015\000\002\006\017\000" +
    "\002\006\011\000\002\006\011\000\002\050\007\000\002" +
    "\050\005\000\002\047\005\000\002\047\003\000\002\051" +
    "\003\000\002\054\015\000\002\055\010\000\002\055\010" +
    "\000\002\042\010\000\002\033\011\000\002\033\012\000" +
    "\002\034\006\000\002\034\004\000\002\036\005\000\002" +
    "\036\003\000\002\037\003\000\002\035\005\000\002\035" +
    "\006\000\002\040\005\000\002\040\004\000\002\027\005" +
    "\000\002\007\006\000\002\007\011\000\002\007\014\000" +
    "\002\007\006\000\002\007\011\000\002\007\014\000\002" +
    "\043\012\000\002\043\011\000\002\043\011\000\002\044" +
    "\004\000\002\044\003\000\002\045\007\000\002\046\007" +
    "\000\002\056\010\000\002\057\004\000\002\057\003\000" +
    "\002\060\006\000\002\060\006\000\002\063\005\000\002" +
    "\064\005\000\002\064\003\000\002\065\005\000\002\066" +
    "\003\000\002\066\003\000\002\012\011\000\002\012\012" +
    "\000\002\012\016\000\002\012\015\000\002\030\012\000" +
    "\002\031\004\000\002\031\003\000\002\013\011\000\002" +
    "\014\012\000\002\014\013\000\002\015\014\000\002\016" +
    "\005\000\002\016\003\000\002\016\003\000\002\025\005" +
    "\000\002\026\005\000\002\021\006\000\002\022\006\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\020" +
    "\006\000\002\020\004\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\004\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\006\000\002\020\011\000\002\020\006\000\002\020\006" +
    "\000\002\020\006\000\002\020\003\000\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015f\000\056\003\026\006\022\036\033\037\040\040" +
    "\006\041\046\042\037\045\023\046\010\050\041\051\042" +
    "\052\024\053\020\054\013\055\025\056\011\057\044\060" +
    "\031\061\021\062\055\074\053\104\052\001\002\000\004" +
    "\012\u0161\001\002\000\062\002\ufff8\003\ufff8\006\ufff8\017" +
    "\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\045\ufff8" +
    "\046\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055" +
    "\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\074\ufff8" +
    "\104\ufff8\001\002\000\016\006\uff9c\012\uff9c\015\uff9c\030" +
    "\uff9c\035\uff9c\067\uff9c\001\002\000\062\002\uffee\003\uffee" +
    "\006\uffee\017\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042" +
    "\uffee\045\uffee\046\uffee\050\uffee\051\uffee\052\uffee\053\uffee" +
    "\054\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee\062" +
    "\uffee\074\uffee\104\uffee\001\002\000\016\006\uff99\012\uff99" +
    "\015\uff99\030\uff99\035\uff99\067\uff99\001\002\000\004\016" +
    "\u0159\001\002\000\062\002\ufff7\003\ufff7\006\ufff7\017\ufff7" +
    "\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\045\ufff7\046" +
    "\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7" +
    "\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\074\ufff7\104" +
    "\ufff7\001\002\000\004\012\u0158\001\002\000\062\002\ufff4" +
    "\003\ufff4\006\ufff4\017\ufff4\036\ufff4\037\ufff4\040\ufff4\041" +
    "\ufff4\042\ufff4\045\ufff4\046\ufff4\050\ufff4\051\ufff4\052\ufff4" +
    "\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061" +
    "\ufff4\062\ufff4\074\ufff4\104\ufff4\001\002\000\062\002\ufff5" +
    "\003\ufff5\006\ufff5\017\ufff5\036\ufff5\037\ufff5\040\ufff5\041" +
    "\ufff5\042\ufff5\045\ufff5\046\ufff5\050\ufff5\051\ufff5\052\ufff5" +
    "\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061" +
    "\ufff5\062\ufff5\074\ufff5\104\ufff5\001\002\000\062\002\ufff0" +
    "\003\ufff0\006\ufff0\017\ufff0\036\ufff0\037\ufff0\040\ufff0\041" +
    "\ufff0\042\ufff0\045\ufff0\046\ufff0\050\ufff0\051\ufff0\052\ufff0" +
    "\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061" +
    "\ufff0\062\ufff0\074\ufff0\104\ufff0\001\002\000\004\006\u0127" +
    "\001\002\000\004\034\u0121\001\002\000\036\005\076\006" +
    "\101\007\070\010\066\011\104\012\u011e\014\065\024\077" +
    "\034\072\043\075\044\067\100\073\102\071\103\100\001" +
    "\002\000\016\013\u0117\014\u0118\015\325\034\171\067\326" +
    "\071\u0119\001\002\000\016\006\uff9a\012\uff9a\015\uff9a\030" +
    "\uff9a\035\uff9a\067\uff9a\001\002\000\004\006\uffe4\001\002" +
    "\000\004\012\u0116\001\002\000\004\012\u0115\001\002\000" +
    "\004\002\u0114\001\002\000\062\002\ufff6\003\ufff6\006\ufff6" +
    "\017\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\045" +
    "\ufff6\046\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6" +
    "\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\074" +
    "\ufff6\104\ufff6\001\002\000\004\006\u0110\001\002\000\062" +
    "\002\uffef\003\uffef\006\uffef\017\uffef\036\uffef\037\uffef\040" +
    "\uffef\041\uffef\042\uffef\045\uffef\046\uffef\050\uffef\051\uffef" +
    "\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef\060" +
    "\uffef\061\uffef\062\uffef\074\uffef\104\uffef\001\002\000\004" +
    "\034\u010c\001\002\000\062\002\ufff3\003\ufff3\006\ufff3\017" +
    "\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\045\ufff3" +
    "\046\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055" +
    "\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\074\ufff3" +
    "\104\ufff3\001\002\000\062\002\ufff9\003\ufff9\006\ufff9\017" +
    "\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\045\ufff9" +
    "\046\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055" +
    "\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\074\ufff9" +
    "\104\ufff9\001\002\000\062\002\ufffc\003\ufffc\006\ufffc\017" +
    "\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\045\ufffc" +
    "\046\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055" +
    "\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\074\ufffc" +
    "\104\ufffc\001\002\000\004\034\364\001\002\000\016\006" +
    "\uff9d\012\uff9d\015\uff9d\030\uff9d\035\uff9d\067\uff9d\001\002" +
    "\000\016\006\uff98\012\uff98\015\uff98\030\uff98\035\uff98\067" +
    "\uff98\001\002\000\004\006\uffe3\001\002\000\062\002\ufffb" +
    "\003\ufffb\006\ufffb\017\ufffb\036\ufffb\037\ufffb\040\ufffb\041" +
    "\ufffb\042\ufffb\045\ufffb\046\ufffb\050\ufffb\051\ufffb\052\ufffb" +
    "\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061" +
    "\ufffb\062\ufffb\074\ufffb\104\ufffb\001\002\000\004\034\302" +
    "\001\002\000\062\002\ufffd\003\ufffd\006\ufffd\017\ufffd\036" +
    "\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\045\ufffd\046\ufffd" +
    "\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056" +
    "\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd\074\ufffd\104\ufffd" +
    "\001\002\000\016\006\uff9b\012\uff9b\015\uff9b\030\uff9b\035" +
    "\uff9b\067\uff9b\001\002\000\062\002\ufffe\003\ufffe\006\ufffe" +
    "\017\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\045" +
    "\ufffe\046\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe" +
    "\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\074" +
    "\ufffe\104\ufffe\001\002\000\060\002\000\003\026\006\022" +
    "\036\033\037\040\040\006\041\046\042\037\045\023\046" +
    "\010\050\041\051\042\052\024\053\020\054\013\055\025" +
    "\056\011\057\044\060\031\061\021\062\055\074\053\104" +
    "\052\001\002\000\062\002\uffed\003\uffed\006\uffed\017\uffed" +
    "\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\045\uffed\046" +
    "\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed" +
    "\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed\074\uffed\104" +
    "\uffed\001\002\000\004\016\265\001\002\000\004\027\253" +
    "\001\002\000\004\006\233\001\002\000\004\034\064\001" +
    "\002\000\062\002\uffec\003\uffec\006\uffec\017\uffec\036\uffec" +
    "\037\uffec\040\uffec\041\uffec\042\uffec\045\uffec\046\uffec\050" +
    "\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec" +
    "\057\uffec\060\uffec\061\uffec\062\uffec\074\uffec\104\uffec\001" +
    "\002\000\062\002\ufff1\003\ufff1\006\ufff1\017\ufff1\036\ufff1" +
    "\037\ufff1\040\ufff1\041\ufff1\042\ufff1\045\ufff1\046\ufff1\050" +
    "\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1" +
    "\057\ufff1\060\ufff1\061\ufff1\062\ufff1\074\ufff1\104\ufff1\001" +
    "\002\000\062\002\ufffa\003\ufffa\006\ufffa\017\ufffa\036\ufffa" +
    "\037\ufffa\040\ufffa\041\ufffa\042\ufffa\045\ufffa\046\ufffa\050" +
    "\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa" +
    "\057\ufffa\060\ufffa\061\ufffa\062\ufffa\074\ufffa\104\ufffa\001" +
    "\002\000\004\012\063\001\002\000\062\002\uffea\003\uffea" +
    "\006\uffea\017\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042" +
    "\uffea\045\uffea\046\uffea\050\uffea\051\uffea\052\uffea\053\uffea" +
    "\054\uffea\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea\062" +
    "\uffea\074\uffea\104\uffea\001\002\000\062\002\ufff2\003\ufff2" +
    "\006\ufff2\017\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042" +
    "\ufff2\045\ufff2\046\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2" +
    "\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062" +
    "\ufff2\074\ufff2\104\ufff2\001\002\000\034\005\076\006\101" +
    "\007\070\010\066\011\104\014\065\024\077\034\072\043" +
    "\075\044\067\100\073\102\071\103\100\001\002\000\034" +
    "\005\076\006\101\007\070\010\066\011\104\014\065\024" +
    "\077\034\072\043\075\044\067\100\073\102\071\103\100" +
    "\001\002\000\054\012\uff84\013\uff84\014\uff84\017\uff84\020" +
    "\uff84\021\uff84\022\uff84\023\uff84\026\uff84\027\uff84\030\uff84" +
    "\031\uff84\032\uff84\033\uff84\035\uff84\063\uff84\064\uff84\065" +
    "\uff84\066\uff84\070\uff84\073\uff84\001\002\000\054\012\uff80" +
    "\013\uff80\014\uff80\017\uff80\020\uff80\021\uff80\022\uff80\023" +
    "\uff80\026\uff80\027\uff80\030\uff80\031\uff80\032\uff80\033\uff80" +
    "\035\uff80\063\uff80\064\uff80\065\uff80\066\uff80\070\uff80\073" +
    "\uff80\001\002\000\054\012\uff85\013\uff85\014\uff85\017\uff85" +
    "\020\uff85\021\uff85\022\uff85\023\uff85\026\uff85\027\uff85\030" +
    "\uff85\031\uff85\032\uff85\033\uff85\035\uff85\063\uff85\064\uff85" +
    "\065\uff85\066\uff85\070\uff85\073\uff85\001\002\000\004\034" +
    "\227\001\002\000\050\005\076\006\101\007\070\010\066" +
    "\011\104\014\065\024\077\034\072\037\040\040\006\041" +
    "\046\043\075\044\067\045\023\046\010\050\041\100\073" +
    "\102\071\103\100\001\002\000\004\034\217\001\002\000" +
    "\054\012\uff78\013\uff78\014\uff78\017\uff78\020\uff78\021\uff78" +
    "\022\uff78\023\uff78\026\uff78\027\uff78\030\uff78\031\uff78\032" +
    "\uff78\033\uff78\035\uff78\063\uff78\064\uff78\065\uff78\066\uff78" +
    "\070\uff78\073\uff78\001\002\000\054\012\uff81\013\uff81\014" +
    "\uff81\017\uff81\020\uff81\021\uff81\022\uff81\023\uff81\026\uff81" +
    "\027\uff81\030\uff81\031\uff81\032\uff81\033\uff81\035\uff81\063" +
    "\uff81\064\uff81\065\uff81\066\uff81\070\uff81\073\uff81\001\002" +
    "\000\054\012\uff83\013\uff83\014\uff83\017\uff83\020\uff83\021" +
    "\uff83\022\uff83\023\uff83\026\uff83\027\uff83\030\uff83\031\uff83" +
    "\032\uff83\033\uff83\035\uff83\063\uff83\064\uff83\065\uff83\066" +
    "\uff83\070\uff83\073\uff83\001\002\000\034\005\076\006\101" +
    "\007\070\010\066\011\104\014\065\024\077\034\072\043" +
    "\075\044\067\100\073\102\071\103\100\001\002\000\004" +
    "\034\213\001\002\000\062\012\uff7f\013\uff7f\014\uff7f\017" +
    "\uff7f\020\uff7f\021\uff7f\022\uff7f\023\uff7f\026\uff7f\027\uff7f" +
    "\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034\171\035\uff7f\063" +
    "\uff7f\064\uff7f\065\uff7f\066\uff7f\067\170\070\uff7f\071\172" +
    "\073\uff7f\001\002\000\054\012\uff7e\013\uff7e\014\uff7e\017" +
    "\uff7e\020\uff7e\021\uff7e\022\uff7e\023\uff7e\026\uff7e\027\uff7e" +
    "\030\uff7e\031\uff7e\032\uff7e\033\uff7e\035\uff7e\063\uff7e\064" +
    "\uff7e\065\uff7e\066\uff7e\070\uff7e\073\uff7e\001\002\000\042" +
    "\013\114\014\105\020\115\021\110\022\121\023\116\026" +
    "\122\027\120\030\112\031\113\032\123\033\117\035\111" +
    "\063\124\064\106\065\107\001\002\000\054\012\uff82\013" +
    "\uff82\014\uff82\017\uff82\020\uff82\021\uff82\022\uff82\023\uff82" +
    "\026\uff82\027\uff82\030\uff82\031\uff82\032\uff82\033\uff82\035" +
    "\uff82\063\uff82\064\uff82\065\uff82\066\uff82\070\uff82\073\uff82" +
    "\001\002\000\034\005\076\006\101\007\070\010\066\011" +
    "\104\014\065\024\077\034\072\043\075\044\067\100\073" +
    "\102\071\103\100\001\002\000\034\005\076\006\101\007" +
    "\070\010\066\011\104\014\065\024\077\034\072\043\075" +
    "\044\067\100\073\102\071\103\100\001\002\000\034\005" +
    "\076\006\101\007\070\010\066\011\104\014\065\024\077" +
    "\034\072\043\075\044\067\100\073\102\071\103\100\001" +
    "\002\000\034\005\076\006\101\007\070\010\066\011\104" +
    "\014\065\024\077\034\072\043\075\044\067\100\073\102" +
    "\071\103\100\001\002\000\004\016\140\001\002\000\034" +
    "\005\076\006\101\007\070\010\066\011\104\014\065\024" +
    "\077\034\072\043\075\044\067\100\073\102\071\103\100" +
    "\001\002\000\034\005\076\006\101\007\070\010\066\011" +
    "\104\014\065\024\077\034\072\043\075\044\067\100\073" +
    "\102\071\103\100\001\002\000\034\005\076\006\101\007" +
    "\070\010\066\011\104\014\065\024\077\034\072\043\075" +
    "\044\067\100\073\102\071\103\100\001\002\000\034\005" +
    "\076\006\101\007\070\010\066\011\104\014\065\024\077" +
    "\034\072\043\075\044\067\100\073\102\071\103\100\001" +
    "\002\000\034\005\076\006\101\007\070\010\066\011\104" +
    "\014\065\024\077\034\072\043\075\044\067\100\073\102" +
    "\071\103\100\001\002\000\034\005\076\006\101\007\070" +
    "\010\066\011\104\014\065\024\077\034\072\043\075\044" +
    "\067\100\073\102\071\103\100\001\002\000\034\005\076" +
    "\006\101\007\070\010\066\011\104\014\065\024\077\034" +
    "\072\043\075\044\067\100\073\102\071\103\100\001\002" +
    "\000\034\005\076\006\101\007\070\010\066\011\104\014" +
    "\065\024\077\034\072\043\075\044\067\100\073\102\071" +
    "\103\100\001\002\000\034\005\076\006\101\007\070\010" +
    "\066\011\104\014\065\024\077\034\072\043\075\044\067" +
    "\100\073\102\071\103\100\001\002\000\034\005\076\006" +
    "\101\007\070\010\066\011\104\014\065\024\077\034\072" +
    "\043\075\044\067\100\073\102\071\103\100\001\002\000" +
    "\034\005\076\006\101\007\070\010\066\011\104\014\065" +
    "\024\077\034\072\043\075\044\067\100\073\102\071\103" +
    "\100\001\002\000\054\012\uff88\013\114\014\105\017\uff88" +
    "\020\115\021\110\022\121\023\116\026\122\027\120\030" +
    "\112\031\113\032\123\033\117\035\uff88\063\uff88\064\106" +
    "\065\107\066\uff88\070\uff88\073\uff88\001\002\000\054\012" +
    "\uff8a\013\114\014\105\017\uff8a\020\115\021\110\022\121" +
    "\023\116\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033" +
    "\uff8a\035\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a\070\uff8a" +
    "\073\uff8a\001\002\000\054\012\uff8f\013\114\014\105\017" +
    "\uff8f\020\115\021\110\022\121\023\116\026\uff8f\027\uff8f" +
    "\030\uff8f\031\uff8f\032\uff8f\033\uff8f\035\uff8f\063\uff8f\064" +
    "\uff8f\065\uff8f\066\uff8f\070\uff8f\073\uff8f\001\002\000\054" +
    "\012\uff92\013\uff92\014\uff92\017\uff92\020\uff92\021\uff92\022" +
    "\uff92\023\116\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92" +
    "\033\uff92\035\uff92\063\uff92\064\uff92\065\uff92\066\uff92\070" +
    "\uff92\073\uff92\001\002\000\054\012\uff8d\013\114\014\105" +
    "\017\uff8d\020\115\021\110\022\121\023\116\026\uff8d\027" +
    "\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d\035\uff8d\063\uff8d" +
    "\064\uff8d\065\uff8d\066\uff8d\070\uff8d\073\uff8d\001\002\000" +
    "\054\012\uff8e\013\114\014\105\017\uff8e\020\115\021\110" +
    "\022\121\023\116\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032" +
    "\uff8e\033\uff8e\035\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e" +
    "\070\uff8e\073\uff8e\001\002\000\052\012\uff93\013\uff93\014" +
    "\uff93\017\uff93\020\uff93\021\uff93\022\uff93\026\uff93\027\uff93" +
    "\030\uff93\031\uff93\032\uff93\033\uff93\035\uff93\063\uff93\064" +
    "\uff93\065\uff93\066\uff93\070\uff93\073\uff93\001\002\000\054" +
    "\012\uff95\013\uff95\014\uff95\017\uff95\020\uff95\021\uff95\022" +
    "\uff95\023\116\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95" +
    "\033\uff95\035\uff95\063\uff95\064\uff95\065\uff95\066\uff95\070" +
    "\uff95\073\uff95\001\002\000\054\012\uff90\013\uff90\014\uff90" +
    "\017\uff90\020\115\021\110\022\121\023\116\026\uff90\027" +
    "\uff90\030\uff90\031\uff90\032\uff90\033\uff90\035\uff90\063\uff90" +
    "\064\uff90\065\uff90\066\uff90\070\uff90\073\uff90\001\002\000" +
    "\054\012\uff8c\013\114\014\105\017\uff8c\020\115\021\110" +
    "\022\121\023\116\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032" +
    "\uff8c\033\uff8c\035\uff8c\063\uff8c\064\uff8c\065\uff8c\066\uff8c" +
    "\070\uff8c\073\uff8c\001\002\000\054\012\uff8b\013\114\014" +
    "\105\017\uff8b\020\115\021\110\022\121\023\116\026\uff8b" +
    "\027\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\035\uff8b\063" +
    "\uff8b\064\uff8b\065\uff8b\066\uff8b\070\uff8b\073\uff8b\001\002" +
    "\000\036\005\076\006\101\007\070\010\066\011\104\014" +
    "\065\024\077\034\072\043\075\044\067\072\141\100\073" +
    "\102\071\103\100\001\002\000\004\073\160\001\002\000" +
    "\040\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\014\uffbd" +
    "\017\uffbd\024\uffbd\034\uffbd\043\uffbd\044\uffbd\072\uffbd\100" +
    "\uffbd\102\uffbd\103\uffbd\001\002\000\040\005\076\006\101" +
    "\007\070\010\066\011\104\014\065\017\154\024\077\034" +
    "\072\043\075\044\067\072\141\100\073\102\071\103\100" +
    "\001\002\000\004\017\153\001\002\000\042\013\114\014" +
    "\105\020\115\021\110\022\121\023\116\026\122\027\120" +
    "\030\112\031\113\032\123\033\117\063\124\064\106\065" +
    "\107\073\146\001\002\000\004\016\147\001\002\000\056" +
    "\003\026\006\022\036\033\037\040\040\006\041\046\042" +
    "\037\045\023\046\010\050\041\051\042\052\024\053\020" +
    "\054\013\055\025\056\011\057\044\060\031\061\021\062" +
    "\055\074\053\104\052\001\002\000\060\003\026\006\022" +
    "\017\151\036\033\037\040\040\006\041\046\042\037\045" +
    "\023\046\010\050\041\051\042\052\024\053\020\054\013" +
    "\055\025\056\011\057\044\060\031\061\021\062\055\074" +
    "\053\104\052\001\002\000\040\005\uffbc\006\uffbc\007\uffbc" +
    "\010\uffbc\011\uffbc\014\uffbc\017\uffbc\024\uffbc\034\uffbc\043" +
    "\uffbc\044\uffbc\072\uffbc\100\uffbc\102\uffbc\103\uffbc\001\002" +
    "\000\062\002\uffff\003\uffff\006\uffff\017\uffff\036\uffff\037" +
    "\uffff\040\uffff\041\uffff\042\uffff\045\uffff\046\uffff\050\uffff" +
    "\051\uffff\052\uffff\053\uffff\054\uffff\055\uffff\056\uffff\057" +
    "\uffff\060\uffff\061\uffff\062\uffff\074\uffff\104\uffff\001\002" +
    "\000\062\002\uffbf\003\uffbf\006\uffbf\017\uffbf\036\uffbf\037" +
    "\uffbf\040\uffbf\041\uffbf\042\uffbf\045\uffbf\046\uffbf\050\uffbf" +
    "\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057" +
    "\uffbf\060\uffbf\061\uffbf\062\uffbf\074\uffbf\104\uffbf\001\002" +
    "\000\062\002\uffc0\003\uffc0\006\uffc0\017\uffc0\036\uffc0\037" +
    "\uffc0\040\uffc0\041\uffc0\042\uffc0\045\uffc0\046\uffc0\050\uffc0" +
    "\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057" +
    "\uffc0\060\uffc0\061\uffc0\062\uffc0\074\uffc0\104\uffc0\001\002" +
    "\000\040\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\014" +
    "\uffbe\017\uffbe\024\uffbe\034\uffbe\043\uffbe\044\uffbe\072\uffbe" +
    "\100\uffbe\102\uffbe\103\uffbe\001\002\000\004\017\157\001" +
    "\002\000\062\002\uffc1\003\uffc1\006\uffc1\017\uffc1\036\uffc1" +
    "\037\uffc1\040\uffc1\041\uffc1\042\uffc1\045\uffc1\046\uffc1\050" +
    "\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1" +
    "\057\uffc1\060\uffc1\061\uffc1\062\uffc1\074\uffc1\104\uffc1\001" +
    "\002\000\004\016\161\001\002\000\056\003\026\006\022" +
    "\036\033\037\040\040\006\041\046\042\037\045\023\046" +
    "\010\050\041\051\042\052\024\053\020\054\013\055\025" +
    "\056\011\057\044\060\031\061\021\062\055\074\053\104" +
    "\052\001\002\000\060\003\026\006\022\017\163\036\033" +
    "\037\040\040\006\041\046\042\037\045\023\046\010\050" +
    "\041\051\042\052\024\053\020\054\013\055\025\056\011" +
    "\057\044\060\031\061\021\062\055\074\053\104\052\001" +
    "\002\000\004\017\uffbb\001\002\000\054\012\uff94\013\uff94" +
    "\014\uff94\017\uff94\020\uff94\021\uff94\022\uff94\023\116\026" +
    "\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94\035\uff94" +
    "\063\uff94\064\uff94\065\uff94\066\uff94\070\uff94\073\uff94\001" +
    "\002\000\054\012\uff86\013\114\014\105\017\uff86\020\115" +
    "\021\110\022\121\023\116\026\122\027\120\030\112\031" +
    "\113\032\123\033\117\035\uff86\063\uff86\064\uff86\065\uff86" +
    "\066\uff86\070\uff86\073\uff86\001\002\000\054\012\uff87\013" +
    "\114\014\105\017\uff87\020\115\021\110\022\121\023\116" +
    "\026\122\027\120\030\112\031\113\032\123\033\117\035" +
    "\uff87\063\uff87\064\uff87\065\107\066\uff87\070\uff87\073\uff87" +
    "\001\002\000\054\012\uff91\013\uff91\014\uff91\017\uff91\020" +
    "\115\021\110\022\121\023\116\026\uff91\027\uff91\030\uff91" +
    "\031\uff91\032\uff91\033\uff91\035\uff91\063\uff91\064\uff91\065" +
    "\uff91\066\uff91\070\uff91\073\uff91\001\002\000\034\005\076" +
    "\006\101\007\070\010\066\011\104\014\065\024\077\034" +
    "\072\043\075\044\067\100\073\102\071\103\100\001\002" +
    "\000\036\005\076\006\101\007\070\010\066\011\104\014" +
    "\065\024\077\034\072\035\200\043\075\044\067\100\073" +
    "\102\071\103\100\001\002\000\004\101\173\001\002\000" +
    "\004\034\174\001\002\000\034\005\076\006\101\007\070" +
    "\010\066\011\104\014\065\024\077\034\072\043\075\044" +
    "\067\100\073\102\071\103\100\001\002\000\042\013\114" +
    "\014\105\020\115\021\110\022\121\023\116\026\122\027" +
    "\120\030\112\031\113\032\123\033\117\035\176\063\124" +
    "\064\106\065\107\001\002\000\054\012\uffd4\013\uffd4\014" +
    "\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\035\uffd4\063" +
    "\uffd4\064\uffd4\065\uffd4\066\uffd4\070\uffd4\073\uffd4\001\002" +
    "\000\006\035\uffce\066\uffce\001\002\000\054\012\uffcc\013" +
    "\uffcc\014\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc" +
    "\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\035" +
    "\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\070\uffcc\073\uffcc" +
    "\001\002\000\006\035\204\066\203\001\002\000\044\013" +
    "\114\014\105\020\115\021\110\022\121\023\116\026\122" +
    "\027\120\030\112\031\113\032\123\033\117\035\uffcd\063" +
    "\124\064\106\065\107\066\uffcd\001\002\000\034\005\076" +
    "\006\101\007\070\010\066\011\104\014\065\024\077\034" +
    "\072\043\075\044\067\100\073\102\071\103\100\001\002" +
    "\000\054\012\uffcb\013\uffcb\014\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb" +
    "\032\uffcb\033\uffcb\035\uffcb\063\uffcb\064\uffcb\065\uffcb\066" +
    "\uffcb\070\uffcb\073\uffcb\001\002\000\006\035\uffcf\066\uffcf" +
    "\001\002\000\042\013\114\014\105\020\115\021\110\022" +
    "\121\023\116\026\122\027\120\030\112\031\113\032\123" +
    "\033\117\063\124\064\106\065\107\070\207\001\002\000" +
    "\056\012\uff7d\013\uff7d\014\uff7d\017\uff7d\020\uff7d\021\uff7d" +
    "\022\uff7d\023\uff7d\026\uff7d\027\uff7d\030\uff7d\031\uff7d\032" +
    "\uff7d\033\uff7d\035\uff7d\063\uff7d\064\uff7d\065\uff7d\066\uff7d" +
    "\067\210\070\uff7d\073\uff7d\001\002\000\034\005\076\006" +
    "\101\007\070\010\066\011\104\014\065\024\077\034\072" +
    "\043\075\044\067\100\073\102\071\103\100\001\002\000" +
    "\042\013\114\014\105\020\115\021\110\022\121\023\116" +
    "\026\122\027\120\030\112\031\113\032\123\033\117\063" +
    "\124\064\106\065\107\070\212\001\002\000\054\012\uff7c" +
    "\013\uff7c\014\uff7c\017\uff7c\020\uff7c\021\uff7c\022\uff7c\023" +
    "\uff7c\026\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c" +
    "\035\uff7c\063\uff7c\064\uff7c\065\uff7c\066\uff7c\070\uff7c\073" +
    "\uff7c\001\002\000\034\005\076\006\101\007\070\010\066" +
    "\011\104\014\065\024\077\034\072\043\075\044\067\100" +
    "\073\102\071\103\100\001\002\000\042\013\114\014\105" +
    "\020\115\021\110\022\121\023\116\026\122\027\120\030" +
    "\112\031\113\032\123\033\117\035\215\063\124\064\106" +
    "\065\107\001\002\000\054\012\uff79\013\uff79\014\uff79\017" +
    "\uff79\020\uff79\021\uff79\022\uff79\023\uff79\026\uff79\027\uff79" +
    "\030\uff79\031\uff79\032\uff79\033\uff79\035\uff79\063\uff79\064" +
    "\uff79\065\uff79\066\uff79\070\uff79\073\uff79\001\002\000\054" +
    "\012\uff89\013\114\014\105\017\uff89\020\115\021\110\022" +
    "\121\023\116\026\122\027\120\030\112\031\113\032\123" +
    "\033\117\035\uff89\063\uff89\064\uff89\065\uff89\066\uff89\070" +
    "\uff89\073\uff89\001\002\000\034\005\076\006\101\007\070" +
    "\010\066\011\104\014\065\024\077\034\072\043\075\044" +
    "\067\100\073\102\071\103\100\001\002\000\042\013\114" +
    "\014\105\020\115\021\110\022\121\023\116\026\122\027" +
    "\120\030\112\031\113\032\123\033\117\035\221\063\124" +
    "\064\106\065\107\001\002\000\054\012\uff7b\013\uff7b\014" +
    "\uff7b\017\uff7b\020\uff7b\021\uff7b\022\uff7b\023\uff7b\026\uff7b" +
    "\027\uff7b\030\uff7b\031\uff7b\032\uff7b\033\uff7b\035\uff7b\063" +
    "\uff7b\064\uff7b\065\uff7b\066\uff7b\070\uff7b\073\uff7b\001\002" +
    "\000\004\035\225\001\002\000\042\013\114\014\105\020" +
    "\115\021\110\022\121\023\116\026\122\027\120\030\112" +
    "\031\113\032\123\033\117\035\224\063\124\064\106\065" +
    "\107\001\002\000\054\012\uff77\013\uff77\014\uff77\017\uff77" +
    "\020\uff77\021\uff77\022\uff77\023\uff77\026\uff77\027\uff77\030" +
    "\uff77\031\uff77\032\uff77\033\uff77\035\uff77\063\uff77\064\uff77" +
    "\065\uff77\066\uff77\070\uff77\073\uff77\001\002\000\034\005" +
    "\076\006\101\007\070\010\066\011\104\014\065\024\077" +
    "\034\072\043\075\044\067\100\073\102\071\103\100\001" +
    "\002\000\054\012\uff97\013\114\014\105\017\uff97\020\115" +
    "\021\110\022\121\023\116\026\122\027\120\030\112\031" +
    "\113\032\123\033\117\035\uff97\063\124\064\106\065\107" +
    "\066\uff97\070\uff97\073\uff97\001\002\000\034\005\076\006" +
    "\101\007\070\010\066\011\104\014\065\024\077\034\072" +
    "\043\075\044\067\100\073\102\071\103\100\001\002\000" +
    "\042\013\114\014\105\020\115\021\110\022\121\023\116" +
    "\026\122\027\120\030\112\031\113\032\123\033\117\035" +
    "\231\063\124\064\106\065\107\001\002\000\054\012\uff7a" +
    "\013\uff7a\014\uff7a\017\uff7a\020\uff7a\021\uff7a\022\uff7a\023" +
    "\uff7a\026\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a" +
    "\035\uff7a\063\uff7a\064\uff7a\065\uff7a\066\uff7a\070\uff7a\073" +
    "\uff7a\001\002\000\054\012\uff96\013\uff96\014\uff96\017\uff96" +
    "\020\uff96\021\uff96\022\uff96\023\uff96\026\uff96\027\uff96\030" +
    "\uff96\031\uff96\032\uff96\033\uff96\035\uff96\063\uff96\064\uff96" +
    "\065\uff96\066\uff96\070\uff96\073\uff96\001\002\000\004\034" +
    "\234\001\002\000\020\035\236\037\040\040\006\041\046" +
    "\045\023\046\010\050\041\001\002\000\004\006\252\001" +
    "\002\000\004\016\247\001\002\000\006\035\241\066\240" +
    "\001\002\000\016\037\040\040\006\041\046\045\023\046" +
    "\010\050\041\001\002\000\004\016\242\001\002\000\056" +
    "\003\026\006\022\036\033\037\040\040\006\041\046\042" +
    "\037\045\023\046\010\050\041\051\042\052\024\053\020" +
    "\054\013\055\025\056\011\057\044\060\031\061\021\062" +
    "\055\074\053\104\052\001\002\000\060\003\026\006\022" +
    "\017\244\036\033\037\040\040\006\041\046\042\037\045" +
    "\023\046\010\050\041\051\042\052\024\053\020\054\013" +
    "\055\025\056\011\057\044\060\031\061\021\062\055\074" +
    "\053\104\052\001\002\000\062\002\uffd2\003\uffd2\006\uffd2" +
    "\017\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\045" +
    "\uffd2\046\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2" +
    "\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\074" +
    "\uffd2\104\uffd2\001\002\000\004\006\246\001\002\000\006" +
    "\035\uffd1\066\uffd1\001\002\000\056\003\026\006\022\036" +
    "\033\037\040\040\006\041\046\042\037\045\023\046\010" +
    "\050\041\051\042\052\024\053\020\054\013\055\025\056" +
    "\011\057\044\060\031\061\021\062\055\074\053\104\052" +
    "\001\002\000\060\003\026\006\022\017\251\036\033\037" +
    "\040\040\006\041\046\042\037\045\023\046\010\050\041" +
    "\051\042\052\024\053\020\054\013\055\025\056\011\057" +
    "\044\060\031\061\021\062\055\074\053\104\052\001\002" +
    "\000\062\002\uffd3\003\uffd3\006\uffd3\017\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\041\uffd3\042\uffd3\045\uffd3\046\uffd3\050\uffd3" +
    "\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057" +
    "\uffd3\060\uffd3\061\uffd3\062\uffd3\074\uffd3\104\uffd3\001\002" +
    "\000\006\035\uffd0\066\uffd0\001\002\000\016\037\040\040" +
    "\006\041\046\045\023\046\010\050\041\001\002\000\004" +
    "\030\255\001\002\000\004\006\256\001\002\000\004\015" +
    "\257\001\002\000\004\075\260\001\002\000\004\074\261" +
    "\001\002\000\004\034\262\001\002\000\004\035\263\001" +
    "\002\000\004\012\264\001\002\000\062\002\uffd7\003\uffd7" +
    "\006\uffd7\017\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042" +
    "\uffd7\045\uffd7\046\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7" +
    "\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062" +
    "\uffd7\074\uffd7\104\uffd7\001\002\000\004\006\266\001\002" +
    "\000\004\025\275\001\002\000\006\006\266\017\272\001" +
    "\002\000\006\006\uffb8\017\uffb8\001\002\000\006\006\uffb9" +
    "\017\uffb9\001\002\000\004\006\273\001\002\000\004\012" +
    "\274\001\002\000\062\002\uffba\003\uffba\006\uffba\017\uffba" +
    "\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\045\uffba\046" +
    "\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba" +
    "\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\074\uffba\104" +
    "\uffba\001\002\000\020\006\276\037\040\040\006\041\046" +
    "\045\023\046\010\050\041\001\002\000\004\012\301\001" +
    "\002\000\004\012\300\001\002\000\006\006\uffb7\017\uffb7" +
    "\001\002\000\006\006\uffb6\017\uffb6\001\002\000\004\006" +
    "\303\001\002\000\006\015\325\067\326\001\002\000\034" +
    "\005\076\006\101\007\070\010\066\011\104\014\065\024" +
    "\077\034\072\043\075\044\067\100\073\102\071\103\100" +
    "\001\002\000\042\012\306\013\114\014\105\020\115\021" +
    "\110\022\121\023\116\026\122\027\120\030\112\031\113" +
    "\032\123\033\117\063\124\064\106\065\107\001\002\000" +
    "\004\006\307\001\002\000\010\013\320\014\321\015\317" +
    "\001\002\000\004\035\uffa2\001\002\000\004\035\uffa3\001" +
    "\002\000\004\035\313\001\002\000\004\016\314\001\002" +
    "\000\056\003\026\006\022\036\033\037\040\040\006\041" +
    "\046\042\037\045\023\046\010\050\041\051\042\052\024" +
    "\053\020\054\013\055\025\056\011\057\044\060\031\061" +
    "\021\062\055\074\053\104\052\001\002\000\060\003\026" +
    "\006\022\017\316\036\033\037\040\040\006\041\046\042" +
    "\037\045\023\046\010\050\041\051\042\052\024\053\020" +
    "\054\013\055\025\056\011\057\044\060\031\061\021\062" +
    "\055\074\053\104\052\001\002\000\062\002\uffa5\003\uffa5" +
    "\006\uffa5\017\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042" +
    "\uffa5\045\uffa5\046\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5" +
    "\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062" +
    "\uffa5\074\uffa5\104\uffa5\001\002\000\034\005\076\006\101" +
    "\007\070\010\066\011\104\014\065\024\077\034\072\043" +
    "\075\044\067\100\073\102\071\103\100\001\002\000\004" +
    "\013\323\001\002\000\004\014\322\001\002\000\004\035" +
    "\uffa0\001\002\000\004\035\uffa1\001\002\000\042\013\114" +
    "\014\105\020\115\021\110\022\121\023\116\026\122\027" +
    "\120\030\112\031\113\032\123\033\117\035\uffa4\063\124" +
    "\064\106\065\107\001\002\000\034\005\076\006\334\007" +
    "\070\010\066\011\104\014\065\024\077\034\072\043\075" +
    "\044\067\100\073\102\071\103\100\001\002\000\034\005" +
    "\076\006\101\007\070\010\066\011\104\014\065\024\077" +
    "\034\072\043\075\044\067\100\073\102\071\103\100\001" +
    "\002\000\042\013\114\014\105\020\115\021\110\022\121" +
    "\023\116\026\122\027\120\030\112\031\113\032\123\033" +
    "\117\063\124\064\106\065\107\070\330\001\002\000\006" +
    "\015\332\067\331\001\002\000\034\005\076\006\101\007" +
    "\070\010\066\011\104\014\065\024\077\034\072\043\075" +
    "\044\067\100\073\102\071\103\100\001\002\000\034\005" +
    "\076\006\334\007\070\010\066\011\104\014\065\024\077" +
    "\034\072\043\075\044\067\100\073\102\071\103\100\001" +
    "\002\000\004\012\350\001\002\000\050\012\uff7f\013\uff7f" +
    "\014\uff7f\020\uff7f\021\uff7f\022\uff7f\023\uff7f\026\uff7f\027" +
    "\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034\171\063\uff7f" +
    "\064\uff7f\065\uff7f\067\170\071\337\001\002\000\042\012" +
    "\336\013\114\014\105\020\115\021\110\022\121\023\116" +
    "\026\122\027\120\030\112\031\113\032\123\033\117\063" +
    "\124\064\106\065\107\001\002\000\112\002\uffc6\003\uffc6" +
    "\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\014\uffc6\017" +
    "\uffc6\024\uffc6\034\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6" +
    "\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\050\uffc6\051" +
    "\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6" +
    "\060\uffc6\061\uffc6\062\uffc6\074\uffc6\100\uffc6\102\uffc6\103" +
    "\uffc6\104\uffc6\001\002\000\010\076\341\077\340\101\173" +
    "\001\002\000\004\034\345\001\002\000\004\034\342\001" +
    "\002\000\034\005\076\006\101\007\070\010\066\011\104" +
    "\014\065\024\077\034\072\043\075\044\067\100\073\102" +
    "\071\103\100\001\002\000\042\013\114\014\105\020\115" +
    "\021\110\022\121\023\116\026\122\027\120\030\112\031" +
    "\113\032\123\033\117\035\344\063\124\064\106\065\107" +
    "\001\002\000\004\012\uffd6\001\002\000\034\005\076\006" +
    "\101\007\070\010\066\011\104\014\065\024\077\034\072" +
    "\043\075\044\067\100\073\102\071\103\100\001\002\000" +
    "\042\013\114\014\105\020\115\021\110\022\121\023\116" +
    "\026\122\027\120\030\112\031\113\032\123\033\117\035" +
    "\347\063\124\064\106\065\107\001\002\000\004\012\uffd5" +
    "\001\002\000\112\002\uffc3\003\uffc3\005\uffc3\006\uffc3\007" +
    "\uffc3\010\uffc3\011\uffc3\014\uffc3\017\uffc3\024\uffc3\034\uffc3" +
    "\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\046\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062" +
    "\uffc3\074\uffc3\100\uffc3\102\uffc3\103\uffc3\104\uffc3\001\002" +
    "\000\042\013\114\014\105\020\115\021\110\022\121\023" +
    "\116\026\122\027\120\030\112\031\113\032\123\033\117" +
    "\063\124\064\106\065\107\070\352\001\002\000\004\015" +
    "\353\001\002\000\034\005\076\006\334\007\070\010\066" +
    "\011\104\014\065\024\077\034\072\043\075\044\067\100" +
    "\073\102\071\103\100\001\002\000\004\012\357\001\002" +
    "\000\042\012\356\013\114\014\105\020\115\021\110\022" +
    "\121\023\116\026\122\027\120\030\112\031\113\032\123" +
    "\033\117\063\124\064\106\065\107\001\002\000\112\002" +
    "\uffc5\003\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5" +
    "\014\uffc5\017\uffc5\024\uffc5\034\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5" +
    "\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056" +
    "\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\074\uffc5\100\uffc5" +
    "\102\uffc5\103\uffc5\104\uffc5\001\002\000\112\002\uffc2\003" +
    "\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\014\uffc2" +
    "\017\uffc2\024\uffc2\034\uffc2\036\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\050\uffc2" +
    "\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057" +
    "\uffc2\060\uffc2\061\uffc2\062\uffc2\074\uffc2\100\uffc2\102\uffc2" +
    "\103\uffc2\104\uffc2\001\002\000\004\012\363\001\002\000" +
    "\042\012\362\013\114\014\105\020\115\021\110\022\121" +
    "\023\116\026\122\027\120\030\112\031\113\032\123\033" +
    "\117\063\124\064\106\065\107\001\002\000\112\002\uffc7" +
    "\003\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\014" +
    "\uffc7\017\uffc7\024\uffc7\034\uffc7\036\uffc7\037\uffc7\040\uffc7" +
    "\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\050" +
    "\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7" +
    "\057\uffc7\060\uffc7\061\uffc7\062\uffc7\074\uffc7\100\uffc7\102" +
    "\uffc7\103\uffc7\104\uffc7\001\002\000\112\002\uffc4\003\uffc4" +
    "\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\014\uffc4\017" +
    "\uffc4\024\uffc4\034\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\050\uffc4\051" +
    "\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4" +
    "\060\uffc4\061\uffc4\062\uffc4\074\uffc4\100\uffc4\102\uffc4\103" +
    "\uffc4\104\uffc4\001\002\000\034\005\076\006\101\007\070" +
    "\010\066\011\104\014\065\024\077\034\072\043\075\044" +
    "\067\100\073\102\071\103\100\001\002\000\042\013\114" +
    "\014\105\020\115\021\110\022\121\023\116\026\122\027" +
    "\120\030\112\031\113\032\123\033\117\035\366\063\124" +
    "\064\106\065\107\001\002\000\004\016\367\001\002\000" +
    "\056\003\026\006\022\036\033\037\040\040\006\041\046" +
    "\042\037\045\023\046\010\050\041\051\042\052\024\053" +
    "\020\054\013\055\025\056\011\057\044\060\031\061\021" +
    "\062\055\074\053\104\052\001\002\000\060\003\026\006" +
    "\022\017\371\036\033\037\040\040\006\041\046\042\037" +
    "\045\023\046\010\050\041\051\042\052\024\053\020\054" +
    "\013\055\025\056\011\057\044\060\031\061\021\062\055" +
    "\074\053\104\052\001\002\000\064\002\uffaf\003\uffaf\006" +
    "\uffaf\017\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf" +
    "\045\uffaf\046\uffaf\047\372\050\uffaf\051\uffaf\052\uffaf\053" +
    "\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf" +
    "\062\uffaf\074\uffaf\104\uffaf\001\002\000\006\016\u0109\042" +
    "\u0100\001\002\000\064\002\uffae\003\uffae\006\uffae\017\uffae" +
    "\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\045\uffae\046" +
    "\uffae\047\375\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae" +
    "\055\uffae\056\uffae\057\uffae\060\uffae\061\uffae\062\uffae\074" +
    "\uffae\104\uffae\001\002\000\064\002\uffa9\003\uffa9\006\uffa9" +
    "\017\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\045" +
    "\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9" +
    "\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062" +
    "\uffa9\074\uffa9\104\uffa9\001\002\000\006\016\377\042\u0100" +
    "\001\002\000\064\002\uffaa\003\uffaa\006\uffaa\017\uffaa\036" +
    "\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\045\uffaa\046\uffaa" +
    "\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055" +
    "\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\074\uffaa" +
    "\104\uffaa\001\002\000\056\003\026\006\022\036\033\037" +
    "\040\040\006\041\046\042\037\045\023\046\010\050\041" +
    "\051\042\052\024\053\020\054\013\055\025\056\011\057" +
    "\044\060\031\061\021\062\055\074\053\104\052\001\002" +
    "\000\004\034\u0101\001\002\000\034\005\076\006\101\007" +
    "\070\010\066\011\104\014\065\024\077\034\072\043\075" +
    "\044\067\100\073\102\071\103\100\001\002\000\042\013" +
    "\114\014\105\020\115\021\110\022\121\023\116\026\122" +
    "\027\120\030\112\031\113\032\123\033\117\035\u0103\063" +
    "\124\064\106\065\107\001\002\000\004\016\u0104\001\002" +
    "\000\056\003\026\006\022\036\033\037\040\040\006\041" +
    "\046\042\037\045\023\046\010\050\041\051\042\052\024" +
    "\053\020\054\013\055\025\056\011\057\044\060\031\061" +
    "\021\062\055\074\053\104\052\001\002\000\060\003\026" +
    "\006\022\017\u0106\036\033\037\040\040\006\041\046\042" +
    "\037\045\023\046\010\050\041\051\042\052\024\053\020" +
    "\054\013\055\025\056\011\057\044\060\031\061\021\062" +
    "\055\074\053\104\052\001\002\000\064\002\uffab\003\uffab" +
    "\006\uffab\017\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042" +
    "\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab" +
    "\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061" +
    "\uffab\062\uffab\074\uffab\104\uffab\001\002\000\060\003\026" +
    "\006\022\017\u0108\036\033\037\040\040\006\041\046\042" +
    "\037\045\023\046\010\050\041\051\042\052\024\053\020" +
    "\054\013\055\025\056\011\057\044\060\031\061\021\062" +
    "\055\074\053\104\052\001\002\000\062\002\uffad\003\uffad" +
    "\006\uffad\017\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042" +
    "\uffad\045\uffad\046\uffad\050\uffad\051\uffad\052\uffad\053\uffad" +
    "\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062" +
    "\uffad\074\uffad\104\uffad\001\002\000\056\003\026\006\022" +
    "\036\033\037\040\040\006\041\046\042\037\045\023\046" +
    "\010\050\041\051\042\052\024\053\020\054\013\055\025" +
    "\056\011\057\044\060\031\061\021\062\055\074\053\104" +
    "\052\001\002\000\060\003\026\006\022\017\u010b\036\033" +
    "\037\040\040\006\041\046\042\037\045\023\046\010\050" +
    "\041\051\042\052\024\053\020\054\013\055\025\056\011" +
    "\057\044\060\031\061\021\062\055\074\053\104\052\001" +
    "\002\000\062\002\uffac\003\uffac\006\uffac\017\uffac\036\uffac" +
    "\037\uffac\040\uffac\041\uffac\042\uffac\045\uffac\046\uffac\050" +
    "\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac" +
    "\057\uffac\060\uffac\061\uffac\062\uffac\074\uffac\104\uffac\001" +
    "\002\000\034\005\076\006\101\007\070\010\066\011\104" +
    "\014\065\024\077\034\072\043\075\044\067\100\073\102" +
    "\071\103\100\001\002\000\042\013\114\014\105\020\115" +
    "\021\110\022\121\023\116\026\122\027\120\030\112\031" +
    "\113\032\123\033\117\035\u010e\063\124\064\106\065\107" +
    "\001\002\000\004\012\u010f\001\002\000\062\002\uffe5\003" +
    "\uffe5\006\uffe5\017\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\045\uffe5\046\uffe5\050\uffe5\051\uffe5\052\uffe5\053" +
    "\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5" +
    "\062\uffe5\074\uffe5\104\uffe5\001\002\000\004\034\u0111\001" +
    "\002\000\004\035\u0112\001\002\000\004\012\u0113\001\002" +
    "\000\062\002\uffe8\003\uffe8\006\uffe8\017\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\045\uffe8\046\uffe8\050\uffe8" +
    "\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057" +
    "\uffe8\060\uffe8\061\uffe8\062\uffe8\074\uffe8\104\uffe8\001\002" +
    "\000\004\002\001\001\002\000\062\002\uffe9\003\uffe9\006" +
    "\uffe9\017\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9" +
    "\045\uffe9\046\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054" +
    "\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9" +
    "\074\uffe9\104\uffe9\001\002\000\062\002\uffe6\003\uffe6\006" +
    "\uffe6\017\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6" +
    "\045\uffe6\046\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054" +
    "\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6" +
    "\074\uffe6\104\uffe6\001\002\000\004\013\u011c\001\002\000" +
    "\004\014\u011a\001\002\000\006\076\341\077\340\001\002" +
    "\000\004\012\u011b\001\002\000\062\002\uff9e\003\uff9e\006" +
    "\uff9e\017\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e" +
    "\045\uff9e\046\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054" +
    "\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e" +
    "\074\uff9e\104\uff9e\001\002\000\004\012\u011d\001\002\000" +
    "\062\002\uff9f\003\uff9f\006\uff9f\017\uff9f\036\uff9f\037\uff9f" +
    "\040\uff9f\041\uff9f\042\uff9f\045\uff9f\046\uff9f\050\uff9f\051" +
    "\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f" +
    "\060\uff9f\061\uff9f\062\uff9f\074\uff9f\104\uff9f\001\002\000" +
    "\062\002\uffc9\003\uffc9\006\uffc9\017\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\041\uffc9\042\uffc9\045\uffc9\046\uffc9\050\uffc9\051" +
    "\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9" +
    "\060\uffc9\061\uffc9\062\uffc9\074\uffc9\104\uffc9\001\002\000" +
    "\042\012\u0120\013\114\014\105\020\115\021\110\022\121" +
    "\023\116\026\122\027\120\030\112\031\113\032\123\033" +
    "\117\063\124\064\106\065\107\001\002\000\062\002\uffca" +
    "\003\uffca\006\uffca\017\uffca\036\uffca\037\uffca\040\uffca\041" +
    "\uffca\042\uffca\045\uffca\046\uffca\050\uffca\051\uffca\052\uffca" +
    "\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061" +
    "\uffca\062\uffca\074\uffca\104\uffca\001\002\000\034\005\076" +
    "\006\101\007\070\010\066\011\104\014\065\024\077\034" +
    "\072\043\075\044\067\100\073\102\071\103\100\001\002" +
    "\000\042\013\114\014\105\020\115\021\110\022\121\023" +
    "\116\026\122\027\120\030\112\031\113\032\123\033\117" +
    "\035\u0123\063\124\064\106\065\107\001\002\000\004\016" +
    "\u0124\001\002\000\056\003\026\006\022\036\033\037\040" +
    "\040\006\041\046\042\037\045\023\046\010\050\041\051" +
    "\042\052\024\053\020\054\013\055\025\056\011\057\044" +
    "\060\031\061\021\062\055\074\053\104\052\001\002\000" +
    "\060\003\026\006\022\017\u0126\036\033\037\040\040\006" +
    "\041\046\042\037\045\023\046\010\050\041\051\042\052" +
    "\024\053\020\054\013\055\025\056\011\057\044\060\031" +
    "\061\021\062\055\074\053\104\052\001\002\000\062\002" +
    "\uffa8\003\uffa8\006\uffa8\017\uffa8\036\uffa8\037\uffa8\040\uffa8" +
    "\041\uffa8\042\uffa8\045\uffa8\046\uffa8\050\uffa8\051\uffa8\052" +
    "\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8" +
    "\061\uffa8\062\uffa8\074\uffa8\104\uffa8\001\002\000\004\025" +
    "\u0128\001\002\000\020\006\u0129\037\040\040\006\041\046" +
    "\045\023\046\010\050\041\001\002\000\004\015\u014a\001" +
    "\002\000\010\012\u012d\015\u012b\067\u012c\001\002\000\034" +
    "\005\076\006\334\007\070\010\066\011\104\014\065\024" +
    "\077\034\072\043\075\044\067\100\073\102\071\103\100" +
    "\001\002\000\004\070\u012e\001\002\000\062\002\uffe2\003" +
    "\uffe2\006\uffe2\017\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\042\uffe2\045\uffe2\046\uffe2\050\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2" +
    "\062\uffe2\074\uffe2\104\uffe2\001\002\000\006\015\u012f\067" +
    "\u0130\001\002\000\004\067\u0142\001\002\000\004\070\u0131" +
    "\001\002\000\004\015\u0132\001\002\000\004\067\u0133\001" +
    "\002\000\004\067\u0134\001\002\000\034\005\076\006\101" +
    "\007\070\010\066\011\104\014\065\024\077\034\072\043" +
    "\075\044\067\100\073\102\071\103\100\001\002\000\006" +
    "\066\u0136\070\u0137\001\002\000\004\067\u0139\001\002\000" +
    "\004\012\u0138\001\002\000\062\002\uffdf\003\uffdf\006\uffdf" +
    "\017\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\045" +
    "\uffdf\046\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf" +
    "\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\074" +
    "\uffdf\104\uffdf\001\002\000\034\005\076\006\101\007\070" +
    "\010\066\011\104\014\065\024\077\034\072\043\075\044" +
    "\067\100\073\102\071\103\100\001\002\000\006\066\uffd9" +
    "\070\uffd9\001\002\000\006\066\u013d\070\u013e\001\002\000" +
    "\044\013\114\014\105\020\115\021\110\022\121\023\116" +
    "\026\122\027\120\030\112\031\113\032\123\033\117\063" +
    "\124\064\106\065\107\066\uffd8\070\uffd8\001\002\000\034" +
    "\005\076\006\101\007\070\010\066\011\104\014\065\024" +
    "\077\034\072\043\075\044\067\100\073\102\071\103\100" +
    "\001\002\000\006\066\uffdc\070\uffdc\001\002\000\006\066" +
    "\uffda\070\uffda\001\002\000\006\066\u013d\070\u0141\001\002" +
    "\000\006\066\uffdb\070\uffdb\001\002\000\034\005\076\006" +
    "\101\007\070\010\066\011\104\014\065\024\077\034\072" +
    "\043\075\044\067\100\073\102\071\103\100\001\002\000" +
    "\006\066\u013d\070\u0144\001\002\000\004\012\u0145\001\002" +
    "\000\062\002\uffe0\003\uffe0\006\uffe0\017\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\045\uffe0\046\uffe0\050\uffe0" +
    "\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057" +
    "\uffe0\060\uffe0\061\uffe0\062\uffe0\074\uffe0\104\uffe0\001\002" +
    "\000\004\012\u0149\001\002\000\042\012\u0148\013\114\014" +
    "\105\020\115\021\110\022\121\023\116\026\122\027\120" +
    "\030\112\031\113\032\123\033\117\063\124\064\106\065" +
    "\107\001\002\000\062\002\uffe1\003\uffe1\006\uffe1\017\uffe1" +
    "\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\045\uffe1\046" +
    "\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1" +
    "\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\074\uffe1\104" +
    "\uffe1\001\002\000\062\002\uffde\003\uffde\006\uffde\017\uffde" +
    "\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\045\uffde\046" +
    "\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde" +
    "\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde\074\uffde\104" +
    "\uffde\001\002\000\004\016\u014b\001\002\000\004\006\u014e" +
    "\001\002\000\004\012\u014d\001\002\000\062\002\uffdd\003" +
    "\uffdd\006\uffdd\017\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\045\uffdd\046\uffdd\050\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd" +
    "\062\uffdd\074\uffdd\104\uffdd\001\002\000\004\025\u0154\001" +
    "\002\000\006\017\u0152\066\u0151\001\002\000\006\017\uffb3" +
    "\066\uffb3\001\002\000\004\006\u014e\001\002\000\010\012" +
    "\uffb5\017\uffb5\066\uffb5\001\002\000\006\017\uffb4\066\uffb4" +
    "\001\002\000\036\005\076\006\101\007\070\010\066\011" +
    "\104\014\065\016\u014b\024\077\034\072\043\075\044\067" +
    "\100\073\102\071\103\100\001\002\000\006\017\uffb0\066" +
    "\uffb0\001\002\000\006\017\uffb2\066\uffb2\001\002\000\044" +
    "\013\114\014\105\017\uffb1\020\115\021\110\022\121\023" +
    "\116\026\122\027\120\030\112\031\113\032\123\033\117" +
    "\063\124\064\106\065\107\066\uffb1\001\002\000\062\002" +
    "\uffe7\003\uffe7\006\uffe7\017\uffe7\036\uffe7\037\uffe7\040\uffe7" +
    "\041\uffe7\042\uffe7\045\uffe7\046\uffe7\050\uffe7\051\uffe7\052" +
    "\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7" +
    "\061\uffe7\062\uffe7\074\uffe7\104\uffe7\001\002\000\056\003" +
    "\026\006\022\036\033\037\040\040\006\041\046\042\037" +
    "\045\023\046\010\050\041\051\042\052\024\053\020\054" +
    "\013\055\025\056\011\057\044\060\031\061\021\062\055" +
    "\074\053\104\052\001\002\000\060\003\026\006\022\017" +
    "\u015b\036\033\037\040\040\006\041\046\042\037\045\023" +
    "\046\010\050\041\051\042\052\024\053\020\054\013\055" +
    "\025\056\011\057\044\060\031\061\021\062\055\074\053" +
    "\104\052\001\002\000\004\053\u015c\001\002\000\004\034" +
    "\u015d\001\002\000\034\005\076\006\101\007\070\010\066" +
    "\011\104\014\065\024\077\034\072\043\075\044\067\100" +
    "\073\102\071\103\100\001\002\000\042\013\114\014\105" +
    "\020\115\021\110\022\121\023\116\026\122\027\120\030" +
    "\112\031\113\032\123\033\117\035\u015f\063\124\064\106" +
    "\065\107\001\002\000\064\002\uffa7\003\uffa7\006\uffa7\012" +
    "\u0160\017\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7" +
    "\045\uffa7\046\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054" +
    "\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7" +
    "\074\uffa7\104\uffa7\001\002\000\062\002\uffa6\003\uffa6\006" +
    "\uffa6\017\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6" +
    "\045\uffa6\046\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054" +
    "\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6" +
    "\074\uffa6\104\uffa6\001\002\000\062\002\uffeb\003\uffeb\006" +
    "\uffeb\017\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb" +
    "\045\uffeb\046\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054" +
    "\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb" +
    "\074\uffeb\104\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015f\000\064\002\026\003\047\004\046\005\044\006" +
    "\035\007\042\012\034\013\027\014\013\015\014\017\053" +
    "\021\004\022\011\023\031\024\006\032\050\033\061\035" +
    "\003\040\015\041\016\043\055\052\057\054\033\055\060" +
    "\056\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\u011e\035\101\042\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\004\151\005\044\006\035\007\042\012\034\013\027\014" +
    "\013\015\014\017\053\021\004\022\011\023\031\024\006" +
    "\032\050\033\061\035\003\040\015\041\016\043\055\052" +
    "\057\054\033\055\060\056\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\102\035\101\042\073\001\001\000\010" +
    "\020\231\035\101\042\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\221\020\222\035\101\042\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\215\035\101\042\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\166\035\101\042\073\001" +
    "\001\000\010\020\165\035\101\042\073\001\001\000\010" +
    "\020\164\035\101\042\073\001\001\000\010\020\163\035" +
    "\101\042\073\001\001\000\002\001\001\000\010\020\136" +
    "\035\101\042\073\001\001\000\010\020\135\035\101\042" +
    "\073\001\001\000\010\020\134\035\101\042\073\001\001" +
    "\000\010\020\133\035\101\042\073\001\001\000\010\020" +
    "\132\035\101\042\073\001\001\000\010\020\131\035\101" +
    "\042\073\001\001\000\010\020\130\035\101\042\073\001" +
    "\001\000\010\020\127\035\101\042\073\001\001\000\010" +
    "\020\126\035\101\042\073\001\001\000\010\020\125\035" +
    "\101\042\073\001\001\000\010\020\124\035\101\042\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\020\144\035\101" +
    "\042\073\044\142\045\141\046\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\020\144\035\101\042\073" +
    "\045\154\046\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\003\147\004\046\005\044" +
    "\006\035\007\042\012\034\013\027\014\013\015\014\017" +
    "\053\021\004\022\011\023\031\024\006\032\050\033\061" +
    "\035\003\040\015\041\016\043\055\052\057\054\033\055" +
    "\060\056\056\001\001\000\060\004\151\005\044\006\035" +
    "\007\042\012\034\013\027\014\013\015\014\017\053\021" +
    "\004\022\011\023\031\024\006\032\050\033\061\035\003" +
    "\040\015\041\016\043\055\052\057\054\033\055\060\056" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\003\161" +
    "\004\046\005\044\006\035\007\042\012\034\013\027\014" +
    "\013\015\014\017\053\021\004\022\011\023\031\024\006" +
    "\032\050\033\061\035\003\040\015\041\016\043\055\052" +
    "\057\054\033\055\060\056\056\001\001\000\060\004\151" +
    "\005\044\006\035\007\042\012\034\013\027\014\013\015" +
    "\014\017\053\021\004\022\011\023\031\024\006\032\050" +
    "\033\061\035\003\040\015\041\016\043\055\052\057\054" +
    "\033\055\060\056\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\205\035\101\042\073\001\001\000\014" +
    "\020\201\035\101\036\200\037\176\042\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\174\035\101" +
    "\042\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\201\035\101\037\204\042\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\210\035\101\042\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\213" +
    "\035\101\042\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\217\035\101\042\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\225" +
    "\035\101\042\073\001\001\000\002\001\001\000\010\020" +
    "\227\035\101\042\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\234\034\236\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\244\001\001\000\002\001" +
    "\001\000\062\003\242\004\046\005\044\006\035\007\042" +
    "\012\034\013\027\014\013\015\014\017\053\021\004\022" +
    "\011\023\031\024\006\032\050\033\061\035\003\040\015" +
    "\041\016\043\055\052\057\054\033\055\060\056\056\001" +
    "\001\000\060\004\151\005\044\006\035\007\042\012\034" +
    "\013\027\014\013\015\014\017\053\021\004\022\011\023" +
    "\031\024\006\032\050\033\061\035\003\040\015\041\016" +
    "\043\055\052\057\054\033\055\060\056\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\003\247\004\046\005\044\006\035\007\042\012\034\013" +
    "\027\014\013\015\014\017\053\021\004\022\011\023\031" +
    "\024\006\032\050\033\061\035\003\040\015\041\016\043" +
    "\055\052\057\054\033\055\060\056\056\001\001\000\060" +
    "\004\151\005\044\006\035\007\042\012\034\013\027\014" +
    "\013\015\014\017\053\021\004\022\011\023\031\024\006" +
    "\032\050\033\061\035\003\040\015\041\016\043\055\052" +
    "\057\054\033\055\060\056\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\253\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\057\266\060\267" +
    "\001\001\000\002\001\001\000\004\060\270\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\276\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\303\001\001\000\002\001\001\000" +
    "\010\020\304\035\101\042\073\001\001\000\002\001\001" +
    "\000\010\016\311\025\310\026\307\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\003\314\004\046\005\044\006" +
    "\035\007\042\012\034\013\027\014\013\015\014\017\053" +
    "\021\004\022\011\023\031\024\006\032\050\033\061\035" +
    "\003\040\015\041\016\043\055\052\057\054\033\055\060" +
    "\056\056\001\001\000\060\004\151\005\044\006\035\007" +
    "\042\012\034\013\027\014\013\015\014\017\053\021\004" +
    "\022\011\023\031\024\006\032\050\033\061\035\003\040" +
    "\015\041\016\043\055\052\057\054\033\055\060\056\056" +
    "\001\001\000\002\001\001\000\010\020\323\035\101\042" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\360\035\101\042\073\055\357\001\001\000\010\020\326" +
    "\035\101\042\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\350\035\101\042\073\001\001\000\012" +
    "\020\334\035\101\042\073\055\332\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\020\342\035\101\042\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\345\035\101\042\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\354\035" +
    "\101\042\073\055\353\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\364\035\101\042\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\003\367\004\046\005\044" +
    "\006\035\007\042\012\034\013\027\014\013\015\014\017" +
    "\053\021\004\022\011\023\031\024\006\032\050\033\061" +
    "\035\003\040\015\041\016\043\055\052\057\054\033\055" +
    "\060\056\056\001\001\000\060\004\151\005\044\006\035" +
    "\007\042\012\034\013\027\014\013\015\014\017\053\021" +
    "\004\022\011\023\031\024\006\032\050\033\061\035\003" +
    "\040\015\041\016\043\055\052\057\054\033\055\060\056" +
    "\056\001\001\000\006\030\373\031\372\001\001\000\002" +
    "\001\001\000\004\030\375\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\003\u0106\004\046" +
    "\005\044\006\035\007\042\012\034\013\027\014\013\015" +
    "\014\017\053\021\004\022\011\023\031\024\006\032\050" +
    "\033\061\035\003\040\015\041\016\043\055\052\057\054" +
    "\033\055\060\056\056\001\001\000\002\001\001\000\010" +
    "\020\u0101\035\101\042\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\u0104\004\046\005\044\006\035" +
    "\007\042\012\034\013\027\014\013\015\014\017\053\021" +
    "\004\022\011\023\031\024\006\032\050\033\061\035\003" +
    "\040\015\041\016\043\055\052\057\054\033\055\060\056" +
    "\056\001\001\000\060\004\151\005\044\006\035\007\042" +
    "\012\034\013\027\014\013\015\014\017\053\021\004\022" +
    "\011\023\031\024\006\032\050\033\061\035\003\040\015" +
    "\041\016\043\055\052\057\054\033\055\060\056\056\001" +
    "\001\000\002\001\001\000\060\004\151\005\044\006\035" +
    "\007\042\012\034\013\027\014\013\015\014\017\053\021" +
    "\004\022\011\023\031\024\006\032\050\033\061\035\003" +
    "\040\015\041\016\043\055\052\057\054\033\055\060\056" +
    "\056\001\001\000\002\001\001\000\062\003\u0109\004\046" +
    "\005\044\006\035\007\042\012\034\013\027\014\013\015" +
    "\014\017\053\021\004\022\011\023\031\024\006\032\050" +
    "\033\061\035\003\040\015\041\016\043\055\052\057\054" +
    "\033\055\060\056\056\001\001\000\060\004\151\005\044" +
    "\006\035\007\042\012\034\013\027\014\013\015\014\017" +
    "\053\021\004\022\011\023\031\024\006\032\050\033\061" +
    "\035\003\040\015\041\016\043\055\052\057\054\033\055" +
    "\060\056\056\001\001\000\002\001\001\000\010\020\u010c" +
    "\035\101\042\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\u0121\035" +
    "\101\042\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\003\u0124\004\046\005\044\006\035\007\042\012" +
    "\034\013\027\014\013\015\014\017\053\021\004\022\011" +
    "\023\031\024\006\032\050\033\061\035\003\040\015\041" +
    "\016\043\055\052\057\054\033\055\060\056\056\001\001" +
    "\000\060\004\151\005\044\006\035\007\042\012\034\013" +
    "\027\014\013\015\014\017\053\021\004\022\011\023\031" +
    "\024\006\032\050\033\061\035\003\040\015\041\016\043" +
    "\055\052\057\054\033\055\060\056\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\u0129\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\u0146\035\101" +
    "\042\073\055\u0145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\u0134\001" +
    "\001\000\014\020\u013b\035\101\042\073\047\u013f\051\u0139" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\020\u013b\035\101\042\073" +
    "\047\u013a\051\u0139\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\u013b\035\101\042\073" +
    "\051\u013e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\020\u013b\035\101" +
    "\042\073\047\u0142\051\u0139\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\u014b\001\001\000\006\064\u014e\065\u014f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\065\u0152\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\u0156\035\101\042" +
    "\073\063\u0154\066\u0155\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\003" +
    "\u0159\004\046\005\044\006\035\007\042\012\034\013\027" +
    "\014\013\015\014\017\053\021\004\022\011\023\031\024" +
    "\006\032\050\033\061\035\003\040\015\041\016\043\055" +
    "\052\057\054\033\055\060\056\056\001\001\000\060\004" +
    "\151\005\044\006\035\007\042\012\034\013\027\014\013" +
    "\015\014\017\053\021\004\022\011\023\031\024\006\032" +
    "\050\033\061\035\003\040\015\041\016\043\055\052\057" +
    "\054\033\055\060\056\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\u015d\035\101\042\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JCParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JCParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JCParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    JCLexer s;
    JCParser(JCLexer s){this.s = s;}
    private LinkedList<JCError> errorList = new LinkedList<>();
    public LinkedList<JCError> getSyntaxErrorList(){
        return errorList;
    }

    public void syntax_error(Symbol s){
        errorList.add(new JCError("Sintaxis", "Error en la instruccion, componente: "+s.value, s.left, s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        errorList.add(new JCError("Sintaxis - FATAL", "Error en la instruccion, componente: "+s.value, s.left, s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JCParser$actions {



  private final JCParser parser;

  /** Constructor */
  CUP$JCParser$actions(JCParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JCParser$do_action_part00000000(
    int                        CUP$JCParser$act_num,
    java_cup.runtime.lr_parser CUP$JCParser$parser,
    java.util.Stack            CUP$JCParser$stack,
    int                        CUP$JCParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JCParser$result;

      /* select the action based on the action number */
      switch (CUP$JCParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> start_val = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		RESULT = start_val;
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JCParser$parser.done_parsing();
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= STATEMENTS 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // STATEMENTS ::= STATEMENTS STATEMENT 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STATEMENTS ::= STATEMENT 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STATEMENT ::= IMPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STATEMENT ::= DECLARATION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATEMENT ::= ASSIGNATION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENT ::= ARRAY_ASSIGNATION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENT ::= IF_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEMENT ::= INCREMENT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STATEMENT ::= DECREMENT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STATEMENT ::= WHILE_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STATEMENT ::= FOR_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STATEMENT ::= DO_WHILE_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STATEMENT ::= DYNAMIC_LIST_DECLARATION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STATEMENT ::= DYNAMIC_LIST_MUTATOR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STATEMENT ::= STRUCT_DECLARATION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STATEMENT ::= RETURN_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STATEMENT ::= BREAK 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STATEMENT ::= CONTINUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STATEMENT ::= START_WITH_INVOKE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STATEMENT ::= MATCH_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STATEMENT ::= METHOD_CALL ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STATEMENT ::= METHOD_DECLARATION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STATEMENT ::= error ENDLINE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // START_WITH_INVOKE ::= RW_START_WITH ID OPENPAR CLOSEPAR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		   RESULT = new StartWithInvoke(a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("START_WITH_INVOKE",24, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BREAK ::= RW_BREAK ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new Break(aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("BREAK",17, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTINUE ::= RW_CONTINUE ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new Continue(aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("CONTINUE",18, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IMPRESION ::= RW_PRINT OPENPAR EXPRESION CLOSEPAR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		   RESULT = new Print(a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("IMPRESION",3, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MUTABILITY ::= RW_VAR 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("MUTABILITY",31, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MUTABILITY ::= RW_CONST 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("MUTABILITY",31, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARATION ::= MUTABILITY ID COLON TYPES ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Types c = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new Declaration(b, c, null, a, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARATION ::= MUTABILITY ID COLON TYPES EQUALS EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		Types c = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new Declaration(b, c, d, a, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARATION ::= MUTABILITY ID COLON TYPES OPENBRACKET CLOSEBRACKET EQUALS OPENBRACKET VALUES_LIST CLOSEBRACKET ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-10)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).right;
		Types c = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		
                RESULT = new Declaration(b, c, 1, d, a, aleft, aright);
            
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-10)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARATION ::= MUTABILITY ID COLON TYPES OPENBRACKET CLOSEBRACKET OPENBRACKET CLOSEBRACKET EQUALS OPENBRACKET VALUES_OF_VALUES_LIST CLOSEBRACKET ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-12)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).right;
		Types c = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		LinkedList<LinkedList<Instruction>> d = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		
                RESULT = new Declaration(b, c, d, 2, a, aleft, aright);
            
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-12)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARATION ::= MUTABILITY ID COLON TYPES EQUALS DYNAMIC_LIST_MUTATOR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		Types c = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
                RESULT = new Declaration(b, c, d, a, aleft, aright);
            
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARATION ::= MUTABILITY ID COLON ID EQUALS OBJECT ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
                System.out.println("[debug] found struct declaration");
                // print the attributes recursively for testing
//                for (HashMap<String, Object> attr : attrs) {
//                    System.out.println("[debug] attr: " + attr.get("id") + " = " + attr.get("value"));
//                }
//                RESULT = new Declaration(b, new StructType(c, aleft, aright), d, a, aleft, aright);
            
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALUES_OF_VALUES_LIST ::= VALUES_OF_VALUES_LIST COMMA OPENBRACKET VALUES_LIST CLOSEBRACKET 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		LinkedList<LinkedList<Instruction>> a = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = a; a.add(b); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("VALUES_OF_VALUES_LIST",38, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALUES_OF_VALUES_LIST ::= OPENBRACKET VALUES_LIST CLOSEBRACKET 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("VALUES_OF_VALUES_LIST",38, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALUES_LIST ::= VALUES_LIST COMMA ARRAY_VALUE 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; a.add(b); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("VALUES_LIST",37, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VALUES_LIST ::= ARRAY_VALUE 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("VALUES_LIST",37, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ARRAY_VALUE ::= EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ARRAY_VALUE",39, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DYNAMIC_LIST_DECLARATION ::= RW_LIST LESS TYPES GREATER ID EQUALS RW_NEW RW_LIST OPENPAR CLOSEPAR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-8)).right;
		Types a = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		
    System.out.println("[debug] found dynamic list declaration");
    RESULT = new Declaration(b, a, null, false, aleft, aright, true);

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DYNAMIC_LIST_DECLARATION",42, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-10)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DYNAMIC_LIST_MUTATOR ::= ID DOT RW_APPEND OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
    System.out.println("[debug] found dynamic list mutator");
    RESULT = new DynamicListMutation(a, null, b, DynamicListMutation.MutationType.ADD, aleft, aright);

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DYNAMIC_LIST_MUTATOR",43, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DYNAMIC_LIST_MUTATOR ::= ID DOT RW_REMOVE OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
    System.out.println("[debug] found dynamic list mutator");
    RESULT = new DynamicListMutation(a, b, null, DynamicListMutation.MutationType.REMOVE, aleft, aright);

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DYNAMIC_LIST_MUTATOR",43, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ITERABLE_FIND ::= ID DOT RW_FIND OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
        System.out.println("[debug] found iterable find");
        RESULT = new Find(a, b, aleft, aright);
    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ITERABLE_FIND",32, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // METHOD_DECLARATION ::= TYPES ID OPENPAR CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		Types a = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new MethodDeclaration(a, b, new LinkedList<HashMap>(), c, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("METHOD_DECLARATION",25, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // METHOD_DECLARATION ::= TYPES ID OPENPAR METHOD_PARAMS_DECLARATION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).right;
		Types a = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		LinkedList<HashMap> c = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new MethodDeclaration(a, b, c, d, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("METHOD_DECLARATION",25, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // METHOD_PARAMS_DECLARATION ::= METHOD_PARAMS_DECLARATION COMMA TYPES ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Types b = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		
    RESULT = a;
    HashMap<String, Object> singleParam = new HashMap<>();
    singleParam.put("type", b);
    singleParam.put("id", c);
    RESULT.add(singleParam);
    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("METHOD_PARAMS_DECLARATION",26, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // METHOD_PARAMS_DECLARATION ::= TYPES ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Types a = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		
        RESULT = new LinkedList<HashMap>();
        HashMap<String, Object> singleParam = new HashMap<>();
        singleParam.put("type", a);
        singleParam.put("id", b);
        RESULT.add(singleParam);
    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("METHOD_PARAMS_DECLARATION",26, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CALL_ARGUMENTS ::= CALL_ARGUMENTS COMMA ARGUMENT 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; a.add(b); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("CALL_ARGUMENTS",28, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CALL_ARGUMENTS ::= ARGUMENT 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("CALL_ARGUMENTS",28, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ARGUMENT ::= EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ARGUMENT",29, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // METHOD_CALL ::= ID OPENPAR CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		  RESULT = new MethodCall(a, new LinkedList<>(), aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("METHOD_CALL",27, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // METHOD_CALL ::= ID OPENPAR CALL_ARGUMENTS CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		  RESULT = new MethodCall(a, b, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("METHOD_CALL",27, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RETURN_STMT ::= RW_RETURN EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new ReturnIns(a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("RETURN_STMT",30, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RETURN_STMT ::= RW_RETURN ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new ReturnIns(null, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("RETURN_STMT",30, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TYPE_CAST_OPERATOR ::= OPENPAR TYPES CLOSEPAR 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = type; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPE_CAST_OPERATOR",21, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASSIGNATION ::= ID EQUALS EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT=new SymbolAssignation(a, b, aleft, aright);  
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",5, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASSIGNATION ::= ID OPENBRACKET EXPRESION CLOSEBRACKET EQUALS EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
                RESULT = new ArrayAssignation(a, b, null, c, aleft, aright);
            
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",5, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASSIGNATION ::= ID OPENBRACKET EXPRESION CLOSEBRACKET OPENBRACKET EXPRESION CLOSEBRACKET EQUALS EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
                RESULT = new ArrayAssignation(a, b, c, d, aleft, aright);
            
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",5, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASSIGNATION ::= ID EQUALS DYNAMIC_LIST_MUTATOR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
                RESULT = new SymbolAssignation(a, b, aleft, aright);
            
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",5, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASSIGNATION ::= ID OPENBRACKET EXPRESION CLOSEBRACKET EQUALS DYNAMIC_LIST_MUTATOR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
                RESULT = new ArrayAssignation(a, b, null, c, aleft, aright);
            
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",5, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ASSIGNATION ::= ID OPENBRACKET EXPRESION CLOSEBRACKET OPENBRACKET EXPRESION CLOSEBRACKET EQUALS DYNAMIC_LIST_MUTATOR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
                RESULT = new ArrayAssignation(a, b, c, d, aleft, aright);
            
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",5, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MATCH_STMT ::= RW_MATCH OPENPAR EXPRESION CLOSEPAR OPENBRACE MATCH_CASES_LIST DEFAULT_MATCH_CASE CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		LinkedList<MatchCase> b = (LinkedList<MatchCase>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		MatchCase c = (MatchCase)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
    RESULT = new MatchStatement(a, b, c, aleft, aright);

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("MATCH_STMT",33, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MATCH_STMT ::= RW_MATCH OPENPAR EXPRESION CLOSEPAR OPENBRACE MATCH_CASES_LIST CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<MatchCase> b = (LinkedList<MatchCase>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
      RESULT = new MatchStatement(a, b, null, aleft, aright);
  
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("MATCH_STMT",33, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MATCH_STMT ::= RW_MATCH OPENPAR EXPRESION CLOSEPAR OPENBRACE DEFAULT_MATCH_CASE CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		MatchCase c = (MatchCase)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
      RESULT = new MatchStatement(a, null, c, aleft, aright);
  
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("MATCH_STMT",33, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // MATCH_CASES_LIST ::= MATCH_CASES_LIST CUSTOM_MATCH_CASE 
            {
              LinkedList<MatchCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<MatchCase> a = (LinkedList<MatchCase>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		MatchCase b = (MatchCase)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; a.add(b); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("MATCH_CASES_LIST",34, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // MATCH_CASES_LIST ::= CUSTOM_MATCH_CASE 
            {
              LinkedList<MatchCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		MatchCase a = (MatchCase)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("MATCH_CASES_LIST",34, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CUSTOM_MATCH_CASE ::= EXPRESION ARROW OPENBRACE STATEMENTS CLOSEBRACE 
            {
              MatchCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
    RESULT = new MatchCase(a, b, aleft, aright);

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("CUSTOM_MATCH_CASE",35, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DEFAULT_MATCH_CASE ::= UNDERSCORE ARROW OPENBRACE STATEMENTS CLOSEBRACE 
            {
              MatchCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
    RESULT = new MatchCase(a, aleft, aright);

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DEFAULT_MATCH_CASE",36, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // STRUCT_DECLARATION ::= RW_STRUCT OPENBRACE ATTRS_LIST CLOSEBRACE ID ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		LinkedList<StructField> a = (LinkedList<StructField>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
    RESULT = new StructDeclaration(b, a, aleft, aright);

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STRUCT_DECLARATION",44, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ATTRS_LIST ::= ATTRS_LIST ATTR_DECLARATION 
            {
              LinkedList<StructField> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<StructField> a = (LinkedList<StructField>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		StructField b = (StructField)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; a.add(b); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ATTRS_LIST",45, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ATTRS_LIST ::= ATTR_DECLARATION 
            {
              LinkedList<StructField> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		StructField a = (StructField)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ATTRS_LIST",45, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ATTR_DECLARATION ::= ID COLON TYPES ENDLINE 
            {
              StructField RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Types c = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
//        RESULT = new StructField(b, new StructType(c, bleft, bright), bleft, bright);
    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ATTR_DECLARATION",46, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ATTR_DECLARATION ::= ID COLON ID ENDLINE 
            {
              StructField RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
//        RESULT = new StructField(b, new StructType(c, bleft, bright), bleft, bright);
    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ATTR_DECLARATION",46, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OBJECT ::= OPENBRACE MEMBER_LIST CLOSEBRACE 
            {
              Instruction RESULT =null;

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("OBJECT",49, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // MEMBER_LIST ::= MEMBER_LIST COMMA MEMBER 
            {
              LinkedList<HashMap> RESULT =null;

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("MEMBER_LIST",50, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // MEMBER_LIST ::= MEMBER 
            {
              LinkedList<HashMap> RESULT =null;

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("MEMBER_LIST",50, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // MEMBER ::= ID COLON MEMBER_VALUE 
            {
              HashMap<String,Object> RESULT =null;

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("MEMBER",51, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MEMBER_VALUE ::= EXPRESION 
            {
              HashMap<String,Object> RESULT =null;

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("MEMBER_VALUE",52, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // MEMBER_VALUE ::= OBJECT 
            {
              HashMap<String,Object> RESULT =null;

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("MEMBER_VALUE",52, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IF_STMT ::= RW_IF OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
               RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, new LinkedList<IfStatement.ConditionBlock>()), aleft, aright);
           
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("IF_STMT",8, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IF_STMT ::= RW_IF OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE ELSE_IF_BLOCKS 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		LinkedList<IfStatement.ConditionBlock> c = (LinkedList<IfStatement.ConditionBlock>)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, c), aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("IF_STMT",8, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IF_STMT ::= RW_IF OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE ELSE_IF_BLOCKS RW_ELSE OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		LinkedList<IfStatement.ConditionBlock> c = (LinkedList<IfStatement.ConditionBlock>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, c), d, aleft, aright);

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("IF_STMT",8, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-11)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IF_STMT ::= RW_IF OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE RW_ELSE OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-8)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, new LinkedList<IfStatement.ConditionBlock>()), c, aleft, aright);

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("IF_STMT",8, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-10)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ELSE_IF_BLOCK ::= RW_ELSE RW_IF OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              IfStatement.ConditionBlock RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new IfStatement.ConditionBlock(a, b); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_BLOCK",22, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ELSE_IF_BLOCKS ::= ELSE_IF_BLOCKS ELSE_IF_BLOCK 
            {
              LinkedList<IfStatement.ConditionBlock> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<IfStatement.ConditionBlock> a = (LinkedList<IfStatement.ConditionBlock>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		IfStatement.ConditionBlock e = (IfStatement.ConditionBlock)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; a.add(e); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_BLOCKS",23, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ELSE_IF_BLOCKS ::= ELSE_IF_BLOCK 
            {
              LinkedList<IfStatement.ConditionBlock> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		IfStatement.ConditionBlock e = (IfStatement.ConditionBlock)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(e); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_BLOCKS",23, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // WHILE_STMT ::= RW_WHILE OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new WhileStatement(a, b, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("WHILE_STMT",9, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DO_WHILE_STMT ::= RW_DO OPENBRACE STATEMENTS CLOSEBRACE RW_WHILE OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new DoWhileStatement(b, a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DO_WHILE_STMT",10, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DO_WHILE_STMT ::= RW_DO OPENBRACE STATEMENTS CLOSEBRACE RW_WHILE OPENPAR EXPRESION CLOSEPAR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		   RESULT = new DoWhileStatement(b, a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DO_WHILE_STMT",10, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-8)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FOR_STMT ::= RW_FOR OPENPAR ASSIGNATION EXPRESION ENDLINE FOR_UPDATE CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new ForStatement(a, b, c, d, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("FOR_STMT",11, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FOR_UPDATE ::= ID EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new SymbolAssignation(a, b, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FOR_UPDATE ::= INCREMENT_NO_ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FOR_UPDATE ::= DECREMENT_NO_ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // INCREMENT_NO_ENDLINE ::= ID PLUS PLUS 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		   RESULT = new SymbolAssignation(a, new Arithmetic(new SymbolAccess(a, aleft, aright),new Primitive(Types.INTEGER, 1, aleft, aright),ArithmeticOperands.SUM, aleft, aright), aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("INCREMENT_NO_ENDLINE",19, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DECREMENT_NO_ENDLINE ::= ID MINUS MINUS 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		   RESULT = new SymbolAssignation(a, new Arithmetic(new SymbolAccess(a, aleft, aright), new Primitive(Types.INTEGER, 1, aleft, aright), ArithmeticOperands.SUB, aleft, aright), aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECREMENT_NO_ENDLINE",20, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // INCREMENT ::= ID PLUS PLUS ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		   RESULT = new SymbolAssignation(a, new Arithmetic(new SymbolAccess(a, aleft, aright),new Primitive(Types.INTEGER, 1, aleft, aright),ArithmeticOperands.SUM, aleft, aright), aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("INCREMENT",15, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DECREMENT ::= ID MINUS MINUS ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		   RESULT = new SymbolAssignation(a, new Arithmetic(new SymbolAccess(a, aleft, aright), new Primitive(Types.INTEGER, 1, aleft, aright), ArithmeticOperands.SUB, aleft, aright), aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECREMENT",16, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TYPES ::= RW_INT 
            {
              Types RESULT =null;
		   RESULT=Types.INTEGER;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",13, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TYPES ::= RW_DOUBLE 
            {
              Types RESULT =null;
		   RESULT=Types.DOUBLE;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",13, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TYPES ::= RW_STRING 
            {
              Types RESULT =null;
		   RESULT=Types.STRING;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",13, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TYPES ::= RW_BOOL 
            {
              Types RESULT =null;
		   RESULT=Types.BOOLEAN;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",13, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TYPES ::= RW_CHAR 
            {
              Types RESULT =null;
		   RESULT=Types.CHARACTER;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",13, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TYPES ::= RW_VOID 
            {
              Types RESULT =null;
		   RESULT=Types.VOID;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",13, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION ::= OPENPAR TYPES CLOSEPAR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Types a = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new TypeCast(b, a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= MINUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, ArithmeticOperands.NEG, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= EXPRESION ASTERISK EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.MUL, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION ::= EXPRESION SLASH EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.DIV, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION ::= EXPRESION DOUBLEASTERISK EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.POW, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.MOD, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESION ::= EXPRESION MINUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.SUB, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESION ::= EXPRESION PLUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.SUM, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION ::= EXPRESION DOUBLEEQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.EQUALS, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION ::= EXPRESION NOT_EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.NOT_EQUALS, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESION ::= EXPRESION LESS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.LESS_THAN, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESION ::= EXPRESION LESSEQUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.LESS_THAN_OR_EQUALS, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESION ::= EXPRESION GREATER EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.GREATER_THAN, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESION ::= EXPRESION GREATEREQUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.GREATER_THAN_OR_EQUALS, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPRESION ::= NEGATION EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Logical(a, LogicalOperands.NOT, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Logical(a, b, LogicalOperands.OR, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Logical(a, b, LogicalOperands.AND, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Logical(a, b, LogicalOperands.XOR, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPRESION ::= INTEGER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive(Types.INTEGER,Integer.parseInt(a),  aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPRESION ::= DECIMAL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive(Types.DOUBLE,new Double(a),  aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXPRESION ::= STRING 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive( Types.STRING,a, aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXPRESION ::= CHAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive(Types.CHARACTER, a.charAt(0), aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXPRESION ::= RW_TRUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive(Types.BOOLEAN, true, aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXPRESION ::= RW_FALSE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive(Types.BOOLEAN, false, aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXPRESION ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new SymbolAccess(a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXPRESION ::= METHOD_CALL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXPRESION ::= ID OPENBRACKET EXPRESION CLOSEBRACKET 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new ArrayAccess(a, b, null, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXPRESION ::= ID OPENBRACKET EXPRESION CLOSEBRACKET OPENBRACKET EXPRESION CLOSEBRACKET 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new ArrayAccess(a, b, c, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXPRESION ::= RW_LENGTH OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new Length(a, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXPRESION ::= RW_ROUND OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new Round(a, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXPRESION ::= RW_TOSTRING OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new ToString(a, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXPRESION ::= ITERABLE_FIND 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXPRESION ::= OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JCParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JCParser$do_action(
    int                        CUP$JCParser$act_num,
    java_cup.runtime.lr_parser CUP$JCParser$parser,
    java.util.Stack            CUP$JCParser$stack,
    int                        CUP$JCParser$top)
    throws java.lang.Exception
    {
              return CUP$JCParser$do_action_part00000000(
                               CUP$JCParser$act_num,
                               CUP$JCParser$parser,
                               CUP$JCParser$stack,
                               CUP$JCParser$top);
    }
}

}
