
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package edu.robertob.olc1.vj24.Analysis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.HashMap;
import edu.robertob.olc1.vj24.Engine.Base.*;
import edu.robertob.olc1.vj24.Engine.Structs.*;
import edu.robertob.olc1.vj24.Engine.Statements.*;
import edu.robertob.olc1.vj24.Engine.Expressions.*;
import edu.robertob.olc1.vj24.Engine.BuiltIn.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JCParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public JCParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JCParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JCParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\004\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\004\000\002\004\003\000" +
    "\002\004\004\000\002\032\007\000\002\023\004\000\002" +
    "\024\004\000\002\005\007\000\002\005\007\000\002\041" +
    "\003\000\002\041\003\000\002\006\007\000\002\006\011" +
    "\000\002\006\011\000\002\006\015\000\002\006\017\000" +
    "\002\006\011\000\002\044\007\000\002\044\005\000\002" +
    "\043\005\000\002\043\003\000\002\045\003\000\002\045" +
    "\003\000\002\050\015\000\002\051\010\000\002\051\010" +
    "\000\002\042\010\000\002\033\011\000\002\033\012\000" +
    "\002\034\006\000\002\034\004\000\002\036\005\000\002" +
    "\036\003\000\002\037\003\000\002\037\003\000\002\035" +
    "\005\000\002\035\006\000\002\040\005\000\002\040\004" +
    "\000\002\040\005\000\002\027\005\000\002\007\006\000" +
    "\002\007\006\000\002\007\011\000\002\007\014\000\002" +
    "\007\006\000\002\007\011\000\002\007\014\000\002\012" +
    "\011\000\002\012\012\000\002\012\016\000\002\012\015" +
    "\000\002\030\012\000\002\031\004\000\002\031\003\000" +
    "\002\013\011\000\002\014\012\000\002\014\013\000\002" +
    "\015\014\000\002\016\005\000\002\016\003\000\002\016" +
    "\003\000\002\025\005\000\002\026\005\000\002\021\006" +
    "\000\002\022\006\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\020\006\000\002\020\004\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\004\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\006\000\002\020\011\000\002\020\006\000\002\020" +
    "\006\000\002\020\006\000\002\020\003\000\002\020\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0135\000\052\003\026\006\022\036\033\037\040\040" +
    "\006\041\046\042\037\045\024\046\010\050\041\051\042" +
    "\052\023\053\020\054\013\055\025\056\011\057\044\060" +
    "\031\061\021\071\053\001\002\000\004\012\u0137\001\002" +
    "\000\056\002\ufff8\003\ufff8\006\ufff8\017\ufff8\036\ufff8\037" +
    "\ufff8\040\ufff8\041\ufff8\042\ufff8\045\ufff8\046\ufff8\050\ufff8" +
    "\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057" +
    "\ufff8\060\ufff8\061\ufff8\071\ufff8\001\002\000\016\006\uffab" +
    "\012\uffab\015\uffab\030\uffab\035\uffab\066\uffab\001\002\000" +
    "\056\002\uffef\003\uffef\006\uffef\017\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\045\uffef\046\uffef\050\uffef\051" +
    "\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef" +
    "\060\uffef\061\uffef\071\uffef\001\002\000\016\006\uffa8\012" +
    "\uffa8\015\uffa8\030\uffa8\035\uffa8\066\uffa8\001\002\000\004" +
    "\016\u012f\001\002\000\056\002\ufff7\003\ufff7\006\ufff7\017" +
    "\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\045\ufff7" +
    "\046\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055" +
    "\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\071\ufff7\001\002" +
    "\000\004\012\u012e\001\002\000\056\002\ufff4\003\ufff4\006" +
    "\ufff4\017\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4" +
    "\045\ufff4\046\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054" +
    "\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\071\ufff4" +
    "\001\002\000\056\002\ufff5\003\ufff5\006\ufff5\017\ufff5\036" +
    "\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\045\ufff5\046\ufff5" +
    "\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056" +
    "\ufff5\057\ufff5\060\ufff5\061\ufff5\071\ufff5\001\002\000\056" +
    "\002\ufff1\003\ufff1\006\ufff1\017\ufff1\036\ufff1\037\ufff1\040" +
    "\ufff1\041\ufff1\042\ufff1\045\ufff1\046\ufff1\050\ufff1\051\ufff1" +
    "\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060" +
    "\ufff1\061\ufff1\071\ufff1\001\002\000\004\006\u0109\001\002" +
    "\000\004\034\u0103\001\002\000\036\005\127\006\271\007" +
    "\121\010\117\011\134\012\376\014\116\024\130\034\122" +
    "\043\126\044\120\075\125\077\123\100\131\001\002\000" +
    "\016\013\367\014\370\015\246\034\255\066\245\070\371" +
    "\001\002\000\004\006\uffe5\001\002\000\016\006\uffa9\012" +
    "\uffa9\015\uffa9\030\uffa9\035\uffa9\066\uffa9\001\002\000\004" +
    "\012\366\001\002\000\004\012\365\001\002\000\004\002" +
    "\364\001\002\000\056\002\ufff6\003\ufff6\006\ufff6\017\ufff6" +
    "\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\045\ufff6\046" +
    "\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6" +
    "\056\ufff6\057\ufff6\060\ufff6\061\ufff6\071\ufff6\001\002\000" +
    "\004\006\360\001\002\000\056\002\ufff0\003\ufff0\006\ufff0" +
    "\017\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\045" +
    "\ufff0\046\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0" +
    "\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\071\ufff0\001" +
    "\002\000\004\034\351\001\002\000\056\002\ufff3\003\ufff3" +
    "\006\ufff3\017\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042" +
    "\ufff3\045\ufff3\046\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3" +
    "\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\071" +
    "\ufff3\001\002\000\056\002\ufffc\003\ufffc\006\ufffc\017\ufffc" +
    "\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\045\ufffc\046" +
    "\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc" +
    "\056\ufffc\057\ufffc\060\ufffc\061\ufffc\071\ufffc\001\002\000" +
    "\056\002\ufff9\003\ufff9\006\ufff9\017\ufff9\036\ufff9\037\ufff9" +
    "\040\ufff9\041\ufff9\042\ufff9\045\ufff9\046\ufff9\050\ufff9\051" +
    "\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9" +
    "\060\ufff9\061\ufff9\071\ufff9\001\002\000\004\034\321\001" +
    "\002\000\016\006\uffac\012\uffac\015\uffac\030\uffac\035\uffac" +
    "\066\uffac\001\002\000\016\006\uffa7\012\uffa7\015\uffa7\030" +
    "\uffa7\035\uffa7\066\uffa7\001\002\000\004\006\uffe4\001\002" +
    "\000\056\002\ufffb\003\ufffb\006\ufffb\017\ufffb\036\ufffb\037" +
    "\ufffb\040\ufffb\041\ufffb\042\ufffb\045\ufffb\046\ufffb\050\ufffb" +
    "\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057" +
    "\ufffb\060\ufffb\061\ufffb\071\ufffb\001\002\000\004\034\113" +
    "\001\002\000\056\002\ufffd\003\ufffd\006\ufffd\017\ufffd\036" +
    "\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\045\ufffd\046\ufffd" +
    "\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056" +
    "\ufffd\057\ufffd\060\ufffd\061\ufffd\071\ufffd\001\002\000\016" +
    "\006\uffaa\012\uffaa\015\uffaa\030\uffaa\035\uffaa\066\uffaa\001" +
    "\002\000\056\002\ufffe\003\ufffe\006\ufffe\017\ufffe\036\ufffe" +
    "\037\ufffe\040\ufffe\041\ufffe\042\ufffe\045\ufffe\046\ufffe\050" +
    "\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe" +
    "\057\ufffe\060\ufffe\061\ufffe\071\ufffe\001\002\000\054\002" +
    "\000\003\026\006\022\036\033\037\040\040\006\041\046" +
    "\042\037\045\024\046\010\050\041\051\042\052\023\053" +
    "\020\054\013\055\025\056\011\057\044\060\031\061\021" +
    "\071\053\001\002\000\056\002\uffee\003\uffee\006\uffee\017" +
    "\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\045\uffee" +
    "\046\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055" +
    "\uffee\056\uffee\057\uffee\060\uffee\061\uffee\071\uffee\001\002" +
    "\000\004\006\072\001\002\000\004\027\060\001\002\000" +
    "\056\002\ufffa\003\ufffa\006\ufffa\017\ufffa\036\ufffa\037\ufffa" +
    "\040\ufffa\041\ufffa\042\ufffa\045\ufffa\046\ufffa\050\ufffa\051" +
    "\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa" +
    "\060\ufffa\061\ufffa\071\ufffa\001\002\000\004\012\057\001" +
    "\002\000\056\002\uffec\003\uffec\006\uffec\017\uffec\036\uffec" +
    "\037\uffec\040\uffec\041\uffec\042\uffec\045\uffec\046\uffec\050" +
    "\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec" +
    "\057\uffec\060\uffec\061\uffec\071\uffec\001\002\000\056\002" +
    "\ufff2\003\ufff2\006\ufff2\017\ufff2\036\ufff2\037\ufff2\040\ufff2" +
    "\041\ufff2\042\ufff2\045\ufff2\046\ufff2\050\ufff2\051\ufff2\052" +
    "\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2" +
    "\061\ufff2\071\ufff2\001\002\000\016\037\040\040\006\041" +
    "\046\045\024\046\010\050\041\001\002\000\004\030\062" +
    "\001\002\000\004\006\063\001\002\000\004\015\064\001" +
    "\002\000\004\072\065\001\002\000\004\071\066\001\002" +
    "\000\004\034\067\001\002\000\004\035\070\001\002\000" +
    "\004\012\071\001\002\000\056\002\uffd7\003\uffd7\006\uffd7" +
    "\017\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\045" +
    "\uffd7\046\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7" +
    "\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\071\uffd7\001" +
    "\002\000\004\034\073\001\002\000\020\035\075\037\040" +
    "\040\006\041\046\045\024\046\010\050\041\001\002\000" +
    "\004\006\112\001\002\000\004\016\107\001\002\000\006" +
    "\035\100\065\077\001\002\000\016\037\040\040\006\041" +
    "\046\045\024\046\010\050\041\001\002\000\004\016\101" +
    "\001\002\000\052\003\026\006\022\036\033\037\040\040" +
    "\006\041\046\042\037\045\024\046\010\050\041\051\042" +
    "\052\023\053\020\054\013\055\025\056\011\057\044\060" +
    "\031\061\021\071\053\001\002\000\054\003\026\006\022" +
    "\017\103\036\033\037\040\040\006\041\046\042\037\045" +
    "\024\046\010\050\041\051\042\052\023\053\020\054\013" +
    "\055\025\056\011\057\044\060\031\061\021\071\053\001" +
    "\002\000\056\002\uffd2\003\uffd2\006\uffd2\017\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\042\uffd2\045\uffd2\046\uffd2\050" +
    "\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2" +
    "\057\uffd2\060\uffd2\061\uffd2\071\uffd2\001\002\000\056\002" +
    "\uffff\003\uffff\006\uffff\017\uffff\036\uffff\037\uffff\040\uffff" +
    "\041\uffff\042\uffff\045\uffff\046\uffff\050\uffff\051\uffff\052" +
    "\uffff\053\uffff\054\uffff\055\uffff\056\uffff\057\uffff\060\uffff" +
    "\061\uffff\071\uffff\001\002\000\004\006\106\001\002\000" +
    "\006\035\uffd1\065\uffd1\001\002\000\052\003\026\006\022" +
    "\036\033\037\040\040\006\041\046\042\037\045\024\046" +
    "\010\050\041\051\042\052\023\053\020\054\013\055\025" +
    "\056\011\057\044\060\031\061\021\071\053\001\002\000" +
    "\054\003\026\006\022\017\111\036\033\037\040\040\006" +
    "\041\046\042\037\045\024\046\010\050\041\051\042\052" +
    "\023\053\020\054\013\055\025\056\011\057\044\060\031" +
    "\061\021\071\053\001\002\000\056\002\uffd3\003\uffd3\006" +
    "\uffd3\017\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3" +
    "\045\uffd3\046\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054" +
    "\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\071\uffd3" +
    "\001\002\000\006\035\uffd0\065\uffd0\001\002\000\004\006" +
    "\114\001\002\000\006\015\246\066\245\001\002\000\034" +
    "\005\127\006\132\007\121\010\117\011\134\014\116\024" +
    "\130\034\122\043\126\044\120\075\125\077\123\100\131" +
    "\001\002\000\034\005\127\006\132\007\121\010\117\011" +
    "\134\014\116\024\130\034\122\043\126\044\120\075\125" +
    "\077\123\100\131\001\002\000\050\012\uff93\013\uff93\014" +
    "\uff93\020\uff93\021\uff93\022\uff93\023\uff93\026\uff93\027\uff93" +
    "\030\uff93\031\uff93\032\uff93\033\uff93\035\uff93\062\uff93\063" +
    "\uff93\064\uff93\065\uff93\067\uff93\001\002\000\050\012\uff8f" +
    "\013\uff8f\014\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\026" +
    "\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\035\uff8f" +
    "\062\uff8f\063\uff8f\064\uff8f\065\uff8f\067\uff8f\001\002\000" +
    "\050\012\uff94\013\uff94\014\uff94\020\uff94\021\uff94\022\uff94" +
    "\023\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033" +
    "\uff94\035\uff94\062\uff94\063\uff94\064\uff94\065\uff94\067\uff94" +
    "\001\002\000\050\005\127\006\132\007\121\010\117\011" +
    "\134\014\116\024\130\034\122\037\040\040\006\041\046" +
    "\043\126\044\120\045\024\046\010\050\041\075\125\077" +
    "\123\100\131\001\002\000\004\034\234\001\002\000\050" +
    "\012\uff88\013\uff88\014\uff88\020\uff88\021\uff88\022\uff88\023" +
    "\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88\033\uff88" +
    "\035\uff88\062\uff88\063\uff88\064\uff88\065\uff88\067\uff88\001" +
    "\002\000\004\034\231\001\002\000\050\012\uff90\013\uff90" +
    "\014\uff90\020\uff90\021\uff90\022\uff90\023\uff90\026\uff90\027" +
    "\uff90\030\uff90\031\uff90\032\uff90\033\uff90\035\uff90\062\uff90" +
    "\063\uff90\064\uff90\065\uff90\067\uff90\001\002\000\050\012" +
    "\uff92\013\uff92\014\uff92\020\uff92\021\uff92\022\uff92\023\uff92" +
    "\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033\uff92\035" +
    "\uff92\062\uff92\063\uff92\064\uff92\065\uff92\067\uff92\001\002" +
    "\000\034\005\127\006\132\007\121\010\117\011\134\014" +
    "\116\024\130\034\122\043\126\044\120\075\125\077\123" +
    "\100\131\001\002\000\004\034\225\001\002\000\054\012" +
    "\uff8e\013\uff8e\014\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e" +
    "\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\035" +
    "\uff8e\062\uff8e\063\uff8e\064\uff8e\065\uff8e\066\212\067\uff8e" +
    "\070\213\001\002\000\042\012\141\013\144\014\136\020" +
    "\145\021\140\022\151\023\146\026\152\027\150\030\142" +
    "\031\143\032\153\033\147\062\154\063\135\064\137\001" +
    "\002\000\050\012\uff91\013\uff91\014\uff91\020\uff91\021\uff91" +
    "\022\uff91\023\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032" +
    "\uff91\033\uff91\035\uff91\062\uff91\063\uff91\064\uff91\065\uff91" +
    "\067\uff91\001\002\000\034\005\127\006\132\007\121\010" +
    "\117\011\134\014\116\024\130\034\122\043\126\044\120" +
    "\075\125\077\123\100\131\001\002\000\034\005\127\006" +
    "\132\007\121\010\117\011\134\014\116\024\130\034\122" +
    "\043\126\044\120\075\125\077\123\100\131\001\002\000" +
    "\034\005\127\006\132\007\121\010\117\011\134\014\116" +
    "\024\130\034\122\043\126\044\120\075\125\077\123\100" +
    "\131\001\002\000\034\005\127\006\132\007\121\010\117" +
    "\011\134\014\116\024\130\034\122\043\126\044\120\075" +
    "\125\077\123\100\131\001\002\000\004\006\170\001\002" +
    "\000\034\005\127\006\132\007\121\010\117\011\134\014" +
    "\116\024\130\034\122\043\126\044\120\075\125\077\123" +
    "\100\131\001\002\000\034\005\127\006\132\007\121\010" +
    "\117\011\134\014\116\024\130\034\122\043\126\044\120" +
    "\075\125\077\123\100\131\001\002\000\034\005\127\006" +
    "\132\007\121\010\117\011\134\014\116\024\130\034\122" +
    "\043\126\044\120\075\125\077\123\100\131\001\002\000" +
    "\034\005\127\006\132\007\121\010\117\011\134\014\116" +
    "\024\130\034\122\043\126\044\120\075\125\077\123\100" +
    "\131\001\002\000\034\005\127\006\132\007\121\010\117" +
    "\011\134\014\116\024\130\034\122\043\126\044\120\075" +
    "\125\077\123\100\131\001\002\000\034\005\127\006\132" +
    "\007\121\010\117\011\134\014\116\024\130\034\122\043" +
    "\126\044\120\075\125\077\123\100\131\001\002\000\034" +
    "\005\127\006\132\007\121\010\117\011\134\014\116\024" +
    "\130\034\122\043\126\044\120\075\125\077\123\100\131" +
    "\001\002\000\034\005\127\006\132\007\121\010\117\011" +
    "\134\014\116\024\130\034\122\043\126\044\120\075\125" +
    "\077\123\100\131\001\002\000\034\005\127\006\132\007" +
    "\121\010\117\011\134\014\116\024\130\034\122\043\126" +
    "\044\120\075\125\077\123\100\131\001\002\000\034\005" +
    "\127\006\132\007\121\010\117\011\134\014\116\024\130" +
    "\034\122\043\126\044\120\075\125\077\123\100\131\001" +
    "\002\000\034\005\127\006\132\007\121\010\117\011\134" +
    "\014\116\024\130\034\122\043\126\044\120\075\125\077" +
    "\123\100\131\001\002\000\050\012\uff97\013\144\014\136" +
    "\020\145\021\140\022\151\023\146\026\152\027\150\030" +
    "\142\031\143\032\153\033\147\035\uff97\062\uff97\063\135" +
    "\064\137\065\uff97\067\uff97\001\002\000\050\012\uff99\013" +
    "\144\014\136\020\145\021\140\022\151\023\146\026\uff99" +
    "\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99\035\uff99\062" +
    "\uff99\063\uff99\064\uff99\065\uff99\067\uff99\001\002\000\050" +
    "\012\uff9e\013\144\014\136\020\145\021\140\022\151\023" +
    "\146\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e" +
    "\035\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e\067\uff9e\001" +
    "\002\000\050\012\uffa1\013\uffa1\014\uffa1\020\uffa1\021\uffa1" +
    "\022\uffa1\023\146\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032" +
    "\uffa1\033\uffa1\035\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1" +
    "\067\uffa1\001\002\000\050\012\uff9c\013\144\014\136\020" +
    "\145\021\140\022\151\023\146\026\uff9c\027\uff9c\030\uff9c" +
    "\031\uff9c\032\uff9c\033\uff9c\035\uff9c\062\uff9c\063\uff9c\064" +
    "\uff9c\065\uff9c\067\uff9c\001\002\000\050\012\uff9d\013\144" +
    "\014\136\020\145\021\140\022\151\023\146\026\uff9d\027" +
    "\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\035\uff9d\062\uff9d" +
    "\063\uff9d\064\uff9d\065\uff9d\067\uff9d\001\002\000\046\012" +
    "\uffa2\013\uffa2\014\uffa2\020\uffa2\021\uffa2\022\uffa2\026\uffa2" +
    "\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\035\uffa2\062" +
    "\uffa2\063\uffa2\064\uffa2\065\uffa2\067\uffa2\001\002\000\050" +
    "\012\uffa4\013\uffa4\014\uffa4\020\uffa4\021\uffa4\022\uffa4\023" +
    "\146\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4" +
    "\035\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4\067\uffa4\001" +
    "\002\000\050\012\uff9f\013\uff9f\014\uff9f\020\145\021\140" +
    "\022\151\023\146\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032" +
    "\uff9f\033\uff9f\035\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f" +
    "\067\uff9f\001\002\000\050\012\uff9b\013\144\014\136\020" +
    "\145\021\140\022\151\023\146\026\uff9b\027\uff9b\030\uff9b" +
    "\031\uff9b\032\uff9b\033\uff9b\035\uff9b\062\uff9b\063\uff9b\064" +
    "\uff9b\065\uff9b\067\uff9b\001\002\000\050\012\uff9a\013\144" +
    "\014\136\020\145\021\140\022\151\023\146\026\uff9a\027" +
    "\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\035\uff9a\062\uff9a" +
    "\063\uff9a\064\uff9a\065\uff9a\067\uff9a\001\002\000\010\013" +
    "\201\014\202\015\200\001\002\000\004\035\uffb1\001\002" +
    "\000\004\035\uffb2\001\002\000\004\035\174\001\002\000" +
    "\004\016\175\001\002\000\052\003\026\006\022\036\033" +
    "\037\040\040\006\041\046\042\037\045\024\046\010\050" +
    "\041\051\042\052\023\053\020\054\013\055\025\056\011" +
    "\057\044\060\031\061\021\071\053\001\002\000\054\003" +
    "\026\006\022\017\177\036\033\037\040\040\006\041\046" +
    "\042\037\045\024\046\010\050\041\051\042\052\023\053" +
    "\020\054\013\055\025\056\011\057\044\060\031\061\021" +
    "\071\053\001\002\000\056\002\uffb4\003\uffb4\006\uffb4\017" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\045\uffb4" +
    "\046\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\071\uffb4\001\002" +
    "\000\034\005\127\006\132\007\121\010\117\011\134\014" +
    "\116\024\130\034\122\043\126\044\120\075\125\077\123" +
    "\100\131\001\002\000\004\013\204\001\002\000\004\014" +
    "\203\001\002\000\004\035\uffaf\001\002\000\004\035\uffb0" +
    "\001\002\000\042\013\144\014\136\020\145\021\140\022" +
    "\151\023\146\026\152\027\150\030\142\031\143\032\153" +
    "\033\147\035\uffb3\062\154\063\135\064\137\001\002\000" +
    "\050\012\uffa3\013\uffa3\014\uffa3\020\uffa3\021\uffa3\022\uffa3" +
    "\023\146\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033" +
    "\uffa3\035\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\067\uffa3" +
    "\001\002\000\050\012\uff95\013\144\014\136\020\145\021" +
    "\140\022\151\023\146\026\152\027\150\030\142\031\143" +
    "\032\153\033\147\035\uff95\062\uff95\063\uff95\064\uff95\065" +
    "\uff95\067\uff95\001\002\000\050\012\uffa0\013\uffa0\014\uffa0" +
    "\020\145\021\140\022\151\023\146\026\uffa0\027\uffa0\030" +
    "\uffa0\031\uffa0\032\uffa0\033\uffa0\035\uffa0\062\uffa0\063\uffa0" +
    "\064\uffa0\065\uffa0\067\uffa0\001\002\000\050\012\uff96\013" +
    "\144\014\136\020\145\021\140\022\151\023\146\026\152" +
    "\027\150\030\142\031\143\032\153\033\147\035\uff96\062" +
    "\uff96\063\uff96\064\137\065\uff96\067\uff96\001\002\000\034" +
    "\005\127\006\132\007\121\010\117\011\134\014\116\024" +
    "\130\034\122\043\126\044\120\075\125\077\123\100\131" +
    "\001\002\000\004\076\214\001\002\000\004\034\215\001" +
    "\002\000\034\005\127\006\132\007\121\010\117\011\134" +
    "\014\116\024\130\034\122\043\126\044\120\075\125\077" +
    "\123\100\131\001\002\000\042\013\144\014\136\020\145" +
    "\021\140\022\151\023\146\026\152\027\150\030\142\031" +
    "\143\032\153\033\147\035\217\062\154\063\135\064\137" +
    "\001\002\000\050\012\uffd4\013\uffd4\014\uffd4\020\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\035\uffd4\062\uffd4\063\uffd4\064\uffd4\065" +
    "\uffd4\067\uffd4\001\002\000\042\013\144\014\136\020\145" +
    "\021\140\022\151\023\146\026\152\027\150\030\142\031" +
    "\143\032\153\033\147\062\154\063\135\064\137\067\221" +
    "\001\002\000\052\012\uff8d\013\uff8d\014\uff8d\020\uff8d\021" +
    "\uff8d\022\uff8d\023\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d" +
    "\032\uff8d\033\uff8d\035\uff8d\062\uff8d\063\uff8d\064\uff8d\065" +
    "\uff8d\066\222\067\uff8d\001\002\000\034\005\127\006\132" +
    "\007\121\010\117\011\134\014\116\024\130\034\122\043" +
    "\126\044\120\075\125\077\123\100\131\001\002\000\042" +
    "\013\144\014\136\020\145\021\140\022\151\023\146\026" +
    "\152\027\150\030\142\031\143\032\153\033\147\062\154" +
    "\063\135\064\137\067\224\001\002\000\050\012\uff8c\013" +
    "\uff8c\014\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c\026\uff8c" +
    "\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\035\uff8c\062" +
    "\uff8c\063\uff8c\064\uff8c\065\uff8c\067\uff8c\001\002\000\034" +
    "\005\127\006\132\007\121\010\117\011\134\014\116\024" +
    "\130\034\122\043\126\044\120\075\125\077\123\100\131" +
    "\001\002\000\042\013\144\014\136\020\145\021\140\022" +
    "\151\023\146\026\152\027\150\030\142\031\143\032\153" +
    "\033\147\035\227\062\154\063\135\064\137\001\002\000" +
    "\050\012\uff89\013\uff89\014\uff89\020\uff89\021\uff89\022\uff89" +
    "\023\uff89\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033" +
    "\uff89\035\uff89\062\uff89\063\uff89\064\uff89\065\uff89\067\uff89" +
    "\001\002\000\050\012\uff98\013\144\014\136\020\145\021" +
    "\140\022\151\023\146\026\152\027\150\030\142\031\143" +
    "\032\153\033\147\035\uff98\062\uff98\063\uff98\064\uff98\065" +
    "\uff98\067\uff98\001\002\000\034\005\127\006\132\007\121" +
    "\010\117\011\134\014\116\024\130\034\122\043\126\044" +
    "\120\075\125\077\123\100\131\001\002\000\042\013\144" +
    "\014\136\020\145\021\140\022\151\023\146\026\152\027" +
    "\150\030\142\031\143\032\153\033\147\035\233\062\154" +
    "\063\135\064\137\001\002\000\050\012\uff8b\013\uff8b\014" +
    "\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\026\uff8b\027\uff8b" +
    "\030\uff8b\031\uff8b\032\uff8b\033\uff8b\035\uff8b\062\uff8b\063" +
    "\uff8b\064\uff8b\065\uff8b\067\uff8b\001\002\000\034\005\127" +
    "\006\132\007\121\010\117\011\134\014\116\024\130\034" +
    "\122\043\126\044\120\075\125\077\123\100\131\001\002" +
    "\000\042\013\144\014\136\020\145\021\140\022\151\023" +
    "\146\026\152\027\150\030\142\031\143\032\153\033\147" +
    "\035\236\062\154\063\135\064\137\001\002\000\050\012" +
    "\uff8a\013\uff8a\014\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a" +
    "\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\035" +
    "\uff8a\062\uff8a\063\uff8a\064\uff8a\065\uff8a\067\uff8a\001\002" +
    "\000\004\035\242\001\002\000\042\013\144\014\136\020" +
    "\145\021\140\022\151\023\146\026\152\027\150\030\142" +
    "\031\143\032\153\033\147\035\241\062\154\063\135\064" +
    "\137\001\002\000\050\012\uff87\013\uff87\014\uff87\020\uff87" +
    "\021\uff87\022\uff87\023\uff87\026\uff87\027\uff87\030\uff87\031" +
    "\uff87\032\uff87\033\uff87\035\uff87\062\uff87\063\uff87\064\uff87" +
    "\065\uff87\067\uff87\001\002\000\034\005\127\006\132\007" +
    "\121\010\117\011\134\014\116\024\130\034\122\043\126" +
    "\044\120\075\125\077\123\100\131\001\002\000\050\012" +
    "\uffa6\013\144\014\136\020\145\021\140\022\151\023\146" +
    "\026\152\027\150\030\142\031\143\032\153\033\147\035" +
    "\uffa6\062\154\063\135\064\137\065\uffa6\067\uffa6\001\002" +
    "\000\050\012\uffa5\013\uffa5\014\uffa5\020\uffa5\021\uffa5\022" +
    "\uffa5\023\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5" +
    "\033\uffa5\035\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\067" +
    "\uffa5\001\002\000\034\005\127\006\132\007\121\010\117" +
    "\011\134\014\116\024\130\034\122\043\126\044\120\075" +
    "\125\077\123\100\131\001\002\000\034\005\127\006\250" +
    "\007\121\010\117\011\134\014\116\024\130\034\122\043" +
    "\126\044\120\075\125\077\123\100\131\001\002\000\004" +
    "\012\300\001\002\000\050\012\uff8e\013\uff8e\014\uff8e\020" +
    "\uff8e\021\uff8e\022\uff8e\023\uff8e\026\uff8e\027\uff8e\030\uff8e" +
    "\031\uff8e\032\uff8e\033\uff8e\034\255\062\uff8e\063\uff8e\064" +
    "\uff8e\066\212\070\256\001\002\000\004\012\254\001\002" +
    "\000\042\012\253\013\144\014\136\020\145\021\140\022" +
    "\151\023\146\026\152\027\150\030\142\031\143\032\153" +
    "\033\147\062\154\063\135\064\137\001\002\000\106\002" +
    "\uffc5\003\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5" +
    "\014\uffc5\017\uffc5\024\uffc5\034\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5" +
    "\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056" +
    "\uffc5\057\uffc5\060\uffc5\061\uffc5\071\uffc5\075\uffc5\077\uffc5" +
    "\100\uffc5\001\002\000\106\002\uffc4\003\uffc4\005\uffc4\006" +
    "\uffc4\007\uffc4\010\uffc4\011\uffc4\014\uffc4\017\uffc4\024\uffc4" +
    "\034\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043" +
    "\uffc4\044\uffc4\045\uffc4\046\uffc4\050\uffc4\051\uffc4\052\uffc4" +
    "\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061" +
    "\uffc4\071\uffc4\075\uffc4\077\uffc4\100\uffc4\001\002\000\036" +
    "\005\127\006\271\007\121\010\117\011\134\014\116\024" +
    "\130\034\122\035\270\043\126\044\120\075\125\077\123" +
    "\100\131\001\002\000\010\073\260\074\257\076\214\001" +
    "\002\000\004\034\264\001\002\000\004\034\261\001\002" +
    "\000\034\005\127\006\132\007\121\010\117\011\134\014" +
    "\116\024\130\034\122\043\126\044\120\075\125\077\123" +
    "\100\131\001\002\000\042\013\144\014\136\020\145\021" +
    "\140\022\151\023\146\026\152\027\150\030\142\031\143" +
    "\032\153\033\147\035\263\062\154\063\135\064\137\001" +
    "\002\000\004\012\uffd6\001\002\000\034\005\127\006\132" +
    "\007\121\010\117\011\134\014\116\024\130\034\122\043" +
    "\126\044\120\075\125\077\123\100\131\001\002\000\042" +
    "\013\144\014\136\020\145\021\140\022\151\023\146\026" +
    "\152\027\150\030\142\031\143\032\153\033\147\035\266" +
    "\062\154\063\135\064\137\001\002\000\004\012\uffd5\001" +
    "\002\000\006\035\uffce\065\uffce\001\002\000\012\012\uffcb" +
    "\035\uffcb\065\uffcb\067\uffcb\001\002\000\056\012\uff8e\013" +
    "\uff8e\014\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\026\uff8e" +
    "\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034\255\035" +
    "\uff8e\062\uff8e\063\uff8e\064\uff8e\065\uff8e\066\212\067\uff8e" +
    "\070\213\001\002\000\006\035\uffcc\065\uffcc\001\002\000" +
    "\006\035\276\065\275\001\002\000\044\013\144\014\136" +
    "\020\145\021\140\022\151\023\146\026\152\027\150\030" +
    "\142\031\143\032\153\033\147\035\uffcd\062\154\063\135" +
    "\064\137\065\uffcd\001\002\000\034\005\127\006\271\007" +
    "\121\010\117\011\134\014\116\024\130\034\122\043\126" +
    "\044\120\075\125\077\123\100\131\001\002\000\012\012" +
    "\uffca\035\uffca\065\uffca\067\uffca\001\002\000\006\035\uffcf" +
    "\065\uffcf\001\002\000\106\002\uffc1\003\uffc1\005\uffc1\006" +
    "\uffc1\007\uffc1\010\uffc1\011\uffc1\014\uffc1\017\uffc1\024\uffc1" +
    "\034\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\046\uffc1\050\uffc1\051\uffc1\052\uffc1" +
    "\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061" +
    "\uffc1\071\uffc1\075\uffc1\077\uffc1\100\uffc1\001\002\000\042" +
    "\013\144\014\136\020\145\021\140\022\151\023\146\026" +
    "\152\027\150\030\142\031\143\032\153\033\147\062\154" +
    "\063\135\064\137\067\302\001\002\000\006\015\304\066" +
    "\303\001\002\000\034\005\127\006\132\007\121\010\117" +
    "\011\134\014\116\024\130\034\122\043\126\044\120\075" +
    "\125\077\123\100\131\001\002\000\034\005\127\006\306" +
    "\007\121\010\117\011\134\014\116\024\130\034\122\043" +
    "\126\044\120\075\125\077\123\100\131\001\002\000\004" +
    "\012\311\001\002\000\046\012\uff8e\013\uff8e\014\uff8e\020" +
    "\uff8e\021\uff8e\022\uff8e\023\uff8e\026\uff8e\027\uff8e\030\uff8e" +
    "\031\uff8e\032\uff8e\033\uff8e\062\uff8e\063\uff8e\064\uff8e\066" +
    "\212\070\256\001\002\000\042\012\310\013\144\014\136" +
    "\020\145\021\140\022\151\023\146\026\152\027\150\030" +
    "\142\031\143\032\153\033\147\062\154\063\135\064\137" +
    "\001\002\000\106\002\uffc3\003\uffc3\005\uffc3\006\uffc3\007" +
    "\uffc3\010\uffc3\011\uffc3\014\uffc3\017\uffc3\024\uffc3\034\uffc3" +
    "\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\046\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\071" +
    "\uffc3\075\uffc3\077\uffc3\100\uffc3\001\002\000\106\002\uffc0" +
    "\003\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\014" +
    "\uffc0\017\uffc0\024\uffc0\034\uffc0\036\uffc0\037\uffc0\040\uffc0" +
    "\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\050" +
    "\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0" +
    "\057\uffc0\060\uffc0\061\uffc0\071\uffc0\075\uffc0\077\uffc0\100" +
    "\uffc0\001\002\000\042\013\144\014\136\020\145\021\140" +
    "\022\151\023\146\026\152\027\150\030\142\031\143\032" +
    "\153\033\147\062\154\063\135\064\137\067\313\001\002" +
    "\000\004\015\314\001\002\000\034\005\127\006\306\007" +
    "\121\010\117\011\134\014\116\024\130\034\122\043\126" +
    "\044\120\075\125\077\123\100\131\001\002\000\004\012" +
    "\320\001\002\000\042\012\317\013\144\014\136\020\145" +
    "\021\140\022\151\023\146\026\152\027\150\030\142\031" +
    "\143\032\153\033\147\062\154\063\135\064\137\001\002" +
    "\000\106\002\uffc2\003\uffc2\005\uffc2\006\uffc2\007\uffc2\010" +
    "\uffc2\011\uffc2\014\uffc2\017\uffc2\024\uffc2\034\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045" +
    "\uffc2\046\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2" +
    "\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\071\uffc2\075" +
    "\uffc2\077\uffc2\100\uffc2\001\002\000\106\002\uffbf\003\uffbf" +
    "\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\014\uffbf\017" +
    "\uffbf\024\uffbf\034\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf" +
    "\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\050\uffbf\051" +
    "\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf" +
    "\060\uffbf\061\uffbf\071\uffbf\075\uffbf\077\uffbf\100\uffbf\001" +
    "\002\000\034\005\127\006\132\007\121\010\117\011\134" +
    "\014\116\024\130\034\122\043\126\044\120\075\125\077" +
    "\123\100\131\001\002\000\042\013\144\014\136\020\145" +
    "\021\140\022\151\023\146\026\152\027\150\030\142\031" +
    "\143\032\153\033\147\035\323\062\154\063\135\064\137" +
    "\001\002\000\004\016\324\001\002\000\052\003\026\006" +
    "\022\036\033\037\040\040\006\041\046\042\037\045\024" +
    "\046\010\050\041\051\042\052\023\053\020\054\013\055" +
    "\025\056\011\057\044\060\031\061\021\071\053\001\002" +
    "\000\054\003\026\006\022\017\326\036\033\037\040\040" +
    "\006\041\046\042\037\045\024\046\010\050\041\051\042" +
    "\052\023\053\020\054\013\055\025\056\011\057\044\060" +
    "\031\061\021\071\053\001\002\000\060\002\uffbe\003\uffbe" +
    "\006\uffbe\017\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\045\uffbe\046\uffbe\047\327\050\uffbe\051\uffbe\052\uffbe" +
    "\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061" +
    "\uffbe\071\uffbe\001\002\000\006\016\346\042\335\001\002" +
    "\000\060\002\uffbd\003\uffbd\006\uffbd\017\uffbd\036\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\045\uffbd\046\uffbd\047\332" +
    "\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056" +
    "\uffbd\057\uffbd\060\uffbd\061\uffbd\071\uffbd\001\002\000\060" +
    "\002\uffb8\003\uffb8\006\uffb8\017\uffb8\036\uffb8\037\uffb8\040" +
    "\uffb8\041\uffb8\042\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8" +
    "\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057" +
    "\uffb8\060\uffb8\061\uffb8\071\uffb8\001\002\000\006\016\334" +
    "\042\335\001\002\000\060\002\uffb9\003\uffb9\006\uffb9\017" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054" +
    "\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\071\uffb9" +
    "\001\002\000\052\003\026\006\022\036\033\037\040\040" +
    "\006\041\046\042\037\045\024\046\010\050\041\051\042" +
    "\052\023\053\020\054\013\055\025\056\011\057\044\060" +
    "\031\061\021\071\053\001\002\000\004\034\336\001\002" +
    "\000\034\005\127\006\132\007\121\010\117\011\134\014" +
    "\116\024\130\034\122\043\126\044\120\075\125\077\123" +
    "\100\131\001\002\000\042\013\144\014\136\020\145\021" +
    "\140\022\151\023\146\026\152\027\150\030\142\031\143" +
    "\032\153\033\147\035\340\062\154\063\135\064\137\001" +
    "\002\000\004\016\341\001\002\000\052\003\026\006\022" +
    "\036\033\037\040\040\006\041\046\042\037\045\024\046" +
    "\010\050\041\051\042\052\023\053\020\054\013\055\025" +
    "\056\011\057\044\060\031\061\021\071\053\001\002\000" +
    "\054\003\026\006\022\017\343\036\033\037\040\040\006" +
    "\041\046\042\037\045\024\046\010\050\041\051\042\052" +
    "\023\053\020\054\013\055\025\056\011\057\044\060\031" +
    "\061\021\071\053\001\002\000\060\002\uffba\003\uffba\006" +
    "\uffba\017\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba" +
    "\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053" +
    "\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba\061\uffba" +
    "\071\uffba\001\002\000\054\003\026\006\022\017\345\036" +
    "\033\037\040\040\006\041\046\042\037\045\024\046\010" +
    "\050\041\051\042\052\023\053\020\054\013\055\025\056" +
    "\011\057\044\060\031\061\021\071\053\001\002\000\056" +
    "\002\uffbc\003\uffbc\006\uffbc\017\uffbc\036\uffbc\037\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\045\uffbc\046\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060" +
    "\uffbc\061\uffbc\071\uffbc\001\002\000\052\003\026\006\022" +
    "\036\033\037\040\040\006\041\046\042\037\045\024\046" +
    "\010\050\041\051\042\052\023\053\020\054\013\055\025" +
    "\056\011\057\044\060\031\061\021\071\053\001\002\000" +
    "\054\003\026\006\022\017\350\036\033\037\040\040\006" +
    "\041\046\042\037\045\024\046\010\050\041\051\042\052" +
    "\023\053\020\054\013\055\025\056\011\057\044\060\031" +
    "\061\021\071\053\001\002\000\056\002\uffbb\003\uffbb\006" +
    "\uffbb\017\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\045\uffbb\046\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054" +
    "\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\071\uffbb" +
    "\001\002\000\034\005\127\006\271\007\121\010\117\011" +
    "\134\014\116\024\130\034\122\043\126\044\120\075\125" +
    "\077\123\100\131\001\002\000\004\035\356\001\002\000" +
    "\042\013\144\014\136\020\145\021\140\022\151\023\146" +
    "\026\152\027\150\030\142\031\143\032\153\033\147\035" +
    "\354\062\154\063\135\064\137\001\002\000\004\012\355" +
    "\001\002\000\056\002\uffe7\003\uffe7\006\uffe7\017\uffe7\036" +
    "\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\045\uffe7\046\uffe7" +
    "\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056" +
    "\uffe7\057\uffe7\060\uffe7\061\uffe7\071\uffe7\001\002\000\004" +
    "\012\357\001\002\000\056\002\uffe6\003\uffe6\006\uffe6\017" +
    "\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\045\uffe6" +
    "\046\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055" +
    "\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\071\uffe6\001\002" +
    "\000\004\034\361\001\002\000\004\035\362\001\002\000" +
    "\004\012\363\001\002\000\056\002\uffea\003\uffea\006\uffea" +
    "\017\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\045" +
    "\uffea\046\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea" +
    "\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea\071\uffea\001" +
    "\002\000\004\002\001\001\002\000\056\002\uffeb\003\uffeb" +
    "\006\uffeb\017\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042" +
    "\uffeb\045\uffeb\046\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb" +
    "\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\071" +
    "\uffeb\001\002\000\056\002\uffe8\003\uffe8\006\uffe8\017\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\045\uffe8\046" +
    "\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8" +
    "\056\uffe8\057\uffe8\060\uffe8\061\uffe8\071\uffe8\001\002\000" +
    "\004\013\374\001\002\000\004\014\372\001\002\000\006" +
    "\073\260\074\257\001\002\000\004\012\373\001\002\000" +
    "\056\002\uffad\003\uffad\006\uffad\017\uffad\036\uffad\037\uffad" +
    "\040\uffad\041\uffad\042\uffad\045\uffad\046\uffad\050\uffad\051" +
    "\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad" +
    "\060\uffad\061\uffad\071\uffad\001\002\000\004\012\375\001" +
    "\002\000\056\002\uffae\003\uffae\006\uffae\017\uffae\036\uffae" +
    "\037\uffae\040\uffae\041\uffae\042\uffae\045\uffae\046\uffae\050" +
    "\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae" +
    "\057\uffae\060\uffae\061\uffae\071\uffae\001\002\000\056\002" +
    "\uffc8\003\uffc8\006\uffc8\017\uffc8\036\uffc8\037\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\045\uffc8\046\uffc8\050\uffc8\051\uffc8\052" +
    "\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8" +
    "\061\uffc8\071\uffc8\001\002\000\004\012\u0102\001\002\000" +
    "\042\012\u0101\013\144\014\136\020\145\021\140\022\151" +
    "\023\146\026\152\027\150\030\142\031\143\032\153\033" +
    "\147\062\154\063\135\064\137\001\002\000\056\002\uffc9" +
    "\003\uffc9\006\uffc9\017\uffc9\036\uffc9\037\uffc9\040\uffc9\041" +
    "\uffc9\042\uffc9\045\uffc9\046\uffc9\050\uffc9\051\uffc9\052\uffc9" +
    "\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061" +
    "\uffc9\071\uffc9\001\002\000\056\002\uffc7\003\uffc7\006\uffc7" +
    "\017\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\045" +
    "\uffc7\046\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7" +
    "\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\071\uffc7\001" +
    "\002\000\034\005\127\006\132\007\121\010\117\011\134" +
    "\014\116\024\130\034\122\043\126\044\120\075\125\077" +
    "\123\100\131\001\002\000\042\013\144\014\136\020\145" +
    "\021\140\022\151\023\146\026\152\027\150\030\142\031" +
    "\143\032\153\033\147\035\u0105\062\154\063\135\064\137" +
    "\001\002\000\004\016\u0106\001\002\000\052\003\026\006" +
    "\022\036\033\037\040\040\006\041\046\042\037\045\024" +
    "\046\010\050\041\051\042\052\023\053\020\054\013\055" +
    "\025\056\011\057\044\060\031\061\021\071\053\001\002" +
    "\000\054\003\026\006\022\017\u0108\036\033\037\040\040" +
    "\006\041\046\042\037\045\024\046\010\050\041\051\042" +
    "\052\023\053\020\054\013\055\025\056\011\057\044\060" +
    "\031\061\021\071\053\001\002\000\056\002\uffb7\003\uffb7" +
    "\006\uffb7\017\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\045\uffb7\046\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7" +
    "\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\071" +
    "\uffb7\001\002\000\004\025\u010a\001\002\000\016\037\040" +
    "\040\006\041\046\045\024\046\010\050\041\001\002\000" +
    "\010\012\u010e\015\u010c\066\u010d\001\002\000\034\005\127" +
    "\006\250\007\121\010\117\011\134\014\116\024\130\034" +
    "\122\043\126\044\120\075\125\077\123\100\131\001\002" +
    "\000\004\067\u010f\001\002\000\056\002\uffe3\003\uffe3\006" +
    "\uffe3\017\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3" +
    "\045\uffe3\046\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054" +
    "\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\071\uffe3" +
    "\001\002\000\006\015\u0110\066\u0111\001\002\000\004\066" +
    "\u0124\001\002\000\004\067\u0112\001\002\000\004\015\u0113" +
    "\001\002\000\004\066\u0114\001\002\000\004\066\u0115\001" +
    "\002\000\034\005\127\006\271\007\121\010\117\011\134" +
    "\014\116\024\130\034\122\043\126\044\120\075\125\077" +
    "\123\100\131\001\002\000\006\065\u0117\067\u0118\001\002" +
    "\000\004\066\u011a\001\002\000\004\012\u0119\001\002\000" +
    "\056\002\uffdf\003\uffdf\006\uffdf\017\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\041\uffdf\042\uffdf\045\uffdf\046\uffdf\050\uffdf\051" +
    "\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf" +
    "\060\uffdf\061\uffdf\071\uffdf\001\002\000\034\005\127\006" +
    "\271\007\121\010\117\011\134\014\116\024\130\034\122" +
    "\043\126\044\120\075\125\077\123\100\131\001\002\000" +
    "\006\065\uffda\067\uffda\001\002\000\006\065\uffd8\067\uffd8" +
    "\001\002\000\006\065\u011f\067\u0120\001\002\000\044\013" +
    "\144\014\136\020\145\021\140\022\151\023\146\026\152" +
    "\027\150\030\142\031\143\032\153\033\147\062\154\063" +
    "\135\064\137\065\uffd9\067\uffd9\001\002\000\034\005\127" +
    "\006\271\007\121\010\117\011\134\014\116\024\130\034" +
    "\122\043\126\044\120\075\125\077\123\100\131\001\002" +
    "\000\006\065\uffdd\067\uffdd\001\002\000\006\065\uffdb\067" +
    "\uffdb\001\002\000\006\065\u011f\067\u0123\001\002\000\006" +
    "\065\uffdc\067\uffdc\001\002\000\034\005\127\006\271\007" +
    "\121\010\117\011\134\014\116\024\130\034\122\043\126" +
    "\044\120\075\125\077\123\100\131\001\002\000\006\065" +
    "\u011f\067\u0126\001\002\000\004\012\u0127\001\002\000\056" +
    "\002\uffe0\003\uffe0\006\uffe0\017\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\042\uffe0\045\uffe0\046\uffe0\050\uffe0\051\uffe0" +
    "\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060" +
    "\uffe0\061\uffe0\071\uffe0\001\002\000\004\012\u012d\001\002" +
    "\000\004\012\u012c\001\002\000\042\012\u012b\013\144\014" +
    "\136\020\145\021\140\022\151\023\146\026\152\027\150" +
    "\030\142\031\143\032\153\033\147\062\154\063\135\064" +
    "\137\001\002\000\056\002\uffe2\003\uffe2\006\uffe2\017\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\045\uffe2\046" +
    "\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2" +
    "\056\uffe2\057\uffe2\060\uffe2\061\uffe2\071\uffe2\001\002\000" +
    "\056\002\uffe1\003\uffe1\006\uffe1\017\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\041\uffe1\042\uffe1\045\uffe1\046\uffe1\050\uffe1\051" +
    "\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1" +
    "\060\uffe1\061\uffe1\071\uffe1\001\002\000\056\002\uffde\003" +
    "\uffde\006\uffde\017\uffde\036\uffde\037\uffde\040\uffde\041\uffde" +
    "\042\uffde\045\uffde\046\uffde\050\uffde\051\uffde\052\uffde\053" +
    "\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde" +
    "\071\uffde\001\002\000\056\002\uffe9\003\uffe9\006\uffe9\017" +
    "\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\045\uffe9" +
    "\046\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055" +
    "\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\071\uffe9\001\002" +
    "\000\052\003\026\006\022\036\033\037\040\040\006\041" +
    "\046\042\037\045\024\046\010\050\041\051\042\052\023" +
    "\053\020\054\013\055\025\056\011\057\044\060\031\061" +
    "\021\071\053\001\002\000\054\003\026\006\022\017\u0131" +
    "\036\033\037\040\040\006\041\046\042\037\045\024\046" +
    "\010\050\041\051\042\052\023\053\020\054\013\055\025" +
    "\056\011\057\044\060\031\061\021\071\053\001\002\000" +
    "\004\053\u0132\001\002\000\004\034\u0133\001\002\000\034" +
    "\005\127\006\132\007\121\010\117\011\134\014\116\024" +
    "\130\034\122\043\126\044\120\075\125\077\123\100\131" +
    "\001\002\000\042\013\144\014\136\020\145\021\140\022" +
    "\151\023\146\026\152\027\150\030\142\031\143\032\153" +
    "\033\147\035\u0135\062\154\063\135\064\137\001\002\000" +
    "\060\002\uffb6\003\uffb6\006\uffb6\012\u0136\017\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\042\uffb6\045\uffb6\046\uffb6\050" +
    "\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6" +
    "\057\uffb6\060\uffb6\061\uffb6\071\uffb6\001\002\000\056\002" +
    "\uffb5\003\uffb5\006\uffb5\017\uffb5\036\uffb5\037\uffb5\040\uffb5" +
    "\041\uffb5\042\uffb5\045\uffb5\046\uffb5\050\uffb5\051\uffb5\052" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5" +
    "\061\uffb5\071\uffb5\001\002\000\056\002\uffed\003\uffed\006" +
    "\uffed\017\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed" +
    "\045\uffed\046\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054" +
    "\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed\071\uffed" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0135\000\060\002\026\003\047\004\046\005\044\006" +
    "\034\007\042\012\035\013\027\014\013\015\014\017\051" +
    "\021\004\022\011\023\031\024\006\032\050\033\055\035" +
    "\003\040\015\041\016\046\053\050\033\051\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\377\035\376\042\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\004\103\005\044" +
    "\006\034\007\042\012\035\013\027\014\013\015\014\017" +
    "\051\021\004\022\011\023\031\024\006\032\050\033\055" +
    "\035\003\040\015\041\016\046\053\050\033\051\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\073\034\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\104\001\001\000\002\001" +
    "\001\000\056\003\101\004\046\005\044\006\034\007\042" +
    "\012\035\013\027\014\013\015\014\017\051\021\004\022" +
    "\011\023\031\024\006\032\050\033\055\035\003\040\015" +
    "\041\016\046\053\050\033\051\054\001\001\000\054\004" +
    "\103\005\044\006\034\007\042\012\035\013\027\014\013" +
    "\015\014\017\051\021\004\022\011\023\031\024\006\032" +
    "\050\033\055\035\003\040\015\041\016\046\053\050\033" +
    "\051\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\003\107\004\046" +
    "\005\044\006\034\007\042\012\035\013\027\014\013\015" +
    "\014\017\051\021\004\022\011\023\031\024\006\032\050" +
    "\033\055\035\003\040\015\041\016\046\053\050\033\051" +
    "\054\001\001\000\054\004\103\005\044\006\034\007\042" +
    "\012\035\013\027\014\013\015\014\017\051\021\004\022" +
    "\011\023\031\024\006\032\050\033\055\035\003\040\015" +
    "\041\016\046\053\050\033\051\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\114\001\001\000\002" +
    "\001\001\000\006\020\132\042\123\001\001\000\006\020" +
    "\243\042\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\236\020\237\042\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\227\042" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\210\042\123\001" +
    "\001\000\006\020\207\042\123\001\001\000\006\020\206" +
    "\042\123\001\001\000\006\020\205\042\123\001\001\000" +
    "\010\016\172\025\171\026\170\001\001\000\006\020\166" +
    "\042\123\001\001\000\006\020\165\042\123\001\001\000" +
    "\006\020\164\042\123\001\001\000\006\020\163\042\123" +
    "\001\001\000\006\020\162\042\123\001\001\000\006\020" +
    "\161\042\123\001\001\000\006\020\160\042\123\001\001" +
    "\000\006\020\157\042\123\001\001\000\006\020\156\042" +
    "\123\001\001\000\006\020\155\042\123\001\001\000\006" +
    "\020\154\042\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\003\175\004\046\005\044" +
    "\006\034\007\042\012\035\013\027\014\013\015\014\017" +
    "\051\021\004\022\011\023\031\024\006\032\050\033\055" +
    "\035\003\040\015\041\016\046\053\050\033\051\054\001" +
    "\001\000\054\004\103\005\044\006\034\007\042\012\035" +
    "\013\027\014\013\015\014\017\051\021\004\022\011\023" +
    "\031\024\006\032\050\033\055\035\003\040\015\041\016" +
    "\046\053\050\033\051\054\001\001\000\002\001\001\000" +
    "\006\020\204\042\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\217\042\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\215\042\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\222\042\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\225\042" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\231\042\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\234\042\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\242\042\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\300\042\123\001\001\000\012\020\251\035\250\042\123" +
    "\051\246\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\020\273\035\271\036\272\037\266\042" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\261\042\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\264\042\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\020\273\035\271\037" +
    "\276\042\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\311\042\123\001\001\000\010\020\306\042\123" +
    "\051\304\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\315\042\123\051" +
    "\314\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\321\042\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\324" +
    "\004\046\005\044\006\034\007\042\012\035\013\027\014" +
    "\013\015\014\017\051\021\004\022\011\023\031\024\006" +
    "\032\050\033\055\035\003\040\015\041\016\046\053\050" +
    "\033\051\054\001\001\000\054\004\103\005\044\006\034" +
    "\007\042\012\035\013\027\014\013\015\014\017\051\021" +
    "\004\022\011\023\031\024\006\032\050\033\055\035\003" +
    "\040\015\041\016\046\053\050\033\051\054\001\001\000" +
    "\006\030\330\031\327\001\001\000\002\001\001\000\004" +
    "\030\332\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\003\343\004\046\005\044\006\034" +
    "\007\042\012\035\013\027\014\013\015\014\017\051\021" +
    "\004\022\011\023\031\024\006\032\050\033\055\035\003" +
    "\040\015\041\016\046\053\050\033\051\054\001\001\000" +
    "\002\001\001\000\006\020\336\042\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\003\341\004\046\005" +
    "\044\006\034\007\042\012\035\013\027\014\013\015\014" +
    "\017\051\021\004\022\011\023\031\024\006\032\050\033" +
    "\055\035\003\040\015\041\016\046\053\050\033\051\054" +
    "\001\001\000\054\004\103\005\044\006\034\007\042\012" +
    "\035\013\027\014\013\015\014\017\051\021\004\022\011" +
    "\023\031\024\006\032\050\033\055\035\003\040\015\041" +
    "\016\046\053\050\033\051\054\001\001\000\002\001\001" +
    "\000\054\004\103\005\044\006\034\007\042\012\035\013" +
    "\027\014\013\015\014\017\051\021\004\022\011\023\031" +
    "\024\006\032\050\033\055\035\003\040\015\041\016\046" +
    "\053\050\033\051\054\001\001\000\002\001\001\000\056" +
    "\003\346\004\046\005\044\006\034\007\042\012\035\013" +
    "\027\014\013\015\014\017\051\021\004\022\011\023\031" +
    "\024\006\032\050\033\055\035\003\040\015\041\016\046" +
    "\053\050\033\051\054\001\001\000\054\004\103\005\044" +
    "\006\034\007\042\012\035\013\027\014\013\015\014\017" +
    "\051\021\004\022\011\023\031\024\006\032\050\033\055" +
    "\035\003\040\015\041\016\046\053\050\033\051\054\001" +
    "\001\000\002\001\001\000\010\020\352\035\351\042\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\u0103\042\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\003\u0106\004\046\005\044\006\034\007\042" +
    "\012\035\013\027\014\013\015\014\017\051\021\004\022" +
    "\011\023\031\024\006\032\050\033\055\035\003\040\015" +
    "\041\016\046\053\050\033\051\054\001\001\000\054\004" +
    "\103\005\044\006\034\007\042\012\035\013\027\014\013" +
    "\015\014\017\051\021\004\022\011\023\031\024\006\032" +
    "\050\033\055\035\003\040\015\041\016\046\053\050\033" +
    "\051\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\u010a\001\001\000\002\001\001\000\012\020\u0129" +
    "\035\u0128\042\123\051\u0127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\u0115\001\001\000\014\020\u011d\035\u011b\042\123\043\u0121" +
    "\045\u011a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\020\u011d\035\u011b" +
    "\042\123\043\u011c\045\u011a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\020\u011d\035\u011b\042\123\045\u0120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\020\u011d\035\u011b\042\123\043\u0124\045\u011a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\003\u012f\004\046\005\044\006\034\007" +
    "\042\012\035\013\027\014\013\015\014\017\051\021\004" +
    "\022\011\023\031\024\006\032\050\033\055\035\003\040" +
    "\015\041\016\046\053\050\033\051\054\001\001\000\054" +
    "\004\103\005\044\006\034\007\042\012\035\013\027\014" +
    "\013\015\014\017\051\021\004\022\011\023\031\024\006" +
    "\032\050\033\055\035\003\040\015\041\016\046\053\050" +
    "\033\051\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\u0133\042\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JCParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JCParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JCParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    JCLexer s;
    JCParser(JCLexer s){this.s = s;}
    private LinkedList<JCError> errorList = new LinkedList<>();
    public LinkedList<JCError> getSyntaxErrorList(){
        return errorList;
    }

    public void syntax_error(Symbol s){
        errorList.add(new JCError("Sintaxis", "Error en la instruccion, componente: "+s.value, s.left, s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        errorList.add(new JCError("Sintaxis - FATAL", "Error en la instruccion, componente: "+s.value, s.left, s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JCParser$actions {



  private final JCParser parser;

  /** Constructor */
  CUP$JCParser$actions(JCParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JCParser$do_action_part00000000(
    int                        CUP$JCParser$act_num,
    java_cup.runtime.lr_parser CUP$JCParser$parser,
    java.util.Stack            CUP$JCParser$stack,
    int                        CUP$JCParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JCParser$result;

      /* select the action based on the action number */
      switch (CUP$JCParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> start_val = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		RESULT = start_val;
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JCParser$parser.done_parsing();
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= STATEMENTS 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // STATEMENTS ::= STATEMENTS STATEMENT 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STATEMENTS ::= STATEMENT 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",1, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STATEMENT ::= IMPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STATEMENT ::= DECLARATION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATEMENT ::= ASSIGNATION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENT ::= ARRAY_ASSIGNATION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENT ::= IF_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEMENT ::= INCREMENT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STATEMENT ::= DECREMENT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STATEMENT ::= WHILE_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STATEMENT ::= FOR_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STATEMENT ::= DO_WHILE_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STATEMENT ::= DYNAMIC_LIST_DECLARATION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STATEMENT ::= DYNAMIC_LIST_MUTATOR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STATEMENT ::= RETURN_STMT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STATEMENT ::= BREAK 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STATEMENT ::= CONTINUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STATEMENT ::= START_WITH_INVOKE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STATEMENT ::= METHOD_CALL ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STATEMENT ::= METHOD_DECLARATION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT=a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STATEMENT ::= error ENDLINE 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",2, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // START_WITH_INVOKE ::= RW_START_WITH ID OPENPAR CLOSEPAR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		   RESULT = new StartWithInvoke(a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("START_WITH_INVOKE",24, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BREAK ::= RW_BREAK ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new Break(aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("BREAK",17, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTINUE ::= RW_CONTINUE ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new Continue(aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("CONTINUE",18, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IMPRESION ::= RW_PRINT OPENPAR EXPRESION CLOSEPAR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		   RESULT = new Print(a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("IMPRESION",3, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IMPRESION ::= RW_PRINT OPENPAR METHOD_CALL CLOSEPAR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		   RESULT = new Print(a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("IMPRESION",3, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MUTABILITY ::= RW_VAR 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("MUTABILITY",31, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MUTABILITY ::= RW_CONST 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("MUTABILITY",31, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARATION ::= MUTABILITY ID COLON TYPES ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Types c = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new Declaration(b, c, null, a, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARATION ::= MUTABILITY ID COLON TYPES EQUALS EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		Types c = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new Declaration(b, c, d, a, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARATION ::= MUTABILITY ID COLON TYPES EQUALS METHOD_CALL ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		Types c = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new Declaration(b, c, d, a, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARATION ::= MUTABILITY ID COLON TYPES OPENBRACKET CLOSEBRACKET EQUALS OPENBRACKET VALUES_LIST CLOSEBRACKET ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-10)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).right;
		Types c = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		
                RESULT = new Declaration(b, c, 1, d, a, aleft, aright);
            
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-10)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARATION ::= MUTABILITY ID COLON TYPES OPENBRACKET CLOSEBRACKET OPENBRACKET CLOSEBRACKET EQUALS OPENBRACKET VALUES_OF_VALUES_LIST CLOSEBRACKET ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-12)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-11)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-11)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).right;
		Types c = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		LinkedList<LinkedList<Instruction>> d = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		
                RESULT = new Declaration(b, c, d, 2, a, aleft, aright);
            
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-12)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARATION ::= MUTABILITY ID COLON TYPES EQUALS DYNAMIC_LIST_MUTATOR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		Types c = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
                RESULT = new Declaration(b, c, d, a, aleft, aright);
            
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",4, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALUES_OF_VALUES_LIST ::= VALUES_OF_VALUES_LIST COMMA OPENBRACKET VALUES_LIST CLOSEBRACKET 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		LinkedList<LinkedList<Instruction>> a = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = a; a.add(b); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("VALUES_OF_VALUES_LIST",34, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALUES_OF_VALUES_LIST ::= OPENBRACKET VALUES_LIST CLOSEBRACKET 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("VALUES_OF_VALUES_LIST",34, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALUES_LIST ::= VALUES_LIST COMMA ARRAY_VALUE 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; a.add(b); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("VALUES_LIST",33, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALUES_LIST ::= ARRAY_VALUE 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("VALUES_LIST",33, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ARRAY_VALUE ::= EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ARRAY_VALUE",35, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ARRAY_VALUE ::= METHOD_CALL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ARRAY_VALUE",35, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DYNAMIC_LIST_DECLARATION ::= RW_LIST LESS TYPES GREATER ID EQUALS RW_NEW RW_LIST OPENPAR CLOSEPAR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-8)).right;
		Types a = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		
    System.out.println("[debug] found dynamic list declaration");
    RESULT = new Declaration(b, a, null, false, aleft, aright, true);

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DYNAMIC_LIST_DECLARATION",38, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-10)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DYNAMIC_LIST_MUTATOR ::= ID DOT RW_APPEND OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
    System.out.println("[debug] found dynamic list mutator");
    RESULT = new DynamicListMutation(a, null, b, DynamicListMutation.MutationType.ADD, aleft, aright);

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DYNAMIC_LIST_MUTATOR",39, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DYNAMIC_LIST_MUTATOR ::= ID DOT RW_REMOVE OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
    System.out.println("[debug] found dynamic list mutator");
    RESULT = new DynamicListMutation(a, b, null, DynamicListMutation.MutationType.REMOVE, aleft, aright);

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DYNAMIC_LIST_MUTATOR",39, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ITERABLE_FIND ::= ID DOT RW_FIND OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
        System.out.println("[debug] found iterable find");
        RESULT = new Find(a, b, aleft, aright);
    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ITERABLE_FIND",32, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // METHOD_DECLARATION ::= TYPES ID OPENPAR CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		Types a = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new MethodDeclaration(a, b, new LinkedList<HashMap>(), c, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("METHOD_DECLARATION",25, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // METHOD_DECLARATION ::= TYPES ID OPENPAR METHOD_PARAMS_DECLARATION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).right;
		Types a = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		LinkedList<HashMap> c = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new MethodDeclaration(a, b, c, d, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("METHOD_DECLARATION",25, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // METHOD_PARAMS_DECLARATION ::= METHOD_PARAMS_DECLARATION COMMA TYPES ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Types b = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		
    RESULT = a;
    HashMap<String, Object> singleParam = new HashMap<>();
    singleParam.put("type", b);
    singleParam.put("id", c);
    RESULT.add(singleParam);
    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("METHOD_PARAMS_DECLARATION",26, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // METHOD_PARAMS_DECLARATION ::= TYPES ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Types a = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		
        RESULT = new LinkedList<HashMap>();
        HashMap<String, Object> singleParam = new HashMap<>();
        singleParam.put("type", a);
        singleParam.put("id", b);
        RESULT.add(singleParam);
    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("METHOD_PARAMS_DECLARATION",26, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CALL_ARGUMENTS ::= CALL_ARGUMENTS COMMA ARGUMENT 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; a.add(b); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("CALL_ARGUMENTS",28, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CALL_ARGUMENTS ::= ARGUMENT 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("CALL_ARGUMENTS",28, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ARGUMENT ::= EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ARGUMENT",29, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARGUMENT ::= METHOD_CALL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ARGUMENT",29, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // METHOD_CALL ::= ID OPENPAR CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		  RESULT = new MethodCall(a, new LinkedList<>(), aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("METHOD_CALL",27, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // METHOD_CALL ::= ID OPENPAR CALL_ARGUMENTS CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		  RESULT = new MethodCall(a, b, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("METHOD_CALL",27, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RETURN_STMT ::= RW_RETURN EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new ReturnIns(a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("RETURN_STMT",30, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RETURN_STMT ::= RW_RETURN ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new ReturnIns(null, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("RETURN_STMT",30, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // RETURN_STMT ::= RW_RETURN METHOD_CALL ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new ReturnIns(a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("RETURN_STMT",30, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TYPE_CAST_OPERATOR ::= OPENPAR TYPES CLOSEPAR 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Types type = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = type; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPE_CAST_OPERATOR",21, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASSIGNATION ::= ID EQUALS EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT=new SymbolAssignation(a, b, aleft, aright);  
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",5, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASSIGNATION ::= ID EQUALS METHOD_CALL ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT=new SymbolAssignation(a, b, aleft, aright);  
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",5, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASSIGNATION ::= ID OPENBRACKET EXPRESION CLOSEBRACKET EQUALS EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
                RESULT = new ArrayAssignation(a, b, null, c, aleft, aright);
            
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",5, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ASSIGNATION ::= ID OPENBRACKET EXPRESION CLOSEBRACKET OPENBRACKET EXPRESION CLOSEBRACKET EQUALS EXPRESION ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
                RESULT = new ArrayAssignation(a, b, c, d, aleft, aright);
            
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",5, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASSIGNATION ::= ID EQUALS DYNAMIC_LIST_MUTATOR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
                RESULT = new SymbolAssignation(a, b, aleft, aright);
            
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",5, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASSIGNATION ::= ID OPENBRACKET EXPRESION CLOSEBRACKET EQUALS DYNAMIC_LIST_MUTATOR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
                RESULT = new ArrayAssignation(a, b, null, c, aleft, aright);
            
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",5, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASSIGNATION ::= ID OPENBRACKET EXPRESION CLOSEBRACKET OPENBRACKET EXPRESION CLOSEBRACKET EQUALS DYNAMIC_LIST_MUTATOR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
                RESULT = new ArrayAssignation(a, b, c, d, aleft, aright);
            
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ASSIGNATION",5, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IF_STMT ::= RW_IF OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
               RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, new LinkedList<IfStatement.ConditionBlock>()), aleft, aright);
           
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("IF_STMT",8, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IF_STMT ::= RW_IF OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE ELSE_IF_BLOCKS 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		LinkedList<IfStatement.ConditionBlock> c = (LinkedList<IfStatement.ConditionBlock>)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, c), aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("IF_STMT",8, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IF_STMT ::= RW_IF OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE ELSE_IF_BLOCKS RW_ELSE OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		LinkedList<IfStatement.ConditionBlock> c = (LinkedList<IfStatement.ConditionBlock>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, c), d, aleft, aright);

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("IF_STMT",8, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-11)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IF_STMT ::= RW_IF OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE RW_ELSE OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-8)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		
    RESULT = new IfStatement(IfStatement.buildConditionBlockList(a, b, new LinkedList<IfStatement.ConditionBlock>()), c, aleft, aright);

              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("IF_STMT",8, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-10)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ELSE_IF_BLOCK ::= RW_ELSE RW_IF OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              IfStatement.ConditionBlock RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new IfStatement.ConditionBlock(a, b); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_BLOCK",22, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ELSE_IF_BLOCKS ::= ELSE_IF_BLOCKS ELSE_IF_BLOCK 
            {
              LinkedList<IfStatement.ConditionBlock> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<IfStatement.ConditionBlock> a = (LinkedList<IfStatement.ConditionBlock>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		IfStatement.ConditionBlock e = (IfStatement.ConditionBlock)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; a.add(e); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_BLOCKS",23, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ELSE_IF_BLOCKS ::= ELSE_IF_BLOCK 
            {
              LinkedList<IfStatement.ConditionBlock> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		IfStatement.ConditionBlock e = (IfStatement.ConditionBlock)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(e); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_BLOCKS",23, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // WHILE_STMT ::= RW_WHILE OPENPAR EXPRESION CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new WhileStatement(a, b, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("WHILE_STMT",9, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DO_WHILE_STMT ::= RW_DO OPENBRACE STATEMENTS CLOSEBRACE RW_WHILE OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new DoWhileStatement(b, a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DO_WHILE_STMT",10, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DO_WHILE_STMT ::= RW_DO OPENBRACE STATEMENTS CLOSEBRACE RW_WHILE OPENPAR EXPRESION CLOSEPAR ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		   RESULT = new DoWhileStatement(b, a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DO_WHILE_STMT",10, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-8)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FOR_STMT ::= RW_FOR OPENPAR ASSIGNATION EXPRESION ENDLINE FOR_UPDATE CLOSEPAR OPENBRACE STATEMENTS CLOSEBRACE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = new ForStatement(a, b, c, d, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("FOR_STMT",11, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-9)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FOR_UPDATE ::= ID EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = new SymbolAssignation(a, b, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FOR_UPDATE ::= INCREMENT_NO_ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FOR_UPDATE ::= DECREMENT_NO_ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",12, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // INCREMENT_NO_ENDLINE ::= ID PLUS PLUS 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		   RESULT = new SymbolAssignation(a, new Arithmetic(new SymbolAccess(a, aleft, aright),new Primitive(Types.INTEGER, 1, aleft, aright),ArithmeticOperands.SUM, aleft, aright), aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("INCREMENT_NO_ENDLINE",19, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECREMENT_NO_ENDLINE ::= ID MINUS MINUS 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		   RESULT = new SymbolAssignation(a, new Arithmetic(new SymbolAccess(a, aleft, aright), new Primitive(Types.INTEGER, 1, aleft, aright), ArithmeticOperands.SUB, aleft, aright), aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECREMENT_NO_ENDLINE",20, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INCREMENT ::= ID PLUS PLUS ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		   RESULT = new SymbolAssignation(a, new Arithmetic(new SymbolAccess(a, aleft, aright),new Primitive(Types.INTEGER, 1, aleft, aright),ArithmeticOperands.SUM, aleft, aright), aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("INCREMENT",15, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECREMENT ::= ID MINUS MINUS ENDLINE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		   RESULT = new SymbolAssignation(a, new Arithmetic(new SymbolAccess(a, aleft, aright), new Primitive(Types.INTEGER, 1, aleft, aright), ArithmeticOperands.SUB, aleft, aright), aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("DECREMENT",16, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TYPES ::= RW_INT 
            {
              Types RESULT =null;
		   RESULT=Types.INTEGER;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",13, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TYPES ::= RW_DOUBLE 
            {
              Types RESULT =null;
		   RESULT=Types.DOUBLE;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",13, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TYPES ::= RW_STRING 
            {
              Types RESULT =null;
		   RESULT=Types.STRING;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",13, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TYPES ::= RW_BOOL 
            {
              Types RESULT =null;
		   RESULT=Types.BOOLEAN;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",13, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TYPES ::= RW_CHAR 
            {
              Types RESULT =null;
		   RESULT=Types.CHARACTER;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",13, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TYPES ::= RW_VOID 
            {
              Types RESULT =null;
		   RESULT=Types.VOID;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("TYPES",13, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= OPENPAR TYPES CLOSEPAR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Types a = (Types)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new TypeCast(b, a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= MINUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, ArithmeticOperands.NEG, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= EXPRESION ASTERISK EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.MUL, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= EXPRESION SLASH EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.DIV, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= EXPRESION DOUBLEASTERISK EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.POW, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.MOD, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= EXPRESION MINUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.SUB, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= EXPRESION PLUS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, ArithmeticOperands.SUM, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= EXPRESION DOUBLEEQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.EQUALS, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= EXPRESION NOT_EQUALS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.NOT_EQUALS, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= EXPRESION LESS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.LESS_THAN, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION ::= EXPRESION LESSEQUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.LESS_THAN_OR_EQUALS, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION ::= EXPRESION GREATER EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.GREATER_THAN, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION ::= EXPRESION GREATEREQUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Comparison(a, b, ComparisonOperands.GREATER_THAN_OR_EQUALS, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION ::= NEGATION EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Logical(a, LogicalOperands.NOT, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Logical(a, b, LogicalOperands.OR, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Logical(a, b, LogicalOperands.AND, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		    RESULT = new Logical(a, b, LogicalOperands.XOR, aleft, aright);    
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION ::= INTEGER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive(Types.INTEGER,Integer.parseInt(a),  aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION ::= DECIMAL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive(Types.DOUBLE,new Double(a),  aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION ::= STRING 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive( Types.STRING,a, aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESION ::= CHAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive(Types.CHARACTER, a.charAt(0), aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESION ::= RW_TRUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive(Types.BOOLEAN, true, aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION ::= RW_FALSE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new Primitive(Types.BOOLEAN, false, aleft, aright );   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		   RESULT = new SymbolAccess(a, aleft, aright);   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESION ::= ID OPENBRACKET EXPRESION CLOSEBRACKET 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new ArrayAccess(a, b, null, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESION ::= ID OPENBRACKET EXPRESION CLOSEBRACKET OPENBRACKET EXPRESION CLOSEBRACKET 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new ArrayAccess(a, b, c, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-6)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESION ::= RW_LENGTH OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new Length(a, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESION ::= RW_ROUND OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new Round(a, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPRESION ::= RW_TOSTRING OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		 RESULT = new ToString(a, aleft, aright); 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-3)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPRESION ::= ITERABLE_FIND 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPRESION ::= OPENPAR EXPRESION CLOSEPAR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$JCParser$stack.elementAt(CUP$JCParser$top-1)).value;
		   RESULT = a;   
              CUP$JCParser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$JCParser$stack.elementAt(CUP$JCParser$top-2)), ((java_cup.runtime.Symbol)CUP$JCParser$stack.peek()), RESULT);
            }
          return CUP$JCParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JCParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JCParser$do_action(
    int                        CUP$JCParser$act_num,
    java_cup.runtime.lr_parser CUP$JCParser$parser,
    java.util.Stack            CUP$JCParser$stack,
    int                        CUP$JCParser$top)
    throws java.lang.Exception
    {
              return CUP$JCParser$do_action_part00000000(
                               CUP$JCParser$act_num,
                               CUP$JCParser$parser,
                               CUP$JCParser$stack,
                               CUP$JCParser$top);
    }
}

}
